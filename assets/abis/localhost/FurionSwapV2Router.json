{
  "address": "0xB3C9c6b890d2D0fD0cb50906679181eA471F9172",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_factory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_weth",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pairAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pairAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "name": "LiquidityRemoved",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountTokenDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "getAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "getAmountOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "name": "getReserves",
      "outputs": [
        {
          "internalType": "uint112",
          "name": "reserve0",
          "type": "uint112"
        },
        {
          "internalType": "uint112",
          "name": "reserve1",
          "type": "uint112"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_reserveB",
          "type": "uint256"
        }
      ],
      "name": "quote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountBMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountETHMin",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "swapETHForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactETHForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x324973178f7e3fa50ca60637d3311c1c66a6194b4afd400bfc59b7475eb68ec8",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0xB3C9c6b890d2D0fD0cb50906679181eA471F9172",
    "transactionIndex": 0,
    "gasUsed": "3411982",
    "logsBloom": "0x
    "blockHash": "0x6fdc574c49fc84498b730b14f5278221d7f12bd6628fe438798bd65094b189ea",
    "transactionHash": "0x324973178f7e3fa50ca60637d3311c1c66a6194b4afd400bfc59b7475eb68ec8",
    "logs": [],
    "blockNumber": 8,
    "cumulativeGasUsed": "3411982",
    "status": 1,
    "byzantium": true
  },
  "args": ["0xF886dDc935E8DA5Da26f58f5D266EFdfDA1AD260", "0x4b9c28F574974e3B108bCB76856C5C2aa40bc14C"],
  "numDeployments": 1,
  "solcInputHash": "f71c7515d120a5406563342b21637eec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pairAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"getAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_reserveB\",\"type\":\"uint256\"}],\"name\":\"quote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountETHMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"params\":{\"_amountADesired\":\"Amount of tokenA desired\",\"_amountAMin\":\"Minimum amoutn of tokenA\",\"_amountBDesired\":\"Amount of tokenB desired\",\"_amountBMin\":\"Minimum amount of tokenB\",\"_deadline\":\"Transaction will revert after this deadline\",\"_to\":\"Address that receive the lp token, normally the user himself\",\"_tokenA\":\"Address of tokenA\",\"_tokenB\":\"Address of tokenB\"},\"returns\":{\"amountA\":\"Amount of tokenA to be input\",\"amountB\":\"Amount of tokenB to be input\",\"liquidity\":\"LP token to be mint\"}},\"addLiquidityETH(address,uint256,uint256,uint256,address,uint256)\":{\"params\":{\"_amountETHMin\":\"Minimum amount of ETH\",\"_amountTokenDesired\":\"Amount of token desired\",\"_amountTokenMin\":\"Minimum amount of token\",\"_deadline\":\"Transaction will revert after this deadline\",\"_to\":\"Address that receive the lp token, normally the user himself\",\"_token\":\"Address of the other token\"},\"returns\":{\"amountETH\":\"Amount of ETH to be input\",\"amountToken\":\"Amount of token to be input\",\"liquidity\":\"LP token to be mint\"}},\"getAmountIn(uint256,address,address)\":{\"params\":{\"_amountOut\":\"Amount of tokens given out\",\"_tokenIn\":\"Address of the input token\",\"_tokenOut\":\"Address of the output token\"},\"returns\":{\"amountIn\":\"Amount of token in\"}},\"getAmountOut(uint256,address,address)\":{\"params\":{\"_amountIn\":\"Amount of tokens put in\",\"_tokenIn\":\"Address of the input token\",\"_tokenOut\":\"Address of the output token\"},\"returns\":{\"amountOut\":\"Amount of token out\"}},\"getAmountsIn(uint256,address[])\":{\"params\":{\"_amountOut\":\"Amount of tokens get out\",\"_path\":\"Path of trading routes\"},\"returns\":{\"amounts\":\"Amount of tokens\"}},\"getAmountsOut(uint256,address[])\":{\"params\":{\"_amountIn\":\"Amount of tokens put in\",\"_path\":\"Path of trading routes\"},\"returns\":{\"amounts\":\"Amount of tokens\"}},\"getReserves(address,address)\":{\"details\":\"You need to sort the token order by yourself!      No matter your input order, the return value will always start with lower address      i.e. _tokenA < _tokenB ? (_tokenA, _tokenB) : (_tokenB, _tokenA)\",\"params\":{\"_tokenA\":\"Address of tokenA\",\"_tokenB\":\"Address of tokenB\"},\"returns\":{\"reserve0\":\"Reserve of token0,\",\"reserve1\":\"Reserve of token1\"}},\"quote(uint256,uint256,uint256)\":{\"details\":\"Used when add or remove liquidity\",\"params\":{\"_amountA\":\"Amount of tokenA\",\"_reserveA\":\"Reserve of tokenA\",\"_reserveB\":\"Reserve of tokenB\"},\"returns\":{\"amountB\":\"Amount of tokenB\"}},\"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)\":{\"params\":{\"_amountAMin\":\"Minimum amount of tokenA given out\",\"_amountBMin\":\"Minimum amount of tokenB given out\",\"_deadline\":\"Deadline of this transaction\",\"_liquidity\":\"The lp token amount to be removed\",\"_to\":\"User address\",\"_tokenA\":\"Address of token A\",\"_tokenB\":\"Address of token B\"},\"returns\":{\"amount0\":\"Amount of token0 given out\",\"amount1\":\"Amount of token1 given out, here amount0 & 1 is ordered\"}},\"removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)\":{\"params\":{\"_amountETHMin\":\"Minimum amount of ETH given out\",\"_amountTokenMin\":\"Minimum amount of token given out\",\"_deadline\":\"Deadline of this transaction\",\"_liquidity\":\"The lp token amount to be removed\",\"_to\":\"User address\",\"_token\":\"Address of the other token\"},\"returns\":{\"amountETH\":\"Amount of ETH given out\",\"amountToken\":\"Amount of token given out\"}},\"swapETHForExactTokens(uint256,address[],address,uint256)\":{\"params\":{\"_amountOut\":\"Amount of output token\",\"_deadline\":\"Deadline of this transaction\",\"_path\":\"Address collection of trading path\",\"_to\":\"Receiver of the output token, generally user address\"},\"returns\":{\"amounts\":\"Amount of tokens\"}},\"swapExactETHForTokens(uint256,address[],address,uint256)\":{\"params\":{\"_amountOutMin\":\"Minimum amount of output token\",\"_deadline\":\"Deadline of this transaction\",\"_path\":\"Address collection of trading path\",\"_to\":\"Receiver of the output token, generally user address\"},\"returns\":{\"amounts\":\"Amount of tokens\"}},\"swapExactTokensForETH(uint256,uint256,address[],address,uint256)\":{\"params\":{\"_amountIn\":\"Amount of input token\",\"_amountOutMin\":\"Minimum amount of output token\",\"_deadline\":\"Deadline of this transaction\",\"_path\":\"Address collection of trading path\",\"_to\":\"Receiver of the output token, generally user address\"},\"returns\":{\"amounts\":\"Amount of tokens\"}},\"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\":{\"params\":{\"_amountIn\":\"Amount of input token\",\"_amountOutMin\":\"Minimum amount of token given out\",\"_deadline\":\"Deadline of this transaction\",\"_path\":\"Address collection of trading path\",\"_to\":\"Receiver of the output token, generally user address\"},\"returns\":{\"amounts\":\"Amount of tokens\"}},\"swapTokensForExactETH(uint256,uint256,address[],address,uint256)\":{\"params\":{\"_amountInMax\":\"Maxmium amount of token in\",\"_amountOut\":\"Amount of output token\",\"_deadline\":\"Deadline of this transaction\",\"_path\":\"Address collection of trading path\",\"_to\":\"Receiver of the output token, generally user address\"},\"returns\":{\"amounts\":\"Amount of tokens\"}},\"swapTokensForExactTokens(uint256,uint256,address[],address,uint256)\":{\"params\":{\"_amountInMax\":\"Maxmium amount of token in\",\"_amountOut\":\"Amount of output token\",\"_deadline\":\"Deadline of this transaction\",\"_path\":\"Address collection of trading path\",\"_to\":\"Receiver of the output token, generally user address\"},\"returns\":{\"amounts\":\"Amount of tokens\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Add liquidity function\"},\"addLiquidityETH(address,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Add liquidity for pair where one token is ETH\"},\"getAmountIn(uint256,address,address)\":{\"notice\":\"Used when swap tokens for exact tokens (out is fixed)\"},\"getAmountOut(uint256,address,address)\":{\"notice\":\"Used when swap exact tokens for tokens (in is fixed)\"},\"getAmountsIn(uint256,address[])\":{\"notice\":\"Used when swap exact tokens for tokens (out is fixed), multiple swap\"},\"getAmountsOut(uint256,address[])\":{\"notice\":\"Used when swap exact tokens for tokens (in is fixed), multiple swap\"},\"getReserves(address,address)\":{\"notice\":\"Fetch the reserves for a trading pair\"},\"quote(uint256,uint256,uint256)\":{\"notice\":\"Given some amount of an asset and pair reserves         returns an equivalent amount of the other asset\"},\"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Remove liquidity from the pool\"},\"removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Remove liquidity from the pool, one token is ETH\"},\"swapETHForExactTokens(uint256,address[],address,uint256)\":{\"notice\":\"Swap token for exact ETH, output is fixed\"},\"swapExactETHForTokens(uint256,address[],address,uint256)\":{\"notice\":\"Swap exact ETH for another token, input is fixed\"},\"swapExactTokensForETH(uint256,uint256,address[],address,uint256)\":{\"notice\":\"Swap exact tokens for ETH, input is fixed\"},\"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\":{\"notice\":\"Swap exact tokens for another token, input is fixed\"},\"swapTokensForExactETH(uint256,uint256,address[],address,uint256)\":{\"notice\":\"Swap token for exact ETH, output is fixed\"},\"swapTokensForExactTokens(uint256,uint256,address[],address,uint256)\":{\"notice\":\"Swap token for exact token, output is fixed\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/furion-swap/FurionSwapV2Router.sol\":\"FurionSwapV2Router\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/furion-swap/FurionSwapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../tokens/interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/IFurionSwapV2Router.sol\\\";\\nimport \\\"./interfaces/IFurionSwapFactory.sol\\\";\\nimport \\\"./interfaces/IFurionSwapPair.sol\\\";\\nimport {IERC20Decimals} from \\\"../utils/interfaces/IERC20Decimals.sol\\\";\\n\\n/*\\n//===================================//\\n ______ _   _______ _____ _____ _   _ \\n |  ___| | | | ___ \\\\_   _|  _  | \\\\ | |\\n | |_  | | | | |_/ / | | | | | |  \\\\| |\\n |  _| | | | |    /  | | | | | | . ` |\\n | |   | |_| | |\\\\ \\\\ _| |_\\\\ \\\\_/ / |\\\\  |\\n \\\\_|    \\\\___/\\\\_| \\\\_|\\\\___/ \\\\___/\\\\_| \\\\_/\\n//===================================//\\n* /\\n\\n/**\\n * @title  FurionSwapRouter\\n * @notice Router for the pool, you can add/remove liquidity or swap A for B.\\n *         Swapping fee rate is 3\\u2030, 99% of them is given to LP, and 1% to income maker\\n *         Very similar logic with Uniswap V2.\\n *\\n */\\n\\ncontract FurionSwapV2Router is IFurionSwapV2Router {\\n\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IFurionSwapPair;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // Some other contracts\\n    address public immutable override factory;\\n    address public immutable override WETH;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event LiquidityAdded(\\n        address indexed pairAddress,\\n        uint amountA,\\n        uint amountB,\\n        uint liquidity\\n    );\\n\\n    event LiquidityRemoved(\\n        address indexed pairAddress,\\n        uint amountA,\\n        uint amountB,\\n        uint liquidity\\n    );\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    constructor(address _factory, address _weth) {\\n        factory = _factory;\\n        WETH = _weth;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************** Modifiers *************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Transactions are available only before the deadline\\n     * @param _deadline Deadline of the pool\\n     */\\n    modifier beforeDeadline(uint _deadline) {\\n        if(_deadline > 0){\\n            if (msg.sender != IFurionSwapFactory(factory).incomeMaker()) {\\n                require(block.timestamp < _deadline, \\\"expired transaction\\\");\\n            }\\n        }\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    receive() external payable {\\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\\n    }\\n\\n    /**\\n     * @notice Add liquidity function\\n     * @param _tokenA Address of tokenA\\n     * @param _tokenB Address of tokenB\\n     * @param _amountADesired Amount of tokenA desired\\n     * @param _amountBDesired Amount of tokenB desired\\n     * @param _amountAMin Minimum amoutn of tokenA\\n     * @param _amountBMin Minimum amount of tokenB\\n     * @param _to Address that receive the lp token, normally the user himself\\n     * @param _deadline Transaction will revert after this deadline\\n     * @return amountA Amount of tokenA to be input\\n     * @return amountB Amount of tokenB to be input\\n     * @return liquidity LP token to be mint\\n     */\\n    function addLiquidity(\\n        address _tokenA,\\n        address _tokenB,\\n        uint _amountADesired,\\n        uint _amountBDesired,\\n        uint _amountAMin,\\n        uint _amountBMin,\\n        address _to,\\n        uint _deadline\\n    ) external beforeDeadline(_deadline) returns (uint amountA, uint amountB, uint liquidity) {\\n\\n        (amountA, amountB) = _addLiquidity(\\n                _tokenA,\\n                _tokenB,\\n                _amountADesired,\\n                _amountBDesired,\\n                _amountAMin,\\n                _amountBMin\\n            );\\n\\n        address pair = IFurionSwapFactory(factory).getPair(\\n            _tokenA,\\n            _tokenB\\n        );\\n\\n        _transferFromHelper(_tokenA, msg.sender, pair, amountA);\\n        _transferFromHelper(_tokenB, msg.sender, pair, amountB);\\n\\n        liquidity = IFurionSwapPair(pair).mint(_to);\\n\\n        emit LiquidityAdded(pair, amountA, amountB, liquidity);\\n    }\\n\\n    /**\\n     * @notice Add liquidity for pair where one token is ETH\\n     * @param _token Address of the other token\\n     * @param _amountTokenDesired Amount of token desired\\n     * @param _amountTokenMin Minimum amount of token\\n     * @param _amountETHMin Minimum amount of ETH\\n     * @param _to Address that receive the lp token, normally the user himself\\n     * @param _deadline Transaction will revert after this deadline\\n     * @return amountToken Amount of token to be input\\n     * @return amountETH Amount of ETH to be input\\n     * @return liquidity LP token to be mint\\n     */\\n    function addLiquidityETH(\\n        address _token,\\n        uint _amountTokenDesired,\\n        uint _amountTokenMin,\\n        uint _amountETHMin,\\n        address _to,\\n        uint _deadline\\n    ) external payable beforeDeadline(_deadline) returns (uint amountToken, uint amountETH, uint liquidity) {\\n\\n        (amountToken, amountETH) = _addLiquidity(\\n            _token,\\n            WETH,\\n            _amountTokenDesired,\\n            msg.value,\\n            _amountTokenMin,\\n            _amountETHMin\\n        );\\n\\n        address pair = IFurionSwapFactory(factory).getPair(\\n            _token,\\n            WETH\\n        );\\n\\n        _transferFromHelper(_token, msg.sender, pair, amountToken);\\n        IWETH(WETH).deposit{value: amountETH}();\\n        assert(IWETH(WETH).transfer(pair, amountETH));\\n\\n        liquidity = IFurionSwapPair(pair).mint(_to);\\n\\n        // refund dust eth, if any\\n        if (msg.value > amountETH) _safeTransferETH(msg.sender, msg.value - amountETH);\\n\\n        emit LiquidityAdded(pair, amountToken, amountETH, liquidity);\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from the pool\\n     * @param _tokenA Address of token A\\n     * @param _tokenB Address of token B\\n     * @param _liquidity The lp token amount to be removed\\n     * @param _amountAMin Minimum amount of tokenA given out\\n     * @param _amountBMin Minimum amount of tokenB given out\\n     * @param _to User address\\n     * @param _deadline Deadline of this transaction\\n     * @return amount0 Amount of token0 given out\\n     * @return amount1 Amount of token1 given out, here amount0 & 1 is ordered\\n     */\\n    function removeLiquidity(\\n        address _tokenA,\\n        address _tokenB,\\n        uint _liquidity,\\n        uint _amountAMin,\\n        uint _amountBMin,\\n        address _to,\\n        uint _deadline\\n    )\\n        public override\\n        beforeDeadline(_deadline)\\n        returns (uint amount0, uint amount1)\\n    {\\n        address pair = IFurionSwapFactory(factory).getPair(\\n            _tokenA,\\n            _tokenB\\n        );\\n\\n        IFurionSwapPair(pair).safeTransferFrom(msg.sender, pair, _liquidity); // send liquidity to pair\\n\\n        // token0 < token1, corresponding amoount\\n        (amount0, amount1) = IFurionSwapPair(pair).burn(_to);\\n\\n        (uint amount0Min, uint amount1Min) = _tokenA < _tokenB ? \\n        (_amountAMin, _amountBMin) : (_amountBMin, _amountAMin);\\n\\n        require(amount0 >= amount0Min, \\\"Insufficient amount for token0\\\");\\n        require(amount1 >= amount1Min, \\\"Insufficient amount for token1\\\");\\n\\n        emit LiquidityRemoved(pair, amount0, amount1, _liquidity);\\n    }\\n\\n    /**\\n     * @notice Remove liquidity from the pool, one token is ETH\\n     * @param _token Address of the other token\\n     * @param _liquidity The lp token amount to be removed\\n     * @param _amountTokenMin Minimum amount of token given out\\n     * @param _amountETHMin Minimum amount of ETH given out\\n     * @param _to User address\\n     * @param _deadline Deadline of this transaction\\n     * @return amountToken Amount of token given out\\n     * @return amountETH Amount of ETH given out\\n     */\\n    function removeLiquidityETH(\\n        address _token,\\n        uint _liquidity,\\n        uint _amountTokenMin,\\n        uint _amountETHMin,\\n        address _to,\\n        uint _deadline\\n    ) external beforeDeadline(_deadline) returns (uint amountToken, uint amountETH) {\\n        (amountToken, amountETH) = removeLiquidity(\\n            _token,\\n            WETH,\\n            _liquidity,\\n            _amountTokenMin,\\n            _amountETHMin,\\n            address(this),\\n            _deadline\\n        );\\n\\n        // firstly make tokens inside the contract then transfer out\\n        _transferHelper(_token, _to, amountToken);\\n\\n        IWETH(WETH).withdraw(amountETH);\\n        _safeTransferETH(_to, amountETH);\\n    }\\n\\n    /**\\n     * @notice Swap exact tokens for another token, input is fixed\\n     * @param _amountIn Amount of input token\\n     * @param _amountOutMin Minimum amount of token given out\\n     * @param _path Address collection of trading path\\n     * @param _to Receiver of the output token, generally user address\\n     * @param _deadline Deadline of this transaction\\n     * @return amounts Amount of tokens\\n     */\\n    function swapExactTokensForTokens(\\n        uint _amountIn,\\n        uint _amountOutMin,\\n        address[] calldata _path,\\n        address _to,\\n        uint _deadline\\n    ) public override beforeDeadline(_deadline) returns (uint[] memory amounts) {\\n        amounts = getAmountsOut(_amountIn, _path);\\n\\n        require(amounts[amounts.length - 1] >= _amountOutMin, \\\"FurionSwapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n\\n        _transferFromHelper(\\n            _path[0],\\n            msg.sender,\\n            IFurionSwapFactory(factory).getPair(_path[0], _path[1]),\\n            amounts[0]\\n        );\\n        _swap(amounts, _path, _to);\\n    }\\n\\n    /**\\n     * @notice Swap token for exact token, output is fixed\\n     * @param _amountOut Amount of output token\\n     * @param _amountInMax Maxmium amount of token in\\n     * @param _path Address collection of trading path\\n     * @param _to Receiver of the output token, generally user address\\n     * @param _deadline Deadline of this transaction\\n     * @return amounts Amount of tokens\\n     */\\n    function swapTokensForExactTokens(\\n        uint _amountOut,\\n        uint _amountInMax,\\n        address[] calldata _path,\\n        address _to,\\n        uint _deadline\\n    ) public override beforeDeadline(_deadline) returns (uint[] memory amounts) {\\n\\n        amounts = getAmountsIn(_amountOut, _path);\\n\\n        require(amounts[0] <= _amountInMax, \\\"FurionSwapV2Router: EXCESSIVE_INPUT_AMOUNT\\\");\\n\\n        _transferFromHelper(\\n            _path[0],\\n            msg.sender,\\n            IFurionSwapFactory(factory).getPair(_path[0], _path[1]),\\n            amounts[0]\\n        );\\n        _swap(amounts, _path, _to);\\n    }\\n\\n\\n    /**\\n     * @notice Swap exact ETH for another token, input is fixed\\n     * @param _amountOutMin Minimum amount of output token\\n     * @param _path Address collection of trading path\\n     * @param _to Receiver of the output token, generally user address\\n     * @param _deadline Deadline of this transaction\\n     * @return amounts Amount of tokens\\n     */\\n    function swapExactETHForTokens(\\n        uint _amountOutMin,\\n        address[] calldata _path,\\n        address _to,\\n        uint _deadline\\n    ) external override payable beforeDeadline(_deadline)\\n        returns (uint[] memory amounts)\\n    {\\n        require(_path[0] == WETH, \\\"FurionSwapV2Router: INVALID_PATH\\\");\\n        amounts = getAmountsOut(msg.value, _path);\\n        require(amounts[amounts.length - 1] >= _amountOutMin, \\\"FurionSwapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        \\n        IWETH(WETH).deposit{value: amounts[0]}();\\n        assert(IWETH(WETH).transfer(\\n            IFurionSwapFactory(factory).getPair(_path[0], _path[1]),\\n            amounts[0]\\n        ));\\n        _swap(amounts, _path, _to);\\n    }\\n\\n    /**\\n     * @notice Swap token for exact ETH, output is fixed\\n     * @param _amountOut Amount of output token\\n     * @param _amountInMax Maxmium amount of token in\\n     * @param _path Address collection of trading path\\n     * @param _to Receiver of the output token, generally user address\\n     * @param _deadline Deadline of this transaction\\n     * @return amounts Amount of tokens\\n     */\\n    function swapTokensForExactETH(\\n        uint _amountOut,\\n        uint _amountInMax,\\n        address[] calldata _path,\\n        address _to,\\n        uint _deadline\\n    ) external override beforeDeadline(_deadline)\\n        returns (uint[] memory amounts)\\n    {\\n        require(_path[_path.length - 1] == WETH, \\\"FurionSwapV2Router: INVALID_PATH\\\");\\n        amounts = getAmountsIn(_amountOut, _path);\\n        require(amounts[0] <= _amountInMax, \\\"FurionSwapV2Router: EXCESSIVE_INPUT_AMOUNT\\\");\\n\\n        _transferFromHelper(\\n            _path[0],\\n            msg.sender,\\n            IFurionSwapFactory(factory).getPair(_path[0], _path[1]),\\n            amounts[0]\\n        );\\n        _swap(amounts, _path, address(this));\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n        _safeTransferETH(_to, amounts[amounts.length - 1]);\\n    }\\n    \\n    /**\\n     * @notice Swap exact tokens for ETH, input is fixed\\n     * @param _amountIn Amount of input token\\n     * @param _amountOutMin Minimum amount of output token\\n     * @param _path Address collection of trading path\\n     * @param _to Receiver of the output token, generally user address\\n     * @param _deadline Deadline of this transaction\\n     * @return amounts Amount of tokens\\n     */\\n    function swapExactTokensForETH(\\n        uint _amountIn,\\n        uint _amountOutMin,\\n        address[] calldata _path,\\n        address _to,\\n        uint _deadline\\n    ) external override beforeDeadline(_deadline)\\n        returns (uint[] memory amounts)\\n    {\\n        require(_path[_path.length - 1] == WETH, \\\"FurionSwapV2Router: INVALID_PATH\\\");\\n        amounts = getAmountsOut(_amountIn, _path);\\n        require(amounts[amounts.length - 1] >= _amountOutMin, \\\"FurionSwapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n\\n        _transferFromHelper(\\n            _path[0],\\n            msg.sender,\\n            IFurionSwapFactory(factory).getPair(_path[0], _path[1]),\\n            amounts[0]\\n        );\\n\\n        _swap(amounts, _path, address(this));\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n        _safeTransferETH(_to, amounts[amounts.length - 1]);\\n    }\\n\\n    /**\\n     * @notice Swap token for exact ETH, output is fixed\\n     * @param _amountOut Amount of output token\\n     * @param _path Address collection of trading path\\n     * @param _to Receiver of the output token, generally user address\\n     * @param _deadline Deadline of this transaction\\n     * @return amounts Amount of tokens\\n     */\\n    function swapETHForExactTokens(\\n        uint _amountOut,\\n        address[] calldata _path,\\n        address _to,\\n        uint _deadline\\n    ) external override payable beforeDeadline(_deadline)\\n        returns (uint[] memory amounts)\\n    {\\n        require(_path[0] == WETH, \\\"FurionSwapV2Router: INVALID_PATH\\\");\\n        amounts = getAmountsIn(_amountOut, _path);\\n        require(amounts[0] <= msg.value, \\\"FurionSwapV2Router: EXCESSIVE_INPUT_AMOUNT\\\");\\n\\n        IWETH(WETH).deposit{value: amounts[0]}();\\n        assert(IWETH(WETH).transfer(\\n            IFurionSwapFactory(factory).getPair(_path[0], _path[1]),\\n            amounts[0]\\n        ));\\n        _swap(amounts, _path, _to);\\n\\n        // refund dust eth, if any\\n        if (msg.value > amounts[0]) _safeTransferETH(msg.sender, msg.value - amounts[0]);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Helper Functions *********************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Fetch the reserves for a trading pair\\n     * @dev You need to sort the token order by yourself!\\n     *      No matter your input order, the return value will always start with lower address\\n     *      i.e. _tokenA < _tokenB ? (_tokenA, _tokenB) : (_tokenB, _tokenA)\\n     * @param _tokenA Address of tokenA\\n     * @param _tokenB Address of tokenB\\n     * @return reserve0 Reserve of token0,\\n     * @return reserve1 Reserve of token1\\n     */\\n    function getReserves(address _tokenA, address _tokenB)\\n        public\\n        view\\n        returns (uint112 reserve0, uint112 reserve1)\\n    {\\n        address pairAddress = IFurionSwapFactory(factory).getPair(\\n            _tokenA,\\n            _tokenB\\n        );\\n\\n        // (token0 reserve, token1 reserve)\\n        (reserve0, reserve1) = IFurionSwapPair(pairAddress).getReserves();\\n    }\\n\\n    /**\\n     * @notice Used when swap exact tokens for tokens (in is fixed)\\n     * @param _amountIn Amount of tokens put in\\n     * @param _tokenIn Address of the input token\\n     * @param _tokenOut Address of the output token\\n     * @return amountOut Amount of token out\\n     */\\n    function getAmountOut(\\n        uint _amountIn,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) public view returns (uint amountOut) {\\n        (uint reserve0, uint reserve1) = getReserves(\\n            _tokenIn,\\n            _tokenOut\\n        );\\n\\n        // Get the right order\\n        (uint reserveIn, uint reserveOut) = _tokenIn < _tokenOut\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n\\n        require(_amountIn > 0, \\\"insufficient input amount\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"insufficient liquidity\\\");\\n\\n        // read fee rate from FurionSwapPair\\n        uint feeRate = IFurionSwapPair(\\n            IFurionSwapFactory(factory).getPair(_tokenIn, _tokenOut)\\n        ).feeRate();\\n\\n        uint amountInWithFee = _amountIn * (1000 - feeRate);\\n        uint numerator = amountInWithFee * reserveOut;\\n        uint denominator = reserveIn * 1000 + amountInWithFee;\\n\\n        amountOut = numerator / denominator;\\n    }\\n\\n    /**\\n     * @notice Used when swap tokens for exact tokens (out is fixed)\\n     * @param _amountOut Amount of tokens given out\\n     * @param _tokenIn Address of the input token\\n     * @param _tokenOut Address of the output token\\n     * @return amountIn Amount of token in\\n     */\\n    function getAmountIn(\\n        uint _amountOut,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) public view returns (uint amountIn) {\\n        (uint reserve0, uint reserve1) = getReserves(\\n            _tokenIn,\\n            _tokenOut\\n        );\\n\\n        // Get the right order\\n        (uint reserveIn, uint reserveOut) = _tokenIn < _tokenOut\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n\\n        require(_amountOut > 0, \\\"insufficient output amount\\\");\\n        require(reserveIn > 0 && reserveOut > 0, \\\"insufficient liquidity\\\");\\n\\n        // read fee rate from FurionSwapPair\\n        uint feeRate = IFurionSwapPair(\\n            IFurionSwapFactory(factory).getPair(_tokenIn, _tokenOut)\\n        ).feeRate();\\n\\n        uint numerator = reserveIn * (_amountOut) * 1000;\\n        uint denominator = (reserveOut - _amountOut) * (1000 - feeRate);\\n\\n        amountIn = numerator / denominator + 1;\\n    }\\n\\n    /**\\n     * @notice Used when swap exact tokens for tokens (in is fixed), multiple swap\\n     * @param _amountIn Amount of tokens put in\\n     * @param _path Path of trading routes\\n     * @return amounts Amount of tokens\\n     */\\n    function getAmountsOut(\\n        uint _amountIn,\\n        address[] memory _path\\n    ) public view returns (uint[] memory amounts) {\\n        require(_path.length >= 2, \\\"FurionSwap: INVALID_PATH\\\");\\n        amounts = new uint[](_path.length);\\n        amounts[0] = _amountIn;\\n        for (uint i; i < _path.length - 1; i++) {\\n            amounts[i+1] = getAmountOut(amounts[i], _path[i], _path[i+1]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Used when swap exact tokens for tokens (out is fixed), multiple swap\\n     * @param _amountOut Amount of tokens get out\\n     * @param _path Path of trading routes\\n     * @return amounts Amount of tokens\\n     */\\n    function getAmountsIn(\\n        uint _amountOut,\\n        address[] memory _path\\n    ) public view returns (uint[] memory amounts) {\\n\\n        require(_path.length >= 2, \\\"FurionSwap: INVALID_PATH\\\");\\n        amounts = new uint[](_path.length);\\n        amounts[amounts.length - 1] = _amountOut;\\n\\n        for (uint i = _path.length - 1; i > 0; i--) {\\n            amounts[i-1] = getAmountIn(amounts[i], _path[i-1], _path[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Given some amount of an asset and pair reserves\\n     *         returns an equivalent amount of the other asset\\n     * @dev Used when add or remove liquidity\\n     * @param _amountA Amount of tokenA\\n     * @param _reserveA Reserve of tokenA\\n     * @param _reserveB Reserve of tokenB\\n     * @return amountB Amount of tokenB\\n     */\\n    function quote(\\n        uint _amountA,\\n        uint _reserveA,\\n        uint _reserveB\\n    ) public pure returns (uint amountB) {\\n        require(_amountA > 0, \\\"insufficient amount\\\");\\n        require(_reserveA > 0 && _reserveB > 0, \\\"insufficient liquidity\\\");\\n\\n        amountB = (_amountA * _reserveB) / _reserveA;\\n    }\\n\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Internal Functions ********************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Internal function to finish adding liquidity\\n     * @param _tokenA Address of tokenA\\n     * @param _tokenB Address of tokenB\\n     * @param _amountADesired Amount of tokenA to be added\\n     * @param _amountBDesired Amount of tokenB to be added\\n     * @param _amountAMin Minimum amount of tokenA\\n     * @param _amountBMin Minimum amount of tokenB\\n     * @return amountA Real amount of tokenA\\n     * @return amountB Real amount of tokenB\\n     */\\n    function _addLiquidity(\\n        address _tokenA,\\n        address _tokenB,\\n        uint _amountADesired,\\n        uint _amountBDesired,\\n        uint _amountAMin,\\n        uint _amountBMin\\n    ) private view returns (uint amountA, uint amountB) {\\n\\n        (uint reserve0, uint reserve1) = getReserves(_tokenA, _tokenB);\\n        (uint reserveA, uint reserveB) = _tokenA < _tokenB ? (reserve0, reserve1) : (reserve1, reserve0);\\n\\n        if (reserveA == 0 && reserveB == 0) {\\n            (amountA, amountB) = (_amountADesired, _amountBDesired);\\n        } else {\\n            uint amountBOptimal = quote(\\n                _amountADesired,\\n                reserveA,\\n                reserveB\\n            );\\n            if (amountBOptimal <= _amountBDesired) {\\n                require(amountBOptimal >= _amountBMin, \\\"INSUFFICIENT_B_AMOUNT\\\");\\n                (amountA, amountB) = (_amountADesired, amountBOptimal);\\n            } else {\\n                uint amountAOptimal = quote(\\n                    _amountBDesired,\\n                    reserveB,\\n                    reserveA\\n                );\\n                require(amountAOptimal <= _amountADesired, \\\"UNAVAILABLE\\\");\\n                require(amountAOptimal >= _amountAMin, \\\"INSUFFICIENT_A_AMOUNT\\\");\\n                (amountA, amountB) = (amountAOptimal, _amountBDesired);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Finish the erc20 transfer operation\\n     * @param _token ERC20 token address\\n     * @param _from Address to give out the token\\n     * @param _to Pair address to receive the token\\n     * @param _amount Transfer amount\\n     */\\n    function _transferFromHelper(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint _amount\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        // (bool success, bytes memory data) = _token.call(abi.encodeWithSelector(0x23b872dd, _from, _to, _amount));\\n        // require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\n        IERC20(_token).safeTransferFrom(_from, _to, _amount);\\n    }\\n\\n    /**\\n     * @notice Finish the erc20 transfer operation\\n     * @param _token ERC20 token address\\n     * @param _to Address to receive the token\\n     * @param _amount Transfer amount\\n     */\\n    function _transferHelper(\\n        address _token,\\n        address _to,\\n        uint _amount\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        // (bool success, bytes memory data) = _token.call(abi.encodeWithSelector(0x23b872dd, _from, _to, _amount));\\n        // require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"TransferHelper: TRANSFER_FROM_FAILED\\\");\\n        IERC20(_token).safeTransfer(_to, _amount);\\n    }\\n\\n    /**\\n     * @notice Finish the ETH transfer operation\\n     * @param _to Address to receive the token\\n     * @param _amount Transfer amount\\n     */\\n    function _safeTransferETH(address _to, uint _amount) internal {\\n        (bool success,) = _to.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"TransferHelper: ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /**\\n     * @notice Finish swap process, requires the initial amount to have already been sent to the first pair\\n     * @param _amounts Amounts of token out for multiple swap\\n     * @param _path Address of tokens for multiple swap\\n     * @param _to Address of the final token receiver\\n     */\\n    function _swap(uint[] memory _amounts, address[] memory _path, address _to) private {\\n        for (uint i; i < _path.length - 1; i++) {\\n            // get token pair for each seperate swap\\n            (address input, address output) = (_path[i], _path[i+1]);\\n            address token0 = input < output ? input : output;\\n\\n            // get tokenOutAmount for each swap\\n            uint amountOut = _amounts[i + 1];\\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\\n\\n            address to = i < _path.length - 2 ? IFurionSwapFactory(factory).getPair(output, _path[i+2]) : _to;\\n            \\n            IFurionSwapPair(IFurionSwapFactory(factory).getPair(input, output)).swap(amount0Out, amount1Out, to);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdf7a572acb6d9ea450ce3c9a4fa8aaaf57765204aee91dbc933deb338b72444a\",\"license\":\"MIT\"},\"contracts/furion-swap/interfaces/IFurionSwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IFurionSwapFactory {\\n\\n    function getPair(address _token0, address _token1)\\n        external\\n        view\\n        returns (address);\\n\\n    function isFurionPairs(address _token0, address _token1)\\n        external\\n        view\\n        returns (bool);\\n\\n    function createPair(address _token0, address _token1) external returns (address _pair);\\n\\n    function allPairs(uint) external view returns (address _pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function incomeMaker() external view returns (address);\\n\\n    function incomeMakerProportion() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x71c8e3577a6600e499692276186e502ea9fcc979492b08354f3d9c33c0165adc\",\"license\":\"MIT\"},\"contracts/furion-swap/interfaces/IFurionSwapPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IFurionSwapPair is IERC20 {\\n    \\n    function initialize(\\n        address _token0,\\n        address _token1\\n    ) external;\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function feeRate() external view returns (uint256);\\n\\n    function deadline() external view returns (uint256);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (uint112 _reserve0, uint112 _reserve1);\\n\\n    function swap(\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n\\n    function burn(address) external returns (uint256, uint256);\\n\\n    function mint(address) external returns (uint256);\\n\\n    function sync() external;\\n}\\n\",\"keccak256\":\"0xa9ec052863ce17d666a919405146a7df0b00641c718efaa136e481f90e0a2def\",\"license\":\"MIT\"},\"contracts/furion-swap/interfaces/IFurionSwapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IFurionSwapV2Router {\\n    function factory() external view returns (address);\\n    function WETH() external view returns (address);\\n\\n    function addLiquidity(\\n        address _tokenA,\\n        address _tokenB,\\n        uint _amountADesired,\\n        uint _amountBDesired,\\n        uint _amountAMin,\\n        uint _amountBMin,\\n        address _to,\\n        uint _deadline\\n    ) external returns (uint _amountA, uint _amountB, uint _liquidity);\\n\\n    function addLiquidityETH(\\n        address _token,\\n        uint _amountTokenDesired,\\n        uint _amountTokenMin,\\n        uint _amountETHMin,\\n        address _to,\\n        uint _deadline\\n    ) external payable returns (uint _amountToken, uint _amountETH, uint _liquidity);\\n\\n    function removeLiquidity(\\n        address _tokenA,\\n        address _tokenB,\\n        uint _liquidity,\\n        uint _amountAMin,\\n        uint _amountBMin,\\n        address _to,\\n        uint _deadline\\n    ) external returns (uint _amountA, uint _amountB);\\n\\n    function removeLiquidityETH(\\n        address _token,\\n        uint _liquidity,\\n        uint _amountTokenMin,\\n        uint _amountETHMin,\\n        address _to,\\n        uint _deadline\\n    ) external returns (uint _amountToken, uint _amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint _amountIn,\\n        uint _amountOutMin,\\n        address[] calldata _path,\\n        address _to,\\n        uint _deadline\\n    ) external returns (uint[] memory _amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint _amountOut,\\n        uint _amountInMax,\\n        address[] calldata _path,\\n        address _to,\\n        uint _deadline\\n    ) external returns (uint[] memory _amounts);\\n\\n    function swapExactETHForTokens(\\n        uint _amountOutMin,\\n        address[] calldata _path,\\n        address _to,\\n        uint _deadline\\n    ) external payable returns (uint[] memory _amounts);\\n\\n    function swapTokensForExactETH(\\n        uint _amountOut,\\n        uint _amountInMax,\\n        address[] calldata _path,\\n        address _to,\\n        uint _deadline\\n    ) external returns (uint[] memory _amounts);\\n\\n    function swapExactTokensForETH(\\n        uint _amountIn,\\n        uint _amountOutMin,\\n        address[] calldata _path,\\n        address _to,\\n        uint _deadline\\n    ) external returns (uint[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint _amountOut,\\n        address[] calldata _path,\\n        address _to,\\n        uint _deadline\\n    ) external payable returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x6463fc44fb291719706aced834bc1c73403b9c2a051b249611868c0b4b32ad9c\",\"license\":\"MIT\"},\"contracts/tokens/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\",\"keccak256\":\"0xdfa6752043515a90d2f709c7448a72afd7b738c9f010a3cc26222a2ce7f4abf7\",\"license\":\"MIT\"},\"contracts/utils/interfaces/IERC20Decimals.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.10;\\n\\ninterface IERC20Decimals {\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x9bd98793bf98728ef7290c58f25e5655d6e0e70ad29428a3ae25f13abb681f11\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162003eb038038062003eb0833981016040819052620000349162000069565b6001600160a01b039182166080521660a052620000a1565b80516001600160a01b03811681146200006457600080fd5b919050565b600080604083850312156200007d57600080fd5b62000088836200004c565b915062000098602084016200004c565b90509250929050565b60805160a051613ce6620001ca6000396000818161013d015281816102cb0152818161052e0152818161057d0152818161094001528181610c2e01528181611189015281816116280152818161179c0152818161182a0152818161259d015281816125e401528181612690015281816127250152818161296f01528181612ad30152612b61015260008181610357015281816104460152818161071c0152818161085901528181610ae101528181610e99015281816110a201528181611411015281816115490152818161185901528181611a3401528181611ca301528181611daa01528181612159015281816122420152818161235d015281816124ba015281816126150152818161289001528181612b9001528181612f83015261306a0152613ce66000f3fe60806040526004361061012d5760003560e01c8063ad5c4648116100a5578063d06ca61f11610074578063e8e3370011610059578063e8e33700146103d9578063f305d71914610414578063fb3bdb411461042757600080fd5b8063d06ca61f14610379578063d52bb6f41461039957600080fd5b8063ad5c4648146102b9578063ad615dec14610305578063baa2abde14610325578063c45a01551461034557600080fd5b806338ed1739116100fc5780635e1e6325116100e15780635e1e6325146102665780637ff36ab5146102865780638803dbee1461029957600080fd5b806338ed1739146102265780634a25d94a1461024657600080fd5b806302751cec146101715780630a9a2b72146101ab57806318cbafe5146101d95780631f00ca741461020657600080fd5b3661016c57336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461016a5761016a61362d565b005b600080fd5b34801561017d57600080fd5b5061019161018c36600461366b565b61043a565b604080519283526020830191909152015b60405180910390f35b3480156101b757600080fd5b506101cb6101c63660046136c9565b6105f7565b6040519081526020016101a2565b3480156101e557600080fd5b506101f96101f4366004613757565b61084e565b6040516101a291906137ca565b34801561021257600080fd5b506101f9610221366004613824565b610d0d565b34801561023257600080fd5b506101f9610241366004613757565b610e8e565b34801561025257600080fd5b506101f9610261366004613757565b611097565b34801561027257600080fd5b506101cb6102813660046136c9565b6112ec565b6101f96102943660046138f5565b61153e565b3480156102a557600080fd5b506101f96102b4366004613757565b611a29565b3480156102c557600080fd5b506102ed7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016101a2565b34801561031157600080fd5b506101cb61032036600461395c565b611bcd565b34801561033157600080fd5b50610191610340366004613988565b611c97565b34801561035157600080fd5b506102ed7f000000000000000000000000000000000000000000000000000000000000000081565b34801561038557600080fd5b506101f9610394366004613824565b611fbe565b3480156103a557600080fd5b506103b96103b43660046139fa565b61212b565b604080516001600160701b039384168152929091166020830152016101a2565b3480156103e557600080fd5b506103f96103f4366004613a33565b612235565b604080519384526020840192909252908201526060016101a2565b6103f961042236600461366b565b6124ad565b6101f96104353660046138f5565b612885565b600080828015610528577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663be1bd3316040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c69190613aaf565b6001600160a01b0316336001600160a01b031614610528578042106105285760405162461bcd60e51b815260206004820152601360248201527232bc3834b932b2103a3930b739b0b1ba34b7b760691b60448201526064015b60405180910390fd5b610557897f00000000000000000000000000000000000000000000000000000000000000008a8a8a308a611c97565b9093509150610567898685612da2565b604051632e1a7d4d60e01b8152600481018390527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d90602401600060405180830381600087803b1580156105c957600080fd5b505af11580156105dd573d6000803e3d6000fd5b505050506105eb8583612dbb565b50965096945050505050565b6000806000610606858561212b565b6001600160701b031691506001600160701b03169150600080856001600160a01b0316876001600160a01b03161061063f578284610642565b83835b91509150600088116106965760405162461bcd60e51b815260206004820152601a60248201527f696e73756666696369656e74206f757470757420616d6f756e74000000000000604482015260640161051f565b6000821180156106a65750600081115b6106f25760405162461bcd60e51b815260206004820152601660248201527f696e73756666696369656e74206c697175696469747900000000000000000000604482015260640161051f565b60405163e6a4390560e01b81526001600160a01b03888116600483015287811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e6a4390590604401602060405180830381865afa158015610765573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107899190613aaf565b6001600160a01b031663978bbdb96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ea9190613acc565b905060006107f88a85613afb565b610804906103e8613afb565b90506000610814836103e8613b1a565b61081e8c86613b1a565b6108289190613afb565b90506108348183613b31565b61083f906001613b53565b9b9a5050505050505050505050565b6060818015610936577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663be1bd3316040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d99190613aaf565b6001600160a01b0316336001600160a01b031614610936578042106109365760405162461bcd60e51b815260206004820152601360248201527232bc3834b932b2103a3930b739b0b1ba34b7b760691b604482015260640161051f565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016868661096d600182613b1a565b81811061097c5761097c613b6b565b90506020020160208101906109919190613b81565b6001600160a01b0316146109e75760405162461bcd60e51b815260206004820181905260248201527f467572696f6e537761705632526f757465723a20494e56414c49445f50415448604482015260640161051f565b610a2488878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611fbe92505050565b9150868260018451610a369190613b1a565b81518110610a4657610a46613b6b565b60200260200101511015610ab35760405162461bcd60e51b815260206004820152602e60248201527f467572696f6e537761705632526f757465723a20494e53554646494349454e5460448201526d17d3d55514155517d05353d5539560921b606482015260840161051f565b610bed86866000818110610ac957610ac9613b6b565b9050602002016020810190610ade9190613b81565b337f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6a439058a8a6000818110610b2157610b21613b6b565b9050602002016020810190610b369190613b81565b8b8b6001818110610b4957610b49613b6b565b9050602002016020810190610b5e9190613b81565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015610ba9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcd9190613aaf565b85600081518110610be057610be0613b6b565b6020026020010151612e6a565b610c2c82878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250309250612e85915050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632e1a7d4d8360018551610c6a9190613b1a565b81518110610c7a57610c7a613b6b565b60200260200101516040518263ffffffff1660e01b8152600401610ca091815260200190565b600060405180830381600087803b158015610cba57600080fd5b505af1158015610cce573d6000803e3d6000fd5b50505050610d02848360018551610ce59190613b1a565b81518110610cf557610cf5613b6b565b6020026020010151612dbb565b509695505050505050565b6060600282511015610d615760405162461bcd60e51b815260206004820152601860248201527f467572696f6e537761703a20494e56414c49445f504154480000000000000000604482015260640161051f565b815167ffffffffffffffff811115610d7b57610d7b61380e565b604051908082528060200260200182016040528015610da4578160200160208202803683370190505b509050828160018351610db79190613b1a565b81518110610dc757610dc7613b6b565b602002602001018181525050600060018351610de39190613b1a565b90505b8015610e8757610e4e828281518110610e0157610e01613b6b565b602002602001015184600184610e179190613b1a565b81518110610e2757610e27613b6b565b6020026020010151858481518110610e4157610e41613b6b565b60200260200101516105f7565b82610e5a600184613b1a565b81518110610e6a57610e6a613b6b565b602090810291909101015280610e7f81613b9e565b915050610de6565b5092915050565b6060818015610f76577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663be1bd3316040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ef5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f199190613aaf565b6001600160a01b0316336001600160a01b031614610f7657804210610f765760405162461bcd60e51b815260206004820152601360248201527232bc3834b932b2103a3930b739b0b1ba34b7b760691b604482015260640161051f565b610fb388878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611fbe92505050565b9150868260018451610fc59190613b1a565b81518110610fd557610fd5613b6b565b602002602001015110156110425760405162461bcd60e51b815260206004820152602e60248201527f467572696f6e537761705632526f757465723a20494e53554646494349454e5460448201526d17d3d55514155517d05353d5539560921b606482015260840161051f565b61105886866000818110610ac957610ac9613b6b565b610d0282878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250612e85915050565b606081801561117f577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663be1bd3316040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111229190613aaf565b6001600160a01b0316336001600160a01b03161461117f5780421061117f5760405162461bcd60e51b815260206004820152601360248201527232bc3834b932b2103a3930b739b0b1ba34b7b760691b604482015260640161051f565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001686866111b6600182613b1a565b8181106111c5576111c5613b6b565b90506020020160208101906111da9190613b81565b6001600160a01b0316146112305760405162461bcd60e51b815260206004820181905260248201527f467572696f6e537761705632526f757465723a20494e56414c49445f50415448604482015260640161051f565b61126d88878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610d0d92505050565b9150868260008151811061128357611283613b6b565b60200260200101511115610ab35760405162461bcd60e51b815260206004820152602a60248201527f467572696f6e537761705632526f757465723a204558434553534956455f494e60448201526914155517d05353d5539560b21b606482015260840161051f565b60008060006112fb858561212b565b6001600160701b031691506001600160701b03169150600080856001600160a01b0316876001600160a01b031610611334578284611337565b83835b915091506000881161138b5760405162461bcd60e51b815260206004820152601960248201527f696e73756666696369656e7420696e70757420616d6f756e7400000000000000604482015260640161051f565b60008211801561139b5750600081115b6113e75760405162461bcd60e51b815260206004820152601660248201527f696e73756666696369656e74206c697175696469747900000000000000000000604482015260640161051f565b60405163e6a4390560e01b81526001600160a01b03888116600483015287811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e6a4390590604401602060405180830381865afa15801561145a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147e9190613aaf565b6001600160a01b031663978bbdb96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114df9190613acc565b905060006114ef826103e8613b1a565b6114f9908b613afb565b905060006115078483613afb565b9050600082611518876103e8613afb565b6115229190613b53565b905061152e8183613b31565b9c9b505050505050505050505050565b6060818015611626577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663be1bd3316040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c99190613aaf565b6001600160a01b0316336001600160a01b031614611626578042106116265760405162461bcd60e51b815260206004820152601360248201527232bc3834b932b2103a3930b739b0b1ba34b7b760691b604482015260640161051f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168686600081811061166357611663613b6b565b90506020020160208101906116789190613b81565b6001600160a01b0316146116ce5760405162461bcd60e51b815260206004820181905260248201527f467572696f6e537761705632526f757465723a20494e56414c49445f50415448604482015260640161051f565b61170b34878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611fbe92505050565b915086826001845161171d9190613b1a565b8151811061172d5761172d613b6b565b6020026020010151101561179a5760405162461bcd60e51b815260206004820152602e60248201527f467572696f6e537761705632526f757465723a20494e53554646494349454e5460448201526d17d3d55514155517d05353d5539560921b606482015260840161051f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0836000815181106117dc576117dc613b6b565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561180f57600080fd5b505af1158015611823573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6a439058989600081811061189957611899613b6b565b90506020020160208101906118ae9190613b81565b8a8a60018181106118c1576118c1613b6b565b90506020020160208101906118d69190613b81565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015611921573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119459190613aaf565b8460008151811061195857611958613b6b565b60200260200101516040518363ffffffff1660e01b81526004016119919291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af11580156119b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d49190613bb5565b6119e0576119e061362d565b611a1f82878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250612e85915050565b5095945050505050565b6060818015611b11577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663be1bd3316040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ab49190613aaf565b6001600160a01b0316336001600160a01b031614611b1157804210611b115760405162461bcd60e51b815260206004820152601360248201527232bc3834b932b2103a3930b739b0b1ba34b7b760691b604482015260640161051f565b611b4e88878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610d0d92505050565b91508682600081518110611b6457611b64613b6b565b602002602001015111156110425760405162461bcd60e51b815260206004820152602a60248201527f467572696f6e537761705632526f757465723a204558434553534956455f494e60448201526914155517d05353d5539560b21b606482015260840161051f565b6000808411611c1e5760405162461bcd60e51b815260206004820152601360248201527f696e73756666696369656e7420616d6f756e7400000000000000000000000000604482015260640161051f565b600083118015611c2e5750600082115b611c7a5760405162461bcd60e51b815260206004820152601660248201527f696e73756666696369656e74206c697175696469747900000000000000000000604482015260640161051f565b82611c858386613afb565b611c8f9190613b31565b949350505050565b600080828015611d80577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663be1bd3316040518163ffffffff1660e01b8152600401602060405180830381865afa158015611cff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d239190613aaf565b6001600160a01b0316336001600160a01b031614611d8057804210611d805760405162461bcd60e51b815260206004820152601360248201527232bc3834b932b2103a3930b739b0b1ba34b7b760691b604482015260640161051f565b60405163e6a4390560e01b81526001600160a01b038b811660048301528a811660248301526000917f00000000000000000000000000000000000000000000000000000000000000009091169063e6a4390590604401602060405180830381865afa158015611df3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e179190613aaf565b9050611e2e6001600160a01b03821633838c61315c565b60405163226bf2d160e21b81526001600160a01b0387811660048301528216906389afcb449060240160408051808303816000875af1158015611e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e999190613bd7565b90945092506000806001600160a01b03808d16908e1610611ebb57888a611ebe565b89895b9150915081861015611f125760405162461bcd60e51b815260206004820152601e60248201527f496e73756666696369656e7420616d6f756e7420666f7220746f6b656e300000604482015260640161051f565b80851015611f625760405162461bcd60e51b815260206004820152601e60248201527f496e73756666696369656e7420616d6f756e7420666f7220746f6b656e310000604482015260640161051f565b60408051878152602081018790529081018c90526001600160a01b038416907f1dc8bb69df2b8e91fbdcbfcf93d951b3f0000f085a95fe3f7946d6161439245d9060600160405180910390a25050505097509795505050505050565b60606002825110156120125760405162461bcd60e51b815260206004820152601860248201527f467572696f6e537761703a20494e56414c49445f504154480000000000000000604482015260640161051f565b815167ffffffffffffffff81111561202c5761202c61380e565b604051908082528060200260200182016040528015612055578160200160208202803683370190505b509050828160008151811061206c5761206c613b6b565b60200260200101818152505060005b600183516120899190613b1a565b811015610e87576120f28282815181106120a5576120a5613b6b565b60200260200101518483815181106120bf576120bf613b6b565b6020026020010151858460016120d59190613b53565b815181106120e5576120e5613b6b565b60200260200101516112ec565b826120fe836001613b53565b8151811061210e5761210e613b6b565b60209081029190910101528061212381613bfb565b91505061207b565b60405163e6a4390560e01b81526001600160a01b0383811660048301528281166024830152600091829182917f00000000000000000000000000000000000000000000000000000000000000009091169063e6a4390590604401602060405180830381865afa1580156121a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c69190613aaf565b9050806001600160a01b0316630902f1ac6040518163ffffffff1660e01b81526004016040805180830381865afa158015612205573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122299190613c2b565b90969095509350505050565b6000808083801561231f577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663be1bd3316040518163ffffffff1660e01b8152600401602060405180830381865afa15801561229e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c29190613aaf565b6001600160a01b0316336001600160a01b03161461231f5780421061231f5760405162461bcd60e51b815260206004820152601360248201527232bc3834b932b2103a3930b739b0b1ba34b7b760691b604482015260640161051f565b61232d8c8c8c8c8c8c6131dc565b60405163e6a4390560e01b81526001600160a01b038f811660048301528e811660248301529296509094506000917f0000000000000000000000000000000000000000000000000000000000000000169063e6a4390590604401602060405180830381865afa1580156123a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c89190613aaf565b90506123d68d338388612e6a565b6123e28c338387612e6a565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303816000875af115801561242a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061244e9190613acc565b60408051878152602081018790529081018290529093506001600160a01b038216907f64b83944e79c3ce8d4c297411de637c3e102d064677aac0c163976ebdcd6f50e9060600160405180910390a25050985098509895505050505050565b60008080838015612597577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663be1bd3316040518163ffffffff1660e01b8152600401602060405180830381865afa158015612516573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061253a9190613aaf565b6001600160a01b0316336001600160a01b031614612597578042106125975760405162461bcd60e51b815260206004820152601360248201527232bc3834b932b2103a3930b739b0b1ba34b7b760691b604482015260640161051f565b6125c58a7f00000000000000000000000000000000000000000000000000000000000000008b348c8c6131dc565b60405163e6a4390560e01b81526001600160a01b038d811660048301527f0000000000000000000000000000000000000000000000000000000000000000811660248301529296509094506000917f0000000000000000000000000000000000000000000000000000000000000000169063e6a4390590604401602060405180830381865afa15801561265c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126809190613aaf565b905061268e8b338388612e6a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b1580156126e957600080fd5b505af11580156126fd573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018990527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb925060440190506020604051808303816000875af1158015612772573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127969190613bb5565b6127a2576127a261362d565b6040516335313c2160e11b81526001600160a01b038881166004830152821690636a627842906024016020604051808303816000875af11580156127ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280e9190613acc565b92508334111561282b5761282b336128268634613b1a565b612dbb565b60408051868152602081018690529081018490526001600160a01b038216907f64b83944e79c3ce8d4c297411de637c3e102d064677aac0c163976ebdcd6f50e9060600160405180910390a2505096509650969350505050565b606081801561296d577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663be1bd3316040518163ffffffff1660e01b8152600401602060405180830381865afa1580156128ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129109190613aaf565b6001600160a01b0316336001600160a01b03161461296d5780421061296d5760405162461bcd60e51b815260206004820152601360248201527232bc3834b932b2103a3930b739b0b1ba34b7b760691b604482015260640161051f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316868660008181106129aa576129aa613b6b565b90506020020160208101906129bf9190613b81565b6001600160a01b031614612a155760405162461bcd60e51b815260206004820181905260248201527f467572696f6e537761705632526f757465723a20494e56414c49445f50415448604482015260640161051f565b612a5287878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610d0d92505050565b91503482600081518110612a6857612a68613b6b565b60200260200101511115612ad15760405162461bcd60e51b815260206004820152602a60248201527f467572696f6e537761705632526f757465723a204558434553534956455f494e60448201526914155517d05353d5539560b21b606482015260840161051f565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db083600081518110612b1357612b13613b6b565b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b158015612b4657600080fd5b505af1158015612b5a573d6000803e3d6000fd5b50505050507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a9059cbb7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e6a4390589896000818110612bd057612bd0613b6b565b9050602002016020810190612be59190613b81565b8a8a6001818110612bf857612bf8613b6b565b9050602002016020810190612c0d9190613b81565b6040516001600160e01b031960e085901b1681526001600160a01b03928316600482015291166024820152604401602060405180830381865afa158015612c58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c7c9190613aaf565b84600081518110612c8f57612c8f613b6b565b60200260200101516040518363ffffffff1660e01b8152600401612cc89291906001600160a01b03929092168252602082015260400190565b6020604051808303816000875af1158015612ce7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d0b9190613bb5565b612d1757612d1761362d565b612d5682878780806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250899250612e85915050565b81600081518110612d6957612d69613b6b565b6020026020010151341115611a1f57611a1f3383600081518110612d8f57612d8f613b6b565b6020026020010151346128269190613b1a565b612db66001600160a01b0384168383613381565b505050565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612e08576040519150601f19603f3d011682016040523d82523d6000602084013e612e0d565b606091505b5050905080612db65760405162461bcd60e51b815260206004820152602360248201527f5472616e7366657248656c7065723a204554485f5452414e534645525f46414960448201526213115160ea1b606482015260840161051f565b612e7f6001600160a01b03851684848461315c565b50505050565b60005b60018351612e969190613b1a565b811015612e7f57600080848381518110612eb257612eb2613b6b565b602002602001015185846001612ec89190613b53565b81518110612ed857612ed8613b6b565b6020026020010151915091506000816001600160a01b0316836001600160a01b031610612f055781612f07565b825b9050600087612f17866001613b53565b81518110612f2757612f27613b6b565b60200260200101519050600080836001600160a01b0316866001600160a01b031614612f5557826000612f59565b6000835b91509150600060028a51612f6d9190613b1a565b8810612f795788613040565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663e6a43905878c612fb58c6002613b53565b81518110612fc557612fc5613b6b565b60200260200101516040518363ffffffff1660e01b8152600401612fff9291906001600160a01b0392831681529116602082015260400190565b602060405180830381865afa15801561301c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130409190613aaf565b60405163e6a4390560e01b81526001600160a01b03898116600483015288811660248301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063e6a4390590604401602060405180830381865afa1580156130b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130d79190613aaf565b6040516336cd320560e11b815260048101859052602481018490526001600160a01b0383811660448301529190911690636d9a640a90606401600060405180830381600087803b15801561312a57600080fd5b505af115801561313e573d6000803e3d6000fd5b5050505050505050505050808061315490613bfb565b915050612e88565b6040516001600160a01b0380851660248301528316604482015260648101829052612e7f9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909316929092179091526133b1565b6000806000806131ec8a8a61212b565b6001600160701b031691506001600160701b031691506000808a6001600160a01b03168c6001600160a01b031610613225578284613228565b83835b9150915081600014801561323a575080155b1561324a57899550889450613372565b60006132578b8484611bcd565b90508981116132bb57878110156132b05760405162461bcd60e51b815260206004820152601560248201527f494e53554646494349454e545f425f414d4f554e540000000000000000000000604482015260640161051f565b8a9650945084613370565b60006132c88b8486611bcd565b90508b81111561331a5760405162461bcd60e51b815260206004820152600b60248201527f554e415641494c41424c45000000000000000000000000000000000000000000604482015260640161051f565b8981101561336a5760405162461bcd60e51b815260206004820152601560248201527f494e53554646494349454e545f415f414d4f554e540000000000000000000000604482015260640161051f565b96508995505b505b50505050965096945050505050565b6040516001600160a01b038316602482015260448101829052612db690849063a9059cbb60e01b90606401613190565b6000613406826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166134969092919063ffffffff16565b805190915015612db657808060200190518101906134249190613bb5565b612db65760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161051f565b6060611c8f84846000856134ac565b9392505050565b6060824710156135245760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161051f565b6001600160a01b0385163b61357b5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161051f565b600080866001600160a01b031685876040516135979190613c8a565b60006040518083038185875af1925050503d80600081146135d4576040519150601f19603f3d011682016040523d82523d6000602084013e6135d9565b606091505b50915091506135e98282866135f4565b979650505050505050565b606083156136035750816134a5565b8251156136135782518084602001fd5b8160405162461bcd60e51b815260040161051f9190613ca6565b634e487b7160e01b600052600160045260246000fd5b6001600160a01b038116811461365857600080fd5b50565b803561366681613643565b919050565b60008060008060008060c0878903121561368457600080fd5b863561368f81613643565b955060208701359450604087013593506060870135925060808701356136b481613643565b8092505060a087013590509295509295509295565b6000806000606084860312156136de57600080fd5b8335925060208401356136f081613643565b9150604084013561370081613643565b809150509250925092565b60008083601f84011261371d57600080fd5b50813567ffffffffffffffff81111561373557600080fd5b6020830191508360208260051b850101111561375057600080fd5b9250929050565b60008060008060008060a0878903121561377057600080fd5b8635955060208701359450604087013567ffffffffffffffff81111561379557600080fd5b6137a189828a0161370b565b90955093505060608701356137b581613643565b80925050608087013590509295509295509295565b6020808252825182820181905260009190848201906040850190845b81811015613802578351835292840192918401916001016137e6565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561383757600080fd5b8235915060208084013567ffffffffffffffff8082111561385757600080fd5b818601915086601f83011261386b57600080fd5b81358181111561387d5761387d61380e565b8060051b604051601f19603f830116810181811085821117156138a2576138a261380e565b6040529182528482019250838101850191898311156138c057600080fd5b938501935b828510156138e5576138d68561365b565b845293850193928501926138c5565b8096505050505050509250929050565b60008060008060006080868803121561390d57600080fd5b85359450602086013567ffffffffffffffff81111561392b57600080fd5b6139378882890161370b565b909550935050604086013561394b81613643565b949793965091946060013592915050565b60008060006060848603121561397157600080fd5b505081359360208301359350604090920135919050565b600080600080600080600060e0888a0312156139a357600080fd5b87356139ae81613643565b965060208801356139be81613643565b955060408801359450606088013593506080880135925060a08801356139e381613643565b8092505060c0880135905092959891949750929550565b60008060408385031215613a0d57600080fd5b8235613a1881613643565b91506020830135613a2881613643565b809150509250929050565b600080600080600080600080610100898b031215613a5057600080fd5b8835613a5b81613643565b97506020890135613a6b81613643565b965060408901359550606089013594506080890135935060a0890135925060c0890135613a9781613643565b8092505060e089013590509295985092959890939650565b600060208284031215613ac157600080fd5b81516134a581613643565b600060208284031215613ade57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615613b1557613b15613ae5565b500290565b600082821015613b2c57613b2c613ae5565b500390565b600082613b4e57634e487b7160e01b600052601260045260246000fd5b500490565b60008219821115613b6657613b66613ae5565b500190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215613b9357600080fd5b81356134a581613643565b600081613bad57613bad613ae5565b506000190190565b600060208284031215613bc757600080fd5b815180151581146134a557600080fd5b60008060408385031215613bea57600080fd5b505080516020909101519092909150565b600060018201613c0d57613c0d613ae5565b5060010190565b80516001600160701b038116811461366657600080fd5b60008060408385031215613c3e57600080fd5b613c4783613c14565b9150613c5560208401613c14565b90509250929050565b60005b83811015613c79578181015183820152602001613c61565b83811115612e7f5750506000910152565b60008251613c9c818460208701613c5e565b9190910192915050565b6020815260008251806020840152613cc5816040850160208701613c5e565b601f01601f1916919091016040019291505056fea164736f6c634300080d000a",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
        "params": {
          "_amountADesired": "Amount of tokenA desired",
          "_amountAMin": "Minimum amoutn of tokenA",
          "_amountBDesired": "Amount of tokenB desired",
          "_amountBMin": "Minimum amount of tokenB",
          "_deadline": "Transaction will revert after this deadline",
          "_to": "Address that receive the lp token, normally the user himself",
          "_tokenA": "Address of tokenA",
          "_tokenB": "Address of tokenB"
        },
        "returns": {
          "amountA": "Amount of tokenA to be input",
          "amountB": "Amount of tokenB to be input",
          "liquidity": "LP token to be mint"
        }
      },
      "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)": {
        "params": {
          "_amountETHMin": "Minimum amount of ETH",
          "_amountTokenDesired": "Amount of token desired",
          "_amountTokenMin": "Minimum amount of token",
          "_deadline": "Transaction will revert after this deadline",
          "_to": "Address that receive the lp token, normally the user himself",
          "_token": "Address of the other token"
        },
        "returns": {
          "amountETH": "Amount of ETH to be input",
          "amountToken": "Amount of token to be input",
          "liquidity": "LP token to be mint"
        }
      },
      "getAmountIn(uint256,address,address)": {
        "params": {
          "_amountOut": "Amount of tokens given out",
          "_tokenIn": "Address of the input token",
          "_tokenOut": "Address of the output token"
        },
        "returns": {
          "amountIn": "Amount of token in"
        }
      },
      "getAmountOut(uint256,address,address)": {
        "params": {
          "_amountIn": "Amount of tokens put in",
          "_tokenIn": "Address of the input token",
          "_tokenOut": "Address of the output token"
        },
        "returns": {
          "amountOut": "Amount of token out"
        }
      },
      "getAmountsIn(uint256,address[])": {
        "params": {
          "_amountOut": "Amount of tokens get out",
          "_path": "Path of trading routes"
        },
        "returns": {
          "amounts": "Amount of tokens"
        }
      },
      "getAmountsOut(uint256,address[])": {
        "params": {
          "_amountIn": "Amount of tokens put in",
          "_path": "Path of trading routes"
        },
        "returns": {
          "amounts": "Amount of tokens"
        }
      },
      "getReserves(address,address)": {
        "details": "You need to sort the token order by yourself!      No matter your input order, the return value will always start with lower address      i.e. _tokenA < _tokenB ? (_tokenA, _tokenB) : (_tokenB, _tokenA)",
        "params": {
          "_tokenA": "Address of tokenA",
          "_tokenB": "Address of tokenB"
        },
        "returns": {
          "reserve0": "Reserve of token0,",
          "reserve1": "Reserve of token1"
        }
      },
      "quote(uint256,uint256,uint256)": {
        "details": "Used when add or remove liquidity",
        "params": {
          "_amountA": "Amount of tokenA",
          "_reserveA": "Reserve of tokenA",
          "_reserveB": "Reserve of tokenB"
        },
        "returns": {
          "amountB": "Amount of tokenB"
        }
      },
      "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
        "params": {
          "_amountAMin": "Minimum amount of tokenA given out",
          "_amountBMin": "Minimum amount of tokenB given out",
          "_deadline": "Deadline of this transaction",
          "_liquidity": "The lp token amount to be removed",
          "_to": "User address",
          "_tokenA": "Address of token A",
          "_tokenB": "Address of token B"
        },
        "returns": {
          "amount0": "Amount of token0 given out",
          "amount1": "Amount of token1 given out, here amount0 & 1 is ordered"
        }
      },
      "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)": {
        "params": {
          "_amountETHMin": "Minimum amount of ETH given out",
          "_amountTokenMin": "Minimum amount of token given out",
          "_deadline": "Deadline of this transaction",
          "_liquidity": "The lp token amount to be removed",
          "_to": "User address",
          "_token": "Address of the other token"
        },
        "returns": {
          "amountETH": "Amount of ETH given out",
          "amountToken": "Amount of token given out"
        }
      },
      "swapETHForExactTokens(uint256,address[],address,uint256)": {
        "params": {
          "_amountOut": "Amount of output token",
          "_deadline": "Deadline of this transaction",
          "_path": "Address collection of trading path",
          "_to": "Receiver of the output token, generally user address"
        },
        "returns": {
          "amounts": "Amount of tokens"
        }
      },
      "swapExactETHForTokens(uint256,address[],address,uint256)": {
        "params": {
          "_amountOutMin": "Minimum amount of output token",
          "_deadline": "Deadline of this transaction",
          "_path": "Address collection of trading path",
          "_to": "Receiver of the output token, generally user address"
        },
        "returns": {
          "amounts": "Amount of tokens"
        }
      },
      "swapExactTokensForETH(uint256,uint256,address[],address,uint256)": {
        "params": {
          "_amountIn": "Amount of input token",
          "_amountOutMin": "Minimum amount of output token",
          "_deadline": "Deadline of this transaction",
          "_path": "Address collection of trading path",
          "_to": "Receiver of the output token, generally user address"
        },
        "returns": {
          "amounts": "Amount of tokens"
        }
      },
      "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
        "params": {
          "_amountIn": "Amount of input token",
          "_amountOutMin": "Minimum amount of token given out",
          "_deadline": "Deadline of this transaction",
          "_path": "Address collection of trading path",
          "_to": "Receiver of the output token, generally user address"
        },
        "returns": {
          "amounts": "Amount of tokens"
        }
      },
      "swapTokensForExactETH(uint256,uint256,address[],address,uint256)": {
        "params": {
          "_amountInMax": "Maxmium amount of token in",
          "_amountOut": "Amount of output token",
          "_deadline": "Deadline of this transaction",
          "_path": "Address collection of trading path",
          "_to": "Receiver of the output token, generally user address"
        },
        "returns": {
          "amounts": "Amount of tokens"
        }
      },
      "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)": {
        "params": {
          "_amountInMax": "Maxmium amount of token in",
          "_amountOut": "Amount of output token",
          "_deadline": "Deadline of this transaction",
          "_path": "Address collection of trading path",
          "_to": "Receiver of the output token, generally user address"
        },
        "returns": {
          "amounts": "Amount of tokens"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
        "notice": "Add liquidity function"
      },
      "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)": {
        "notice": "Add liquidity for pair where one token is ETH"
      },
      "getAmountIn(uint256,address,address)": {
        "notice": "Used when swap tokens for exact tokens (out is fixed)"
      },
      "getAmountOut(uint256,address,address)": {
        "notice": "Used when swap exact tokens for tokens (in is fixed)"
      },
      "getAmountsIn(uint256,address[])": {
        "notice": "Used when swap exact tokens for tokens (out is fixed), multiple swap"
      },
      "getAmountsOut(uint256,address[])": {
        "notice": "Used when swap exact tokens for tokens (in is fixed), multiple swap"
      },
      "getReserves(address,address)": {
        "notice": "Fetch the reserves for a trading pair"
      },
      "quote(uint256,uint256,uint256)": {
        "notice": "Given some amount of an asset and pair reserves         returns an equivalent amount of the other asset"
      },
      "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
        "notice": "Remove liquidity from the pool"
      },
      "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)": {
        "notice": "Remove liquidity from the pool, one token is ETH"
      },
      "swapETHForExactTokens(uint256,address[],address,uint256)": {
        "notice": "Swap token for exact ETH, output is fixed"
      },
      "swapExactETHForTokens(uint256,address[],address,uint256)": {
        "notice": "Swap exact ETH for another token, input is fixed"
      },
      "swapExactTokensForETH(uint256,uint256,address[],address,uint256)": {
        "notice": "Swap exact tokens for ETH, input is fixed"
      },
      "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
        "notice": "Swap exact tokens for another token, input is fixed"
      },
      "swapTokensForExactETH(uint256,uint256,address[],address,uint256)": {
        "notice": "Swap token for exact ETH, output is fixed"
      },
      "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)": {
        "notice": "Swap token for exact token, output is fixed"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
