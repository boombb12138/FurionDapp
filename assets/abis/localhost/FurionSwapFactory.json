{
  "address": "0xF886dDc935E8DA5Da26f58f5D266EFdfDA1AD260",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_incomeMaker",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldIncomeMaker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newIncomeMaker",
          "type": "address"
        }
      ],
      "name": "IncomeMakerAddressChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldProportion",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newProportion",
          "type": "uint256"
        }
      ],
      "name": "IncomeMakerProportionChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token0",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allPairsLength",
          "type": "uint256"
        }
      ],
      "name": "PairCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenB",
          "type": "address"
        }
      ],
      "name": "createPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "_pair",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incomeMaker",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "incomeMakerProportion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isFurionPairs",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_incomeMaker",
          "type": "address"
        }
      ],
      "name": "setIncomeMakerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proportion",
          "type": "uint256"
        }
      ],
      "name": "setIncomeMakerProportion",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4223cdcb72a5284eccb17d50a59518d05356cc1e4d14dbed4eeba4667a8491d7",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0xF886dDc935E8DA5Da26f58f5D266EFdfDA1AD260",
    "transactionIndex": 0,
    "gasUsed": "2423267",
    "logsBloom": "0x
    "blockHash": "0xd505f4761f73a189016faea2b6a3c0c3f91acc31f9a22618176c8d9aef1c8075",
    "transactionHash": "0x4223cdcb72a5284eccb17d50a59518d05356cc1e4d14dbed4eeba4667a8491d7",
    "logs": [],
    "blockNumber": 7,
    "cumulativeGasUsed": "2423267",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E"],
  "numDeployments": 1,
  "solcInputHash": "f71c7515d120a5406563342b21637eec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_incomeMaker\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldIncomeMaker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newIncomeMaker\",\"type\":\"address\"}],\"name\":\"IncomeMakerAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProportion\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProportion\",\"type\":\"uint256\"}],\"name\":\"IncomeMakerProportionChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allPairsLength\",\"type\":\"uint256\"}],\"name\":\"PairCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenB\",\"type\":\"address\"}],\"name\":\"createPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incomeMaker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"incomeMakerProportion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFurionPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_incomeMaker\",\"type\":\"address\"}],\"name\":\"setIncomeMakerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proportion\",\"type\":\"uint256\"}],\"name\":\"setIncomeMakerProportion\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"setIncomeMakerAddress(address)\":{\"details\":\"Only callable by the owner\",\"params\":{\"_incomeMaker\":\"New income maker address\"}},\"setIncomeMakerProportion(uint256)\":{\"details\":\"Only callable by the owner\",\"params\":{\"_proportion\":\"New proportion to income maker contract\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Returns the address of the current owner.\"},\"setIncomeMakerAddress(address)\":{\"notice\":\"Set income maker address\"},\"setIncomeMakerProportion(uint256)\":{\"notice\":\"Set income maker proportion\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/furion-swap/FurionSwapFactory.sol\":\"FurionSwapFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xe0c8b625a79bac0fe80f17cfb521e072805cc9cef1c96a5caf45b264e74812fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/furion-swap/FurionSwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"./interfaces/IFurionSwapFactory.sol\\\";\\nimport \\\"./FurionSwapPair.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n// import {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\n/*\\n//===================================//\\n ______ _   _______ _____ _____ _   _ \\n |  ___| | | | ___ \\\\_   _|  _  | \\\\ | |\\n | |_  | | | | |_/ / | | | | | |  \\\\| |\\n |  _| | | | |    /  | | | | | | . ` |\\n | |   | |_| | |\\\\ \\\\ _| |_\\\\ \\\\_/ / |\\\\  |\\n \\\\_|    \\\\___/\\\\_| \\\\_|\\\\___/ \\\\___/\\\\_| \\\\_/\\n//===================================//\\n* /\\n\\n/**\\n * @title Furion Swap Factory\\n * @dev Factory contract to deploy new trading pair\\n *      All token pairs are supported but with an indicator to show if one of them is Furion Tokens\\n *      Furion Tokens refer to F-* token, FFT, and FUR\\n */\\n\\n\\ncontract FurionSwapFactory is IFurionSwapFactory {\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    address private _owner;\\n\\n    // token0 Address => token1 Address => Pool Address\\n    mapping(address => mapping(address => address)) public override getPair;\\n    mapping(address => mapping(address => bool)) public override isFurionPairs;\\n\\n\\n    // Store all the pairs' addresses\\n    address[] public allPairs;\\n\\n    // Address of income maker, part of the transaction fee will be distributed to this address\\n    address public incomeMaker;\\n\\n    // Swap fee proportion to income maker\\n    uint256 public incomeMakerProportion;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n    event PairCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        address pair,\\n        uint allPairsLength\\n    );\\n    event IncomeMakerProportionChanged(\\n        uint256 oldProportion,\\n        uint256 newProportion\\n    );\\n    event IncomeMakerAddressChanged(\\n        address oldIncomeMaker,\\n        address newIncomeMaker\\n    );\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    constructor(address _incomeMaker) {\\n        _owner = msg.sender;\\n        incomeMaker = _incomeMaker;\\n        // 1% of swap fee is distributed to income maker contract\\n        // Can be set later\\n        incomeMakerProportion = 1;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************** Modifiers *************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    function allPairsLength() external view returns (uint) {\\n        return allPairs.length;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Set Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Set income maker proportion\\n     * @dev    Only callable by the owner\\n     * @param _proportion New proportion to income maker contract\\n     */\\n    function setIncomeMakerProportion(uint256 _proportion) external onlyOwner {\\n        emit IncomeMakerProportionChanged(incomeMakerProportion, _proportion);\\n        incomeMakerProportion = _proportion;\\n    }\\n\\n    /**\\n     * @notice Set income maker address\\n     * @dev Only callable by the owner\\n     * @param _incomeMaker New income maker address\\n     */\\n    function setIncomeMakerAddress(address _incomeMaker) external onlyOwner {\\n        emit IncomeMakerAddressChanged(incomeMaker, _incomeMaker);\\n        incomeMaker = _incomeMaker;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Main Functions *********************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function createPair(\\n        address _tokenA,\\n        address _tokenB\\n    ) external override returns (address _pair) {\\n\\n        require(_tokenA != _tokenB, \\\"FurionSwap: IDENTICAL_ADDRESSES\\\");\\n\\n        (address token0, address token1) = _tokenA < _tokenB ? (_tokenA, _tokenB) : (_tokenB, _tokenA);\\n\\n        require(token0 != address(0), \\\"FurionSwap: ZERO_ADDRESS\\\");\\n        require(getPair[token0][token1] == address(0), \\\"FurionSwap: PAIR_EXISTS\\\"); // single check is sufficient\\n\\n        bytes memory bytecode = type(FurionSwapPair).creationCode;\\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\\n        assembly {\\n            _pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\\n        }\\n        FurionSwapPair(_pair).initialize(token0, token1);\\n\\n        // populate mapping in the reverse direction\\n        getPair[token0][token1] = _pair;\\n        getPair[token1][token0] = _pair;\\n\\n        allPairs.push(_pair);\\n\\n        emit PairCreated(token0, token1, _pair, allPairs.length);\\n    }\\n}\\n\",\"keccak256\":\"0x69b3bd237c0eeb970bbbb6a7c27825f116d301f3d77e44a289f4e525cc1fd6db\",\"license\":\"MIT\"},\"contracts/furion-swap/FurionSwapPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {Math} from \\\"../libraries/Math.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ReentrancyGuard} from \\\"../utils/ReentrancyGuard.sol\\\";\\nimport {IFurionSwapFactory} from \\\"./interfaces/IFurionSwapFactory.sol\\\";\\n\\n/*\\n//===================================//\\n ______ _   _______ _____ _____ _   _ \\n |  ___| | | | ___ \\\\_   _|  _  | \\\\ | |\\n | |_  | | | | |_/ / | | | | | |  \\\\| |\\n |  _| | | | |    /  | | | | | | . ` |\\n | |   | |_| | |\\\\ \\\\ _| |_\\\\ \\\\_/ / |\\\\  |\\n \\\\_|    \\\\___/\\\\_| \\\\_|\\\\___/ \\\\___/\\\\_| \\\\_/\\n//===================================//\\n* /\\n\\n/**\\n * @title  FurionSwap Pair\\n * @notice This is the contract for the FurionSwap swapping pair.\\n *         Every time a new pair of tokens is available on FurionSwap\\n *         The contract will be initialized with two tokens and a deadline.\\n *         The swaps are only availale before the deadline.\\n */\\n\\ncontract FurionSwapPair is ERC20(\\\"Furion Swap Pool LP\\\", \\\"FSL\\\"), ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Variables **************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    // Minimum liquidity locked\\n    uint256 public constant MINIMUM_LIQUIDITY = 10 ** 3;\\n\\n    // FurionSwapFactory contract address\\n    address public factory;\\n\\n    // Token addresses in the pool, here token0 < token1\\n    address public token0;\\n    address public token1;\\n\\n    uint private reserve0;\\n    uint private reserve1;\\n\\n    // Fee Rate, given to LP holders (0 ~ 1000)\\n    uint256 public feeRate = 3;\\n\\n    // reserve0 * reserve1\\n    uint256 public kLast;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    event ReserveUpdated(uint256 reserve0, uint256 reserve1);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(\\n        address indexed sender,\\n        uint256 amount0,\\n        uint256 amount1,\\n        address indexed to\\n    );\\n\\n    constructor() {\\n        factory = msg.sender; // deployed by factory contract\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Init Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Initialize the contract status after the deployment by factory\\n     * @param _tokenA TokenA address\\n     * @param _tokenB TokenB address\\n     */\\n    function initialize(\\n        address _tokenA,\\n        address _tokenB\\n    ) external {\\n        require(\\n            msg.sender == factory,\\n            \\\"can only be initialized by the factory contract\\\"\\n        );\\n        (token0, token1) = _tokenA < _tokenB ? (_tokenA, _tokenB) : (_tokenB, _tokenA);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Get reserve0 and reserve1\\n     * @dev The result will depend on token orders\\n     * @return _reserve0 Reserve of token0\\n     * @return _reserve1 Reserve of token1\\n     */\\n    function getReserves()\\n        public\\n        view\\n        returns (uint _reserve0, uint _reserve1)\\n    {\\n        (_reserve0, _reserve1) = (reserve0, reserve1);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Mint LP Token to liquidity providers\\n     *         Called when adding liquidity.\\n     * @param _to The user address\\n     * @return liquidity The LP token amount\\n     */\\n    function mint(address _to)\\n        external\\n        nonReentrant\\n        returns (uint256 liquidity)\\n    {\\n        (uint _reserve0, uint _reserve1) = getReserves(); // gas savings\\n\\n        uint256 balance0 = IERC20(token0).balanceOf(address(this)); // token0 balance after deposit\\n        uint256 balance1 = IERC20(token1).balanceOf(address(this)); // token1 balance after deposit\\n\\n        uint256 amount0 = balance0 - _reserve0; // just deposit\\n        uint256 amount1 = balance1 - _reserve1;\\n\\n        // Distribute part of the fee to income maker\\n        bool feeOn = _mintFee(_reserve0, _reserve1);\\n\\n        uint256 _totalSupply = totalSupply(); // gas savings\\n\\n        if (_totalSupply == 0) {\\n            // No liquidity = First add liquidity\\n            liquidity = Math.sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY;\\n            // Keep minimum liquidity to this contract\\n            _mint(factory, MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\\n        } else {\\n            liquidity = min(\\n                (amount0 * _totalSupply) / _reserve0,\\n                (amount1 * _totalSupply) / _reserve1\\n            );\\n        }\\n\\n        require(liquidity > 0, \\\"insufficient liquidity minted\\\");\\n        _mint(_to, liquidity);\\n\\n        _update(balance0, balance1);\\n\\n        if (feeOn) kLast = reserve0 * reserve1;\\n\\n        emit Mint(msg.sender, amount0, amount1);\\n    }\\n\\n    /**\\n     * @notice Burn LP tokens give back the original tokens\\n     * @param _to User address\\n     * @return amount0 Amount of token0 to be sent back\\n     * @return amount1 Amount of token1 to be sent back\\n     */\\n    function burn(address _to)\\n        external\\n        nonReentrant\\n        returns (uint256 amount0, uint256 amount1)\\n    {\\n        address _token0 = token0;\\n        address _token1 = token1;\\n\\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        uint256 liquidity = balanceOf(address(this));\\n\\n        bool feeOn = _mintFee(reserve0, reserve1);\\n\\n        uint256 _totalSupply = totalSupply(); // gas savings\\n\\n        // How many tokens to be sent back\\n        amount0 = (liquidity * balance0) / _totalSupply;\\n        amount1 = (liquidity * balance1) / _totalSupply;\\n\\n        require(amount0 > 0 && amount1 > 0, \\\"Insufficient liquidity burned\\\");\\n\\n        // Currently all the liquidity in the pool was just sent by the user, so burn all\\n        _burn(address(this), liquidity);\\n\\n        // Transfer tokens out and update the balance\\n        IERC20(_token0).safeTransfer(_to, amount0);\\n        IERC20(_token1).safeTransfer(_to, amount1);\\n        balance0 = IERC20(_token0).balanceOf(address(this));\\n        balance1 = IERC20(_token1).balanceOf(address(this));\\n\\n        _update(balance0, balance1);\\n\\n        if (feeOn) kLast = reserve0 * reserve1;\\n\\n        emit Burn(msg.sender, amount0, amount1, _to);\\n    }\\n\\n    /**\\n     * @notice Finish the swap process\\n     * @param _amount0Out Amount of token0 to be given out (may be 0)\\n     * @param _amount1Out Amount of token1 to be given out (may be 0)\\n     * @param _to Address to receive the swap result\\n     */\\n    function swap(\\n        uint256 _amount0Out,\\n        uint256 _amount1Out,\\n        address _to\\n    ) external nonReentrant {\\n        require(\\n            _amount0Out > 0 || _amount1Out > 0,\\n            \\\"Output amount need to be positive\\\"\\n        );\\n\\n        (uint _reserve0, uint _reserve1) = getReserves(); // gas savings\\n        require(\\n            _amount0Out < _reserve0 && _amount1Out < _reserve1,\\n            \\\"Not enough liquidity\\\"\\n        );\\n\\n        uint256 balance0;\\n        uint256 balance1;\\n        {\\n            // scope for _token{0,1}, avoids stack too deep errors\\n            address _token0 = token0;\\n            address _token1 = token1;\\n            require(_to != _token0 && _to != _token1, \\\"INVALID_TO\\\");\\n\\n            if (_amount0Out > 0) IERC20(_token0).safeTransfer(_to, _amount0Out);\\n            if (_amount1Out > 0) IERC20(_token1).safeTransfer(_to, _amount1Out);\\n\\n            balance0 = IERC20(_token0).balanceOf(address(this));\\n            balance1 = IERC20(_token1).balanceOf(address(this));\\n        }\\n        uint256 amount0In = balance0 > _reserve0 - _amount0Out\\n            ? balance0 - (_reserve0 - _amount0Out)\\n            : 0;\\n        uint256 amount1In = balance1 > _reserve1 - _amount1Out\\n            ? balance1 - (_reserve1 - _amount1Out)\\n            : 0;\\n\\n        require(amount0In > 0 || amount1In > 0, \\\"INSUFFICIENT_INPUT_AMOUNT\\\");\\n\\n        {\\n            uint256 balance0Adjusted = balance0 * 1000 - amount0In * feeRate;\\n            uint256 balance1Adjusted = balance1 * 1000 - amount1In * feeRate;\\n\\n            require(\\n                balance0Adjusted * balance1Adjusted >=\\n                    _reserve0 * _reserve1 * (1000**2),\\n                \\\"The remaining x*y is less than K\\\"\\n            );\\n        }\\n\\n        _update(balance0, balance1);\\n\\n        emit Swap(\\n            msg.sender,\\n            amount0In,\\n            amount1In,\\n            _amount0Out,\\n            _amount1Out,\\n            _to\\n        );\\n    }\\n\\n    /**\\n     * @notice Syncrinize the status of this pool\\n     */\\n    function sync() external nonReentrant {\\n        _update(\\n            IERC20(token0).balanceOf(address(this)),\\n            IERC20(token1).balanceOf(address(this))\\n        );\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ********************************** Internal Functions ********************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Update the reserves of the pool\\n     * @param balance0 Balance of token0\\n     * @param balance1 Balance of token1\\n     */\\n    function _update(uint256 balance0, uint256 balance1) private {\\n        uint MAX_NUM = type(uint).max;\\n        require(balance0 <= MAX_NUM && balance1 <= MAX_NUM, \\\"uint OVERFLOW\\\");\\n\\n        reserve0 = uint(balance0);\\n        reserve1 = uint(balance1);\\n\\n        emit ReserveUpdated(reserve0, reserve1);\\n    }\\n\\n    /**\\n     * @notice Collect the income sharing from trading pair\\n     * @param _reserve0 Reserve of token0\\n     * @param _reserve1 Reserve of token1\\n     */\\n    function _mintFee(uint _reserve0, uint _reserve1)\\n        private\\n        returns (bool feeOn)\\n    {\\n        address incomeMaker = IFurionSwapFactory(factory).incomeMaker();\\n\\n        // If incomeMaker is not zero address, fee is on\\n        feeOn = incomeMaker != address(0);\\n\\n        uint256 _k = kLast;\\n\\n        if (feeOn) {\\n            if (_k != 0) {\\n                uint256 rootK = Math.sqrt(_reserve0 * _reserve1);\\n                uint256 rootKLast = Math.sqrt(_k);\\n\\n                if (rootK > rootKLast) {\\n                    uint256 numerator = totalSupply() *\\n                        (rootK - rootKLast) *\\n                        10;\\n\\n                    // (1 / \\u03c6) - 1\\n                    // Proportion got from factory is based on 100\\n                    // Use 1000/proportion to make it divided (donominator and numerator both * 10)\\n                    // p = 40 (2/5) => 1000/40 = 25\\n                    uint256 incomeMakerProportion = IFurionSwapFactory(factory)\\n                        .incomeMakerProportion();\\n                    uint256 denominator = rootK *\\n                        (1000 / incomeMakerProportion - 100) +\\n                        rootKLast *\\n                        100;\\n\\n                    uint256 liquidity = numerator / denominator;\\n\\n                    // Mint the liquidity to income maker contract\\n                    if (liquidity > 0) _mint(incomeMaker, liquidity);\\n                }\\n            }\\n        } else if (_k != 0) {\\n            kLast = 0;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the smaller one of two numbers\\n     * @param x The first number\\n     * @param y The second number\\n     * @return z The smaller one\\n     */\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n}\\n\",\"keccak256\":\"0x6dd16730f844ee1eb66727182845daff140db17ecde1a37ddc26d6aeafd60577\",\"license\":\"MIT\"},\"contracts/furion-swap/interfaces/IFurionSwapFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IFurionSwapFactory {\\n\\n    function getPair(address _token0, address _token1)\\n        external\\n        view\\n        returns (address);\\n\\n    function isFurionPairs(address _token0, address _token1)\\n        external\\n        view\\n        returns (bool);\\n\\n    function createPair(address _token0, address _token1) external returns (address _pair);\\n\\n    function allPairs(uint) external view returns (address _pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function incomeMaker() external view returns (address);\\n\\n    function incomeMakerProportion() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x71c8e3577a6600e499692276186e502ea9fcc979492b08354f3d9c33c0165adc\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nlibrary Math {\\n    uint256 internal constant WAD = 10**18;\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n}\\n\",\"keccak256\":\"0x1a26908dfc7945c33f9f5081da7c73e9ee0e2f3252f2635beb883eae9a6bb1ad\",\"license\":\"MIT\"},\"contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xe3e1341e6dd8a1be7688f24795f7b4faaf4e4a64bf1431b2ea4e3208ea7c67af\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051612a53380380612a5383398101604081905261002f91610067565b60008054336001600160a01b031991821617909155600480549091166001600160a01b03929092169190911790556001600555610097565b60006020828403121561007957600080fd5b81516001600160a01b038116811461009057600080fd5b9392505050565b6129ad806100a66000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c8063b30ebecd11610076578063c79c4c621161005b578063c79c4c6214610185578063c9c6539614610198578063e6a43905146101ab57600080fd5b8063b30ebecd1461015d578063be1bd3311461017257600080fd5b8063786df8ec116100a7578063786df8ec146101055780638da5cb5b1461010e578063a20142961461011f57600080fd5b80631e3dd18b146100c3578063574f2ba3146100f3575b600080fd5b6100d66100d13660046106b5565b6101df565b6040516001600160a01b0390911681526020015b60405180910390f35b6003545b6040519081526020016100ea565b6100f760055481565b6000546001600160a01b03166100d6565b61014d61012d3660046106ea565b600260209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016100ea565b61017061016b36600461071d565b610209565b005b6004546100d6906001600160a01b031681565b6101706101933660046106b5565b6102ed565b6100d66101a63660046106ea565b610397565b6100d66101b93660046106ea565b60016020908152600092835260408084209091529082529020546001600160a01b031681565b600381815481106101ef57600080fd5b6000918252602090912001546001600160a01b0316905081565b3361021c6000546001600160a01b031690565b6001600160a01b0316146102775760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600454604080516001600160a01b03928316815291831660208301527fbfabdf035dcaa5c8487ab344ae430927cd8bacc1ec3d6d600fb599344a276c07910160405180910390a16004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b336103006000546001600160a01b031690565b6001600160a01b0316146103565760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161026e565b60055460408051918252602082018390527f9bc521ec6408e4c9862a903b71cc867ff65b137b9ddec02734bd4a840817848f910160405180910390a1600555565b6000816001600160a01b0316836001600160a01b0316036103fa5760405162461bcd60e51b815260206004820152601f60248201527f467572696f6e537761703a204944454e544943414c5f41444452455353455300604482015260640161026e565b600080836001600160a01b0316856001600160a01b03161061041d578385610420565b84845b90925090506001600160a01b03821661047b5760405162461bcd60e51b815260206004820152601860248201527f467572696f6e537761703a205a45524f5f414444524553530000000000000000604482015260640161026e565b6001600160a01b038281166000908152600160209081526040808320858516845290915290205416156104f05760405162461bcd60e51b815260206004820152601760248201527f467572696f6e537761703a20504149525f455849535453000000000000000000604482015260640161026e565b600060405180602001610502906106a8565b601f1982820381018352601f9091011660408190526bffffffffffffffffffffffff19606086811b8216602084015285901b166034820152909150600090604801604051602081830303815290604052805190602001209050808251602084016000f560405163485cc95560e01b81526001600160a01b03868116600483015285811660248301529196509086169063485cc95590604401600060405180830381600087803b1580156105b457600080fd5b505af11580156105c8573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526001602081815260408084208987168086529083528185208054978d1673ffffffffffffffffffffffffffffffffffffffff19988916811790915584845282862087875284528286208054891682179055600380549586018155958690527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9094018054909716841790965592548351928352908201527f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a35050505092915050565b6122618061074083390190565b6000602082840312156106c757600080fd5b5035919050565b80356001600160a01b03811681146106e557600080fd5b919050565b600080604083850312156106fd57600080fd5b610706836106ce565b9150610714602084016106ce565b90509250929050565b60006020828403121561072f57600080fd5b610738826106ce565b939250505056fe60806040526003600b553480156200001657600080fd5b506040518060400160405280601381526020017f467572696f6e205377617020506f6f6c204c5000000000000000000000000000815250604051806040016040528060038152602001621194d360ea1b815250816003908051906020019062000081929190620000b7565b50805162000097906004906020840190620000b7565b5050600160055550600680546001600160a01b0319163317905562000199565b828054620000c5906200015d565b90600052602060002090601f016020900481019282620000e9576000855562000134565b82601f106200010457805160ff191683800117855562000134565b8280016001018555821562000134579182015b828111156200013457825182559160200191906001019062000117565b506200014292915062000146565b5090565b5b8082111562000142576000815560010162000147565b600181811c908216806200017257607f821691505b6020821081036200019357634e487b7160e01b600052602260045260246000fd5b50919050565b6120b880620001a96000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c806370a08231116100e3578063a9059cbb1161008c578063d21220a711610066578063d21220a714610334578063dd62ed3e14610347578063fff6cae91461038057600080fd5b8063a9059cbb14610305578063ba9a7a5614610318578063c45a01551461032157600080fd5b806395d89b41116100bd57806395d89b41146102e1578063978bbdb9146102e9578063a457c2d7146102f257600080fd5b806370a082311461029c5780637464fc3d146102c557806389afcb44146102ce57600080fd5b806323b872dd11610145578063485cc9551161011f578063485cc955146102615780636a627842146102765780636d9a640a1461028957600080fd5b806323b872dd1461022c578063313ce5671461023f578063395093511461024e57600080fd5b8063095ea7b311610176578063095ea7b3146101cc5780630dfe1681146101ef57806318160ddd1461021a57600080fd5b806306fdde03146101925780630902f1ac146101b0575b600080fd5b61019a610388565b6040516101a79190611e36565b60405180910390f35b600954600a545b604080519283526020830191909152016101a7565b6101df6101da366004611e81565b61041a565b60405190151581526020016101a7565b600754610202906001600160a01b031681565b6040516001600160a01b0390911681526020016101a7565b6002545b6040519081526020016101a7565b6101df61023a366004611ead565b610432565b604051601281526020016101a7565b6101df61025c366004611e81565b610458565b61027461026f366004611eee565b610497565b005b61021e610284366004611f27565b61058a565b610274610297366004611f44565b61085b565b61021e6102aa366004611f27565b6001600160a01b031660009081526020819052604090205490565b61021e600c5481565b6101b76102dc366004611f27565b610d04565b61019a611086565b61021e600b5481565b6101df610300366004611e81565b611095565b6101df610313366004611e81565b61114a565b61021e6103e881565b600654610202906001600160a01b031681565b600854610202906001600160a01b031681565b61021e610355366004611eee565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610274611158565b60606003805461039790611f7d565b80601f01602080910402602001604051908101604052809291908181526020018280546103c390611f7d565b80156104105780601f106103e557610100808354040283529160200191610410565b820191906000526020600020905b8154815290600101906020018083116103f357829003601f168201915b5050505050905090565b600033610428818585611295565b5060019392505050565b6000336104408582856113b9565b61044b85858561144b565b60019150505b9392505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091906104289082908690610492908790611fc7565b611295565b6006546001600160a01b0316331461051c5760405162461bcd60e51b815260206004820152602f60248201527f63616e206f6e6c7920626520696e697469616c697a656420627920746865206660448201527f6163746f727920636f6e7472616374000000000000000000000000000000000060648201526084015b60405180910390fd5b806001600160a01b0316826001600160a01b03161061053c57808261053f565b81815b600880546001600160a01b039283167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155600780549390921692169190911790555050565b60006002600554036105de5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610513565b60026005556000806105f3600954600a549091565b6007546040516370a0823160e01b81523060048201529294509092506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610644573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106689190611fdf565b6008546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156106b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106da9190611fdf565b905060006106e88584611ff8565b905060006106f68584611ff8565b905060006107048787611648565b9050600061071160025490565b90508060000361075a576103e861073061072b858761200f565b611823565b61073a9190611ff8565b600654909950610755906001600160a01b03166103e8611893565b61078f565b61078c88610768838761200f565b610772919061202e565b8861077d848761200f565b610787919061202e565b611972565b98505b600089116107df5760405162461bcd60e51b815260206004820152601d60248201527f696e73756666696369656e74206c6971756964697479206d696e7465640000006044820152606401610513565b6107e98a8a611893565b6107f38686611988565b811561080d57600a54600954610809919061200f565b600c555b604080518581526020810185905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a25050600160055550949695505050505050565b6002600554036108ad5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610513565b6002600555821515806108c05750600082115b6109165760405162461bcd60e51b815260206004820152602160248201527f4f757470757420616d6f756e74206e65656420746f20626520706f73697469766044820152606560f81b6064820152608401610513565b600080610926600954600a549091565b91509150818510801561093857508084105b6109845760405162461bcd60e51b815260206004820152601460248201527f4e6f7420656e6f756768206c69717569646974790000000000000000000000006044820152606401610513565b60075460085460009182916001600160a01b039182169190811690871682148015906109c25750806001600160a01b0316876001600160a01b031614155b610a0e5760405162461bcd60e51b815260206004820152600a60248201527f494e56414c49445f544f000000000000000000000000000000000000000000006044820152606401610513565b8815610a2857610a286001600160a01b038316888b6119d3565b8715610a4257610a426001600160a01b038216888a6119d3565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610a86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aaa9190611fdf565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa158015610af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b159190611fdf565b9250505060008785610b279190611ff8565b8311610b34576000610b48565b610b3e8886611ff8565b610b489084611ff8565b90506000610b568886611ff8565b8311610b63576000610b77565b610b6d8886611ff8565b610b779084611ff8565b90506000821180610b885750600081115b610bd45760405162461bcd60e51b815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e54000000000000006044820152606401610513565b6000600b5483610be4919061200f565b610bf0866103e861200f565b610bfa9190611ff8565b90506000600b5483610c0c919061200f565b610c18866103e861200f565b610c229190611ff8565b9050610c2e878961200f565b610c3b90620f424061200f565b610c45828461200f565b1015610c935760405162461bcd60e51b815260206004820181905260248201527f5468652072656d61696e696e6720782a79206973206c657373207468616e204b6044820152606401610513565b5050610c9f8484611988565b60408051838152602081018390529081018a9052606081018990526001600160a01b0388169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a35050600160055550505050505050565b600080600260055403610d595760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610513565b60026005556007546008546040516370a0823160e01b81523060048201526001600160a01b03928316929091169060009083906370a0823190602401602060405180830381865afa158015610db2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd69190611fdf565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610e20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e449190611fdf565b30600090815260208190526040812054919250506000610e68600954600a54611648565b90506000610e7560025490565b905080610e82868561200f565b610e8c919061202e565b985080610e99858561200f565b610ea3919061202e565b9750600089118015610eb55750600088115b610f015760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e74206c6971756964697479206275726e65640000006044820152606401610513565b610f0b3084611a3f565b610f1f6001600160a01b0388168b8b6119d3565b610f336001600160a01b0387168b8a6119d3565b6040516370a0823160e01b81523060048201526001600160a01b038816906370a0823190602401602060405180830381865afa158015610f77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9b9190611fdf565b6040516370a0823160e01b81523060048201529095506001600160a01b038716906370a0823190602401602060405180830381865afa158015610fe2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110069190611fdf565b93506110128585611988565b811561102c57600a54600954611028919061200f565b600c555b604080518a8152602081018a90526001600160a01b038c169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a3505050505050506001600581905550915091565b60606004805461039790611f7d565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156111325760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610513565b61113f8286868403611295565b506001949350505050565b60003361042881858561144b565b6002600554036111aa5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610513565b60026005556007546040516370a0823160e01b815230600482015261128e916001600160a01b0316906370a0823190602401602060405180830381865afa1580156111f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121d9190611fdf565b6008546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611265573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112899190611fdf565b611988565b6001600555565b6001600160a01b0383166112f75760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610513565b6001600160a01b0382166113585760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610513565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811461144557818110156114385760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610513565b6114458484848403611295565b50505050565b6001600160a01b0383166114c75760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610513565b6001600160a01b0382166115295760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610513565b6001600160a01b038316600090815260208190526040902054818110156115b85760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610513565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906115ef908490611fc7565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161163b91815260200190565b60405180910390a3611445565b600080600660009054906101000a90046001600160a01b03166001600160a01b031663be1bd3316040518163ffffffff1660e01b8152600401602060405180830381865afa15801561169e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c29190612050565b600c546001600160a01b03821615801594509192509061180f57801561180a5760006116f161072b868861200f565b905060006116fe83611823565b9050808211156118075760006117148284611ff8565b600254611721919061200f565b61172c90600a61200f565b90506000600660009054906101000a90046001600160a01b03166001600160a01b031663786df8ec6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611783573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a79190611fdf565b905060006117b684606461200f565b60646117c4846103e861202e565b6117ce9190611ff8565b6117d8908761200f565b6117e29190611fc7565b905060006117f0828561202e565b90508015611802576118028882611893565b505050505b50505b61181b565b801561181b576000600c555b505092915050565b60006003821115611884575080600061183d60028361202e565b611848906001611fc7565b90505b8181101561187e57905080600281611863818661202e565b61186d9190611fc7565b611877919061202e565b905061184b565b50919050565b811561188e575060015b919050565b6001600160a01b0382166118e95760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610513565b80600260008282546118fb9190611fc7565b90915550506001600160a01b03821660009081526020819052604081208054839290611928908490611fc7565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60008183106119815781610451565b5090919050565b6000196009839055600a82905560408051848152602081018490527f32dc813d3f262a05478ad1165d5701040e411d9a6e1684c8c2da1c8e6f3b8022910160405180910390a1505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b179052611a3a908490611b8d565b505050565b6001600160a01b038216611a9f5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610513565b6001600160a01b03821660009081526020819052604090205481811015611b135760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610513565b6001600160a01b0383166000908152602081905260408120838303905560028054849290611b42908490611ff8565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6000611be2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c729092919063ffffffff16565b805190915015611a3a5780806020019051810190611c00919061206d565b611a3a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610513565b6060611c818484600085611c89565b949350505050565b606082471015611d015760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610513565b6001600160a01b0385163b611d585760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610513565b600080866001600160a01b03168587604051611d74919061208f565b60006040518083038185875af1925050503d8060008114611db1576040519150601f19603f3d011682016040523d82523d6000602084013e611db6565b606091505b5091509150611dc6828286611dd1565b979650505050505050565b60608315611de0575081610451565b825115611df05782518084602001fd5b8160405162461bcd60e51b81526004016105139190611e36565b60005b83811015611e25578181015183820152602001611e0d565b838111156114455750506000910152565b6020815260008251806020840152611e55816040850160208701611e0a565b601f01601f19169190910160400192915050565b6001600160a01b0381168114611e7e57600080fd5b50565b60008060408385031215611e9457600080fd5b8235611e9f81611e69565b946020939093013593505050565b600080600060608486031215611ec257600080fd5b8335611ecd81611e69565b92506020840135611edd81611e69565b929592945050506040919091013590565b60008060408385031215611f0157600080fd5b8235611f0c81611e69565b91506020830135611f1c81611e69565b809150509250929050565b600060208284031215611f3957600080fd5b813561045181611e69565b600080600060608486031215611f5957600080fd5b83359250602084013591506040840135611f7281611e69565b809150509250925092565b600181811c90821680611f9157607f821691505b60208210810361187e57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115611fda57611fda611fb1565b500190565b600060208284031215611ff157600080fd5b5051919050565b60008282101561200a5761200a611fb1565b500390565b600081600019048311821515161561202957612029611fb1565b500290565b60008261204b57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561206257600080fd5b815161045181611e69565b60006020828403121561207f57600080fd5b8151801515811461045157600080fd5b600082516120a1818460208701611e0a565b919091019291505056fea164736f6c634300080d000aa164736f6c634300080d000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100be5760003560e01c8063b30ebecd11610076578063c79c4c621161005b578063c79c4c6214610185578063c9c6539614610198578063e6a43905146101ab57600080fd5b8063b30ebecd1461015d578063be1bd3311461017257600080fd5b8063786df8ec116100a7578063786df8ec146101055780638da5cb5b1461010e578063a20142961461011f57600080fd5b80631e3dd18b146100c3578063574f2ba3146100f3575b600080fd5b6100d66100d13660046106b5565b6101df565b6040516001600160a01b0390911681526020015b60405180910390f35b6003545b6040519081526020016100ea565b6100f760055481565b6000546001600160a01b03166100d6565b61014d61012d3660046106ea565b600260209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016100ea565b61017061016b36600461071d565b610209565b005b6004546100d6906001600160a01b031681565b6101706101933660046106b5565b6102ed565b6100d66101a63660046106ea565b610397565b6100d66101b93660046106ea565b60016020908152600092835260408084209091529082529020546001600160a01b031681565b600381815481106101ef57600080fd5b6000918252602090912001546001600160a01b0316905081565b3361021c6000546001600160a01b031690565b6001600160a01b0316146102775760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600454604080516001600160a01b03928316815291831660208301527fbfabdf035dcaa5c8487ab344ae430927cd8bacc1ec3d6d600fb599344a276c07910160405180910390a16004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b336103006000546001600160a01b031690565b6001600160a01b0316146103565760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161026e565b60055460408051918252602082018390527f9bc521ec6408e4c9862a903b71cc867ff65b137b9ddec02734bd4a840817848f910160405180910390a1600555565b6000816001600160a01b0316836001600160a01b0316036103fa5760405162461bcd60e51b815260206004820152601f60248201527f467572696f6e537761703a204944454e544943414c5f41444452455353455300604482015260640161026e565b600080836001600160a01b0316856001600160a01b03161061041d578385610420565b84845b90925090506001600160a01b03821661047b5760405162461bcd60e51b815260206004820152601860248201527f467572696f6e537761703a205a45524f5f414444524553530000000000000000604482015260640161026e565b6001600160a01b038281166000908152600160209081526040808320858516845290915290205416156104f05760405162461bcd60e51b815260206004820152601760248201527f467572696f6e537761703a20504149525f455849535453000000000000000000604482015260640161026e565b600060405180602001610502906106a8565b601f1982820381018352601f9091011660408190526bffffffffffffffffffffffff19606086811b8216602084015285901b166034820152909150600090604801604051602081830303815290604052805190602001209050808251602084016000f560405163485cc95560e01b81526001600160a01b03868116600483015285811660248301529196509086169063485cc95590604401600060405180830381600087803b1580156105b457600080fd5b505af11580156105c8573d6000803e3d6000fd5b505050506001600160a01b0384811660008181526001602081815260408084208987168086529083528185208054978d1673ffffffffffffffffffffffffffffffffffffffff19988916811790915584845282862087875284528286208054891682179055600380549586018155958690527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b9094018054909716841790965592548351928352908201527f0d3648bd0f6ba80134a33ba9275ac585d9d315f0ad8355cddefde31afa28d0e9910160405180910390a35050505092915050565b6122618061074083390190565b6000602082840312156106c757600080fd5b5035919050565b80356001600160a01b03811681146106e557600080fd5b919050565b600080604083850312156106fd57600080fd5b610706836106ce565b9150610714602084016106ce565b90509250929050565b60006020828403121561072f57600080fd5b610738826106ce565b939250505056fe60806040526003600b553480156200001657600080fd5b506040518060400160405280601381526020017f467572696f6e205377617020506f6f6c204c5000000000000000000000000000815250604051806040016040528060038152602001621194d360ea1b815250816003908051906020019062000081929190620000b7565b50805162000097906004906020840190620000b7565b5050600160055550600680546001600160a01b0319163317905562000199565b828054620000c5906200015d565b90600052602060002090601f016020900481019282620000e9576000855562000134565b82601f106200010457805160ff191683800117855562000134565b8280016001018555821562000134579182015b828111156200013457825182559160200191906001019062000117565b506200014292915062000146565b5090565b5b8082111562000142576000815560010162000147565b600181811c908216806200017257607f821691505b6020821081036200019357634e487b7160e01b600052602260045260246000fd5b50919050565b6120b880620001a96000396000f3fe608060405234801561001057600080fd5b506004361061018d5760003560e01c806370a08231116100e3578063a9059cbb1161008c578063d21220a711610066578063d21220a714610334578063dd62ed3e14610347578063fff6cae91461038057600080fd5b8063a9059cbb14610305578063ba9a7a5614610318578063c45a01551461032157600080fd5b806395d89b41116100bd57806395d89b41146102e1578063978bbdb9146102e9578063a457c2d7146102f257600080fd5b806370a082311461029c5780637464fc3d146102c557806389afcb44146102ce57600080fd5b806323b872dd11610145578063485cc9551161011f578063485cc955146102615780636a627842146102765780636d9a640a1461028957600080fd5b806323b872dd1461022c578063313ce5671461023f578063395093511461024e57600080fd5b8063095ea7b311610176578063095ea7b3146101cc5780630dfe1681146101ef57806318160ddd1461021a57600080fd5b806306fdde03146101925780630902f1ac146101b0575b600080fd5b61019a610388565b6040516101a79190611e36565b60405180910390f35b600954600a545b604080519283526020830191909152016101a7565b6101df6101da366004611e81565b61041a565b60405190151581526020016101a7565b600754610202906001600160a01b031681565b6040516001600160a01b0390911681526020016101a7565b6002545b6040519081526020016101a7565b6101df61023a366004611ead565b610432565b604051601281526020016101a7565b6101df61025c366004611e81565b610458565b61027461026f366004611eee565b610497565b005b61021e610284366004611f27565b61058a565b610274610297366004611f44565b61085b565b61021e6102aa366004611f27565b6001600160a01b031660009081526020819052604090205490565b61021e600c5481565b6101b76102dc366004611f27565b610d04565b61019a611086565b61021e600b5481565b6101df610300366004611e81565b611095565b6101df610313366004611e81565b61114a565b61021e6103e881565b600654610202906001600160a01b031681565b600854610202906001600160a01b031681565b61021e610355366004611eee565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610274611158565b60606003805461039790611f7d565b80601f01602080910402602001604051908101604052809291908181526020018280546103c390611f7d565b80156104105780601f106103e557610100808354040283529160200191610410565b820191906000526020600020905b8154815290600101906020018083116103f357829003601f168201915b5050505050905090565b600033610428818585611295565b5060019392505050565b6000336104408582856113b9565b61044b85858561144b565b60019150505b9392505050565b3360008181526001602090815260408083206001600160a01b03871684529091528120549091906104289082908690610492908790611fc7565b611295565b6006546001600160a01b0316331461051c5760405162461bcd60e51b815260206004820152602f60248201527f63616e206f6e6c7920626520696e697469616c697a656420627920746865206660448201527f6163746f727920636f6e7472616374000000000000000000000000000000000060648201526084015b60405180910390fd5b806001600160a01b0316826001600160a01b03161061053c57808261053f565b81815b600880546001600160a01b039283167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155600780549390921692169190911790555050565b60006002600554036105de5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610513565b60026005556000806105f3600954600a549091565b6007546040516370a0823160e01b81523060048201529294509092506000916001600160a01b03909116906370a0823190602401602060405180830381865afa158015610644573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106689190611fdf565b6008546040516370a0823160e01b81523060048201529192506000916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156106b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106da9190611fdf565b905060006106e88584611ff8565b905060006106f68584611ff8565b905060006107048787611648565b9050600061071160025490565b90508060000361075a576103e861073061072b858761200f565b611823565b61073a9190611ff8565b600654909950610755906001600160a01b03166103e8611893565b61078f565b61078c88610768838761200f565b610772919061202e565b8861077d848761200f565b610787919061202e565b611972565b98505b600089116107df5760405162461bcd60e51b815260206004820152601d60248201527f696e73756666696369656e74206c6971756964697479206d696e7465640000006044820152606401610513565b6107e98a8a611893565b6107f38686611988565b811561080d57600a54600954610809919061200f565b600c555b604080518581526020810185905233917f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f910160405180910390a25050600160055550949695505050505050565b6002600554036108ad5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610513565b6002600555821515806108c05750600082115b6109165760405162461bcd60e51b815260206004820152602160248201527f4f757470757420616d6f756e74206e65656420746f20626520706f73697469766044820152606560f81b6064820152608401610513565b600080610926600954600a549091565b91509150818510801561093857508084105b6109845760405162461bcd60e51b815260206004820152601460248201527f4e6f7420656e6f756768206c69717569646974790000000000000000000000006044820152606401610513565b60075460085460009182916001600160a01b039182169190811690871682148015906109c25750806001600160a01b0316876001600160a01b031614155b610a0e5760405162461bcd60e51b815260206004820152600a60248201527f494e56414c49445f544f000000000000000000000000000000000000000000006044820152606401610513565b8815610a2857610a286001600160a01b038316888b6119d3565b8715610a4257610a426001600160a01b038216888a6119d3565b6040516370a0823160e01b81523060048201526001600160a01b038316906370a0823190602401602060405180830381865afa158015610a86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aaa9190611fdf565b6040516370a0823160e01b81523060048201529094506001600160a01b038216906370a0823190602401602060405180830381865afa158015610af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b159190611fdf565b9250505060008785610b279190611ff8565b8311610b34576000610b48565b610b3e8886611ff8565b610b489084611ff8565b90506000610b568886611ff8565b8311610b63576000610b77565b610b6d8886611ff8565b610b779084611ff8565b90506000821180610b885750600081115b610bd45760405162461bcd60e51b815260206004820152601960248201527f494e53554646494349454e545f494e5055545f414d4f554e54000000000000006044820152606401610513565b6000600b5483610be4919061200f565b610bf0866103e861200f565b610bfa9190611ff8565b90506000600b5483610c0c919061200f565b610c18866103e861200f565b610c229190611ff8565b9050610c2e878961200f565b610c3b90620f424061200f565b610c45828461200f565b1015610c935760405162461bcd60e51b815260206004820181905260248201527f5468652072656d61696e696e6720782a79206973206c657373207468616e204b6044820152606401610513565b5050610c9f8484611988565b60408051838152602081018390529081018a9052606081018990526001600160a01b0388169033907fd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d8229060800160405180910390a35050600160055550505050505050565b600080600260055403610d595760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610513565b60026005556007546008546040516370a0823160e01b81523060048201526001600160a01b03928316929091169060009083906370a0823190602401602060405180830381865afa158015610db2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dd69190611fdf565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610e20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e449190611fdf565b30600090815260208190526040812054919250506000610e68600954600a54611648565b90506000610e7560025490565b905080610e82868561200f565b610e8c919061202e565b985080610e99858561200f565b610ea3919061202e565b9750600089118015610eb55750600088115b610f015760405162461bcd60e51b815260206004820152601d60248201527f496e73756666696369656e74206c6971756964697479206275726e65640000006044820152606401610513565b610f0b3084611a3f565b610f1f6001600160a01b0388168b8b6119d3565b610f336001600160a01b0387168b8a6119d3565b6040516370a0823160e01b81523060048201526001600160a01b038816906370a0823190602401602060405180830381865afa158015610f77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9b9190611fdf565b6040516370a0823160e01b81523060048201529095506001600160a01b038716906370a0823190602401602060405180830381865afa158015610fe2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110069190611fdf565b93506110128585611988565b811561102c57600a54600954611028919061200f565b600c555b604080518a8152602081018a90526001600160a01b038c169133917fdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496910160405180910390a3505050505050506001600581905550915091565b60606004805461039790611f7d565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156111325760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f0000000000000000000000000000000000000000000000000000006064820152608401610513565b61113f8286868403611295565b506001949350505050565b60003361042881858561144b565b6002600554036111aa5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610513565b60026005556007546040516370a0823160e01b815230600482015261128e916001600160a01b0316906370a0823190602401602060405180830381865afa1580156111f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121d9190611fdf565b6008546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015611265573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112899190611fdf565b611988565b6001600555565b6001600160a01b0383166112f75760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610513565b6001600160a01b0382166113585760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610513565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811461144557818110156114385760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610513565b6114458484848403611295565b50505050565b6001600160a01b0383166114c75760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610513565b6001600160a01b0382166115295760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610513565b6001600160a01b038316600090815260208190526040902054818110156115b85760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610513565b6001600160a01b038085166000908152602081905260408082208585039055918516815290812080548492906115ef908490611fc7565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161163b91815260200190565b60405180910390a3611445565b600080600660009054906101000a90046001600160a01b03166001600160a01b031663be1bd3316040518163ffffffff1660e01b8152600401602060405180830381865afa15801561169e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c29190612050565b600c546001600160a01b03821615801594509192509061180f57801561180a5760006116f161072b868861200f565b905060006116fe83611823565b9050808211156118075760006117148284611ff8565b600254611721919061200f565b61172c90600a61200f565b90506000600660009054906101000a90046001600160a01b03166001600160a01b031663786df8ec6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611783573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a79190611fdf565b905060006117b684606461200f565b60646117c4846103e861202e565b6117ce9190611ff8565b6117d8908761200f565b6117e29190611fc7565b905060006117f0828561202e565b90508015611802576118028882611893565b505050505b50505b61181b565b801561181b576000600c555b505092915050565b60006003821115611884575080600061183d60028361202e565b611848906001611fc7565b90505b8181101561187e57905080600281611863818661202e565b61186d9190611fc7565b611877919061202e565b905061184b565b50919050565b811561188e575060015b919050565b6001600160a01b0382166118e95760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610513565b80600260008282546118fb9190611fc7565b90915550506001600160a01b03821660009081526020819052604081208054839290611928908490611fc7565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60008183106119815781610451565b5090919050565b6000196009839055600a82905560408051848152602081018490527f32dc813d3f262a05478ad1165d5701040e411d9a6e1684c8c2da1c8e6f3b8022910160405180910390a1505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b179052611a3a908490611b8d565b505050565b6001600160a01b038216611a9f5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610513565b6001600160a01b03821660009081526020819052604090205481811015611b135760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610513565b6001600160a01b0383166000908152602081905260408120838303905560028054849290611b42908490611ff8565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6000611be2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611c729092919063ffffffff16565b805190915015611a3a5780806020019051810190611c00919061206d565b611a3a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610513565b6060611c818484600085611c89565b949350505050565b606082471015611d015760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610513565b6001600160a01b0385163b611d585760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610513565b600080866001600160a01b03168587604051611d74919061208f565b60006040518083038185875af1925050503d8060008114611db1576040519150601f19603f3d011682016040523d82523d6000602084013e611db6565b606091505b5091509150611dc6828286611dd1565b979650505050505050565b60608315611de0575081610451565b825115611df05782518084602001fd5b8160405162461bcd60e51b81526004016105139190611e36565b60005b83811015611e25578181015183820152602001611e0d565b838111156114455750506000910152565b6020815260008251806020840152611e55816040850160208701611e0a565b601f01601f19169190910160400192915050565b6001600160a01b0381168114611e7e57600080fd5b50565b60008060408385031215611e9457600080fd5b8235611e9f81611e69565b946020939093013593505050565b600080600060608486031215611ec257600080fd5b8335611ecd81611e69565b92506020840135611edd81611e69565b929592945050506040919091013590565b60008060408385031215611f0157600080fd5b8235611f0c81611e69565b91506020830135611f1c81611e69565b809150509250929050565b600060208284031215611f3957600080fd5b813561045181611e69565b600080600060608486031215611f5957600080fd5b83359250602084013591506040840135611f7281611e69565b809150509250925092565b600181811c90821680611f9157607f821691505b60208210810361187e57634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115611fda57611fda611fb1565b500190565b600060208284031215611ff157600080fd5b5051919050565b60008282101561200a5761200a611fb1565b500390565b600081600019048311821515161561202957612029611fb1565b500290565b60008261204b57634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561206257600080fd5b815161045181611e69565b60006020828403121561207f57600080fd5b8151801515811461045157600080fd5b600082516120a1818460208701611e0a565b919091019291505056fea164736f6c634300080d000aa164736f6c634300080d000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "setIncomeMakerAddress(address)": {
        "details": "Only callable by the owner",
        "params": {
          "_incomeMaker": "New income maker address"
        }
      },
      "setIncomeMakerProportion(uint256)": {
        "details": "Only callable by the owner",
        "params": {
          "_proportion": "New proportion to income maker contract"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "owner()": {
        "notice": "Returns the address of the current owner."
      },
      "setIncomeMakerAddress(address)": {
        "notice": "Set income maker address"
      },
      "setIncomeMakerProportion(uint256)": {
        "notice": "Set income maker proportion"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7545,
        "contract": "contracts/furion-swap/FurionSwapFactory.sol:FurionSwapFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7552,
        "contract": "contracts/furion-swap/FurionSwapFactory.sol:FurionSwapFactory",
        "label": "getPair",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 7559,
        "contract": "contracts/furion-swap/FurionSwapFactory.sol:FurionSwapFactory",
        "label": "isFurionPairs",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7562,
        "contract": "contracts/furion-swap/FurionSwapFactory.sol:FurionSwapFactory",
        "label": "allPairs",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 7564,
        "contract": "contracts/furion-swap/FurionSwapFactory.sol:FurionSwapFactory",
        "label": "incomeMaker",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 7566,
        "contract": "contracts/furion-swap/FurionSwapFactory.sol:FurionSwapFactory",
        "label": "incomeMakerProportion",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
