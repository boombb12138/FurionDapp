{
  "address": "0x8C0fE8A0B3d2D02f80C37ca253FcF8015C2C06B7",
  "abi": [
    {
      "inputs": [],
      "name": "VEF__NotEnoughBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VEF__NotWhiteListed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VEF__OverLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VEF__StillLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VEF__TimeNotPassed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VEF__ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VEF__ZeroAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Burn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BurnVeFUR",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockUntil",
          "type": "uint256"
        }
      ],
      "name": "DepositMaxTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRate",
          "type": "uint256"
        }
      ],
      "name": "GenerationRateChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LockVeFUR",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldMaxCapRatio",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxCapRatio",
          "type": "uint256"
        }
      ],
      "name": "MaxCapRatioChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UnlockVeFUR",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newWhiteList",
          "type": "address"
        }
      ],
      "name": "WhiteListAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldWhiteList",
          "type": "address"
        }
      ],
      "name": "WhiteListRemoVEF",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SCALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "addWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burnVeFUR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositMaxTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "furion",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "generationRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_furion",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "lockVeFUR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "locked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxCapRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "removeWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_generationRate",
          "type": "uint256"
        }
      ],
      "name": "setGenerationRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxCapRatio",
          "type": "uint256"
        }
      ],
      "name": "setMaxCapRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unlockVeFUR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRelease",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountLocked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockUntil",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawLocked",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xec28948ad910d300ad6643763333eb2e367a9417744e7cc0090e269556e837ea",
  "receipt": {
    "to": null,
    "from": "0x1Be1A151BA3D24F594ee971dc9B843F23b5bA80E",
    "contractAddress": "0x8C0fE8A0B3d2D02f80C37ca253FcF8015C2C06B7",
    "transactionIndex": 0,
    "gasUsed": "2152867",
    "logsBloom": "0x
    "blockHash": "0xe3ec64a4fee6c82563579da04373b7b9e25624fbd1dfededc73a108c387efd4a",
    "transactionHash": "0xec28948ad910d300ad6643763333eb2e367a9417744e7cc0090e269556e837ea",
    "logs": [],
    "blockNumber": 9,
    "cumulativeGasUsed": "2152867",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f71c7515d120a5406563342b21637eec",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"VEF__NotEnoughBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VEF__NotWhiteListed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VEF__OverLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VEF__StillLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VEF__TimeNotPassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VEF__ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VEF__ZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BurnVeFUR\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockUntil\",\"type\":\"uint256\"}],\"name\":\"DepositMaxTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"GenerationRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockVeFUR\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMaxCapRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxCapRatio\",\"type\":\"uint256\"}],\"name\":\"MaxCapRatioChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockVeFUR\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWhiteList\",\"type\":\"address\"}],\"name\":\"WhiteListAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldWhiteList\",\"type\":\"address\"}],\"name\":\"WhiteListRemoVEF\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"addWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burnVeFUR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositMaxTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"furion\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_furion\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lockVeFUR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"locked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCapRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"removeWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_generationRate\",\"type\":\"uint256\"}],\"name\":\"setGenerationRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxCapRatio\",\"type\":\"uint256\"}],\"name\":\"setMaxCapRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unlockVeFUR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRelease\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountLocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockUntil\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addWhitelist(address)\":{\"details\":\"Only callable by the owner\",\"params\":{\"_account\":\"Address to add\"}},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burnVeFUR(address,uint256)\":{\"details\":\"Only whitelisted contract      For future use, some contracts may need veFUR for entrance\",\"params\":{\"_amount\":\"Amount to burn\",\"_to\":\"Address to burn\"}},\"claimable(address)\":{\"params\":{\"_user\":\"User address\"},\"returns\":{\"_0\":\"claimableAmount Claimable amount of the user\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"deposit(uint256)\":{\"details\":\"Only EOA or whitelisted contract address\",\"params\":{\"_amount\":\"Amount to deposit\"}},\"depositMaxTime(uint256)\":{\"details\":\"Release the max amount one time\"},\"lockVeFUR(address,uint256)\":{\"details\":\"Only whitelisted contract      Income sharing contract will lock veFUR as entrance\",\"params\":{\"_amount\":\"Amount to lock\",\"_to\":\"User address\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"removeWhitelist(address)\":{\"details\":\"Only callable by the owner\",\"params\":{\"_account\":\"Address to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setGenerationRate(uint256)\":{\"params\":{\"_generationRate\":\"New generation rate\"}},\"setMaxCapRatio(uint256)\":{\"params\":{\"_maxCapRatio\":\"the new max ratio\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unlockVeFUR(address,uint256)\":{\"params\":{\"_amount\":\"Amount to unlock\",\"_to\":\"User address\"}},\"withdraw(uint256)\":{\"details\":\"User will lose all veFUR once he withdrawed\",\"params\":{\"_amount\":\"Amount to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addWhitelist(address)\":{\"notice\":\"Add a new whitelist address\"},\"burnVeFUR(address,uint256)\":{\"notice\":\"Burn veFUR\"},\"claim()\":{\"notice\":\"Claims accumulated veFUR for flex deposit\"},\"claimable(address)\":{\"notice\":\"Calculate the amount of veFUR that can be claimed by user\"},\"deposit(uint256)\":{\"notice\":\"Depisit Furion for veFUR\"},\"depositMaxTime(uint256)\":{\"notice\":\"Deposit for the max time\"},\"lockVeFUR(address,uint256)\":{\"notice\":\"Lock veFUR token\"},\"removeWhitelist(address)\":{\"notice\":\"Remove a new whitelist address\"},\"setGenerationRate(uint256)\":{\"notice\":\"Set generationRate\"},\"setMaxCapRatio(uint256)\":{\"notice\":\"Set maxCap ratio\"},\"unlockVeFUR(address,uint256)\":{\"notice\":\"Unlock veFUR token\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw Furion token\"},\"withdrawLocked()\":{\"notice\":\"Withdraw all the locked veFUR\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/furion-staking/VoteEscrowedFurion.sol\":\"VoteEscrowedFurion\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x652fee292f698d8dba81bf287cb71f1682f6483b67ebe601a5f7387dcfc30b34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x041af89e5e60b74e1203d5a34614c9de379726f52ecb8cf064cab78b9fdcdf9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x8cc03c5ac17e8a7396e487cda41fc1f1dfdb91db7d528e6da84bee3b6dd7e167\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/furion-farming/interfaces/IFarmingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IFarmingPool {\\n\\n    function pendingFurion(uint256 _poolId, address _user)\\n        external\\n        returns (uint256);\\n\\n    function setStartBlock(uint256 _startBlock) external;\\n\\n    function add(\\n        address _lpToken,\\n        uint256 _poolId,\\n        bool _withUpdate\\n    ) external;\\n\\n    function setFurionReward(\\n        uint256 _poolId,\\n        uint256 _basicFurionPerBlock,\\n        bool _withUpdate\\n    ) external;\\n\\n    function setFurionReward(\\n        uint256[] calldata _poolId,\\n        uint256[] calldata _basicFurionPerBlock,\\n        bool _withUpdate\\n    ) external;\\n\\n    function stake(uint256 _poolId, uint256 _amount) external;\\n\\n    function withdraw(uint256 _poolId, uint256 _amount) external;\\n\\n    function updatePool(uint256 _poolId) external;\\n\\n    function massUpdatePools() external;\\n\\n    function harvest(uint256 _poolId, address _to) external;\\n}\\n\",\"keccak256\":\"0xd62f3b08f2cf4dc297bcfb2515471754e1d77c6e220faebd7bd74bb18eac579f\",\"license\":\"MIT\"},\"contracts/furion-staking/VeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./interfaces/IVeERC20.sol\\\";\\n\\n/**\\n * @title  VeERC20Upgradeable\\n * @notice Modified version of ERC20Upgradeable where transfers and allowances are disabled\\n * @dev    only minting and burning are allowed. The hook _afterTokenOperation is called after Minting and Burning\\n *         This is one upgradeable version\\n */\\n\\ncontract VeERC20Upgradeable is Initializable, ContextUpgradeable, IVeERC20 {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Emitted when `value` tokens are burned and minted\\n     */\\n    event Burn(address indexed account, uint256 value);\\n    event Mint(address indexed beneficiary, uint256 value);\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_)\\n        internal\\n        onlyInitializing\\n    {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_)\\n        internal\\n        onlyInitializing\\n    {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Mint(account, amount);\\n\\n        _afterTokenOperation(account, _balances[account]);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Burn(account, amount);\\n\\n        _afterTokenOperation(account, _balances[account]);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any minting and burning.\\n     * @param account the account being affected\\n     * @param newBalance newBalance after operation\\n     */\\n    function _afterTokenOperation(address account, uint256 newBalance)\\n        internal\\n        virtual\\n    {}\\n\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0x914b968f0de53b506fd94742538db8604e221c00392b08c63ef07c97045e1660\",\"license\":\"MIT\"},\"contracts/furion-staking/VoteEscrowedFurion.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { VeERC20Upgradeable } from \\\"./VeERC20Upgradeable.sol\\\";\\nimport { Math } from \\\"../libraries/Math.sol\\\";\\n\\nimport { IFarmingPool } from \\\"../furion-farming/interfaces/IFarmingPool.sol\\\";\\n\\n/*\\n//===================================//\\n ______ _   _______ _____ _____ _   _ \\n |  ___| | | | ___ \\\\_   _|  _  | \\\\ | |\\n | |_  | | | | |_/ / | | | | | |  \\\\| |\\n |  _| | | | |    /  | | | | | | . ` |\\n | |   | |_| | |\\\\ \\\\ _| |_\\\\ \\\\_/ / |\\\\  |\\n \\\\_|    \\\\___/\\\\_| \\\\_|\\\\___/ \\\\___/\\\\_| \\\\_/\\n//===================================//\\n* /\\n\\n/**\\n * @title Vote Escrowed Furion\\n * @notice The staking contract for FUR -> veFUR\\n *         veFUR:\\n *            - Governance\\n *            - Income sharing\\n *            - etc.\\n *         If you stake Furion, you generate veFUR at the current `generationRate` until you reach `maxCap`\\n *         If you unstake any amount of Furion, you will lose all of your veFUR tokens\\n *\\n *         There is also an option that you lock your FUR for the max time\\n *         and get the maximum veFUR balance immediately.\\n *         !! Attention !!\\n *         If you stake FUR for the max time for more than once, the lockUntil timestamp will\\n *         be updated to the latest one.\\n */\\n\\ncontract VoteEscrowedFurion is\\n    Initializable,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    VeERC20Upgradeable \\n{\\n    using SafeERC20 for IERC20;\\n\\n    struct UserInfo {\\n        // Furion staked by user\\n        uint256 amount;\\n        // time of last veFUR claim or first deposit if user has not claimed yet\\n        uint256 lastRelease;\\n        // Amount locked for max time\\n        uint256 amountLocked;\\n        // Lock until timestamp\\n        uint256 lockUntil;\\n    }\\n\\n    // User info\\n    mapping(address => UserInfo) public users;\\n\\n    // Furion token\\n    IERC20 public furion;\\n\\n    // Max veFUR for one single staked FUR\\n    // Max veFUR amount = maxCap * FUR staked\\n    uint256 public maxCapRatio;\\n\\n    // Rate of veFUR generated per second, per Furion staked\\n    uint256 public generationRate;\\n\\n    // Calculation scale\\n    uint256 public constant SCALE = 1e18;\\n\\n    // contract address => whether able to receive staked veFUR\\n    // Contract addresses are by default unable to stake Furion, they must be whitelisted\\n    mapping(address => bool) public whitelist;\\n\\n    // account => lock amount, lock amount for specific account\\n    mapping(address => uint256) public locked;\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Events ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n    event GenerationRateChanged(uint256 oldRate, uint256 newRate);\\n    event MaxCapRatioChanged(uint256 oldMaxCapRatio, uint256 newMaxCapRatio);\\n    event WhiteListAdded(address newWhiteList);\\n    event WhiteListRemoVEF(address oldWhiteList);\\n\\n    event Deposit(address indexed user, uint256 amount);\\n    event DepositMaxTime(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 lockUntil\\n    );\\n    event Withdraw(address indexed user, uint256 amount);\\n\\n    event Claimed(address indexed user, uint256 amount);\\n\\n    event BurnVeFUR(\\n        address indexed caller,\\n        address indexed user,\\n        uint256 amount\\n    );\\n\\n    event LockVeFUR(\\n        address indexed caller,\\n        address indexed user,\\n        uint256 amount\\n    );\\n\\n    event UnlockVeFUR(\\n        address indexed caller,\\n        address indexed user,\\n        uint256 amount\\n    );\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *************************************** Errors ***************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    error VEF__NotWhiteListed();\\n    error VEF__StillLocked();\\n    error VEF__ZeroAddress();\\n    error VEF__ZeroAmount();\\n    error VEF__NotEnoughBalance();\\n\\n    error VEF__TimeNotPassed();\\n    error VEF__OverLocked();\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************* Constructor ************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function initialize(address _furion)\\n        public\\n        initializer\\n    {\\n        if (_furion == address(0)) revert VEF__ZeroAddress();\\n\\n        // Initialize veFUR\\n        __ERC20_init(\\\"Vote Escrowed Furion\\\", \\\"veFUR\\\");\\n        __Ownable_init();\\n        __ReentrancyGuard_init_unchained();\\n        __Pausable_init_unchained();\\n\\n        // Set generationRate (veFUR per sec per Furion staked)\\n        generationRate = 10**18;\\n\\n        // Set maxCap ratio\\n        maxCapRatio = 100;\\n\\n        // Set Furion token\\n        furion = IERC20(_furion);\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************** Modifiers *************************************** //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Not callable by smart contract\\n     * @dev Checked first by msg.sender == tx.origin\\n     *      Then if the contract is whitelisted, it will still pass the check\\n     */\\n    modifier notContract(address _addr) {\\n        if (_addr != tx.origin) {\\n            if (!whitelist[_addr]) revert VEF__NotWhiteListed();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @notice No locked veFUR\\n     * @dev Check the locked balance of a user\\n     */\\n    modifier noLocked(address _user) {\\n        if (locked[_user] > 0) revert VEF__StillLocked();\\n        _;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Main Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Depisit Furion for veFUR\\n     * @dev Only EOA or whitelisted contract address\\n     * @param _amount Amount to deposit\\n     */\\n    function deposit(uint256 _amount)\\n        external\\n        nonReentrant\\n        whenNotPaused\\n        notContract(msg.sender)\\n    {\\n        if (_amount == 0) revert VEF__ZeroAmount();\\n\\n        if (users[msg.sender].amount > 0) {\\n            // If the user has amount deposited, claim veFUR\\n            _claim(msg.sender);\\n\\n            // Update the amount\\n            users[msg.sender].amount += _amount;\\n        } else {\\n            // add new user to mapping\\n            users[msg.sender].lastRelease = block.timestamp;\\n            users[msg.sender].amount = _amount;\\n        }\\n\\n        // Request Furion from user\\n        furion.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        emit Deposit(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Deposit for the max time\\n     * @dev Release the max amount one time\\n     */\\n    function depositMaxTime(uint256 _amount)\\n        external\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        if (_amount == 0) revert VEF__ZeroAmount();\\n\\n        uint256 currentMaxTime = (maxCapRatio * SCALE) / generationRate;\\n        uint256 lockUntil = block.timestamp + currentMaxTime * 2;\\n\\n        users[msg.sender].amountLocked += _amount;\\n        users[msg.sender].lockUntil = lockUntil;\\n\\n        // Request Furion from user\\n        furion.safeTransferFrom(msg.sender, address(this), _amount);\\n\\n        uint256 realCapRatio = _getCapRatio(msg.sender);\\n\\n        _mint(msg.sender, realCapRatio * _amount);\\n\\n        emit DepositMaxTime(msg.sender, _amount, lockUntil);\\n    }\\n\\n    /**\\n     * @notice Claims accumulated veFUR for flex deposit\\n     */\\n    function claim() public nonReentrant whenNotPaused {\\n        if (users[msg.sender].amount == 0) revert VEF__ZeroAmount();\\n\\n        _claim(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Withdraw Furion token\\n     * @dev User will lose all veFUR once he withdrawed\\n     * @param _amount Amount to withdraw\\n     */\\n    function withdraw(uint256 _amount)\\n        external\\n        nonReentrant\\n        whenNotPaused\\n        noLocked(msg.sender)\\n    {\\n        if (_amount == 0) revert VEF__ZeroAmount();\\n\\n        UserInfo storage user = users[msg.sender];\\n        if (user.amount < _amount) revert VEF__NotEnoughBalance();\\n\\n        // reset last Release timestamp\\n        user.lastRelease = block.timestamp;\\n\\n        // update his balance before burning or sending back Furion\\n        user.amount -= _amount;\\n\\n        // get user veFUR balance that must be burned\\n        // those locked amount will not be calculated\\n\\n        uint256 realCapRatio = _getCapRatio(msg.sender);\\n\\n        uint256 userVeFURBalance = balanceOf(msg.sender) -\\n            user.amountLocked *\\n            realCapRatio;\\n\\n        _burn(msg.sender, userVeFURBalance);\\n\\n        // send back the staked Furion\\n        furion.safeTransfer(msg.sender, _amount);\\n\\n        emit Withdraw(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Withdraw all the locked veFUR\\n     */\\n    function withdrawLocked()\\n        external\\n        nonReentrant\\n        whenNotPaused\\n        noLocked(msg.sender)\\n    {\\n        UserInfo memory user = users[msg.sender];\\n\\n        if (user.amountLocked == 0) revert VEF__ZeroAmount();\\n        if (block.timestamp < user.lockUntil) revert VEF__TimeNotPassed();\\n\\n        uint256 realCapRatio = _getCapRatio(msg.sender);\\n\\n        _burn(msg.sender, user.amountLocked * realCapRatio);\\n\\n        // update his balance before burning or sending back Furion\\n        users[msg.sender].amountLocked = 0;\\n        users[msg.sender].lockUntil = 0;\\n\\n        // send back the staked Furion\\n        furion.safeTransfer(msg.sender, user.amountLocked);\\n    }\\n\\n    /**\\n     * @notice Lock veFUR token\\n     * @dev Only whitelisted contract\\n     *      Income sharing contract will lock veFUR as entrance\\n     * @param _to User address\\n     * @param _amount Amount to lock\\n     */\\n    function lockVeFUR(address _to, uint256 _amount) external {\\n        // Only whitelisted contract can lock veFUR\\n        if (!whitelist[msg.sender]) revert VEF__NotWhiteListed();\\n\\n        if (locked[_to] + _amount > balanceOf(_to)) revert VEF__OverLocked();\\n\\n        _lock(_to, _amount);\\n        emit LockVeFUR(msg.sender, _to, _amount);\\n    }\\n\\n    /**\\n     * @notice Unlock veFUR token\\n     * @param _to User address\\n     * @param _amount Amount to unlock\\n     */\\n    function unlockVeFUR(address _to, uint256 _amount) external {\\n        // Only whitelisted contract can unlock veFUR\\n        if (!whitelist[msg.sender]) revert VEF__NotWhiteListed();\\n\\n        if (locked[_to] < _amount) revert VEF__OverLocked();\\n\\n        _unlock(_to, _amount);\\n        emit UnlockVeFUR(msg.sender, _to, _amount);\\n    }\\n\\n    /**\\n     * @notice Burn veFUR\\n     * @dev Only whitelisted contract\\n     *      For future use, some contracts may need veFUR for entrance\\n     * @param _to Address to burn\\n     * @param _amount Amount to burn\\n     */\\n    function burnVeFUR(address _to, uint256 _amount) public {\\n        // Only whitelisted contract can burn veFUR\\n        if (!whitelist[msg.sender]) revert VEF__NotWhiteListed();\\n\\n        _burn(_to, _amount);\\n        emit BurnVeFUR(msg.sender, _to, _amount);\\n    }\\n\\n     // ---------------------------------------------------------------------------------------- //\\n    // ************************************ View Functions ************************************ //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Calculate the amount of veFUR that can be claimed by user\\n     * @param _user User address\\n     * @return claimableAmount Claimable amount of the user\\n     */\\n    function claimable(address _user) public view returns (uint256) {\\n        if (_user == address(0)) revert VEF__ZeroAddress();\\n\\n        UserInfo memory user = users[_user];\\n\\n        // Seconds passed since last claim\\n        uint256 timePassed = block.timestamp - user.lastRelease;\\n\\n        uint256 realCapRatio = _getCapRatio(_user);\\n\\n        uint256 pending;\\n\\n        pending = Math.wmul(user.amount, timePassed * generationRate);\\n\\n        // get user's veFUR balance\\n        uint256 userVeFURBalance = balanceOf(_user) -\\n            user.amountLocked * realCapRatio;\\n\\n        // user veFUR balance cannot go above user.amount * maxCap\\n        uint256 veFURCap = user.amount * realCapRatio;\\n\\n        // first, check that user hasn't reached the max limit yet\\n        if (userVeFURBalance < veFURCap) {\\n            // then, check if pending amount will make user balance overpass maximum amount\\n            if (userVeFURBalance + pending > veFURCap) {\\n                return veFURCap - userVeFURBalance;\\n            } else {\\n                return pending;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // ************************************ Set Functions ************************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Add a new whitelist address\\n     * @dev Only callable by the owner\\n     * @param _account Address to add\\n     */\\n    function addWhitelist(address _account) external onlyOwner {\\n        whitelist[_account] = true;\\n        emit WhiteListAdded(_account);\\n    }\\n\\n    /**\\n     * @notice Remove a new whitelist address\\n     * @dev Only callable by the owner\\n     * @param _account Address to remove\\n     */\\n    function removeWhitelist(address _account) external onlyOwner {\\n        whitelist[_account] = false;\\n        emit WhiteListRemoVEF(_account);\\n    }\\n\\n    /**\\n     * @notice Set maxCap ratio\\n     * @param _maxCapRatio the new max ratio\\n     */\\n    function setMaxCapRatio(uint256 _maxCapRatio) external onlyOwner {\\n        if (_maxCapRatio == 0) revert VEF__ZeroAmount();\\n        emit MaxCapRatioChanged(maxCapRatio, _maxCapRatio);\\n        maxCapRatio = _maxCapRatio;\\n    }\\n\\n    /**\\n     * @notice Set generationRate\\n     * @param _generationRate New generation rate\\n     */\\n    function setGenerationRate(uint256 _generationRate) external onlyOwner {\\n        if (_generationRate == 0) revert VEF__ZeroAmount();\\n        emit GenerationRateChanged(generationRate, _generationRate);\\n        generationRate = _generationRate;\\n    }\\n\\n    // ---------------------------------------------------------------------------------------- //\\n    // *********************************** Internal Functions ********************************* //\\n    // ---------------------------------------------------------------------------------------- //\\n\\n    /**\\n     * @notice Finish claiming veFUR\\n     * @param _user User address\\n     */\\n    function _claim(address _user) internal {\\n        uint256 amount = claimable(_user);\\n\\n        // update last release time\\n        users[_user].lastRelease = block.timestamp;\\n\\n        if (amount > 0) {\\n            emit Claimed(_user, amount);\\n            _mint(_user, amount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Lock veFUR token\\n     * @param _to User address\\n     * @param _amount Amount to lock\\n     */\\n    function _lock(address _to, uint256 _amount) internal {\\n        locked[_to] += _amount;\\n    }\\n\\n    /**\\n     * @notice Unlock veFUR token\\n     * @param _to User address\\n     * @param _amount Amount to unlock\\n     */\\n    function _unlock(address _to, uint256 _amount) internal {\\n        if (locked[_to] < _amount) revert VEF__NotEnoughBalance();\\n        locked[_to] -= _amount;\\n    }\\n\\n    /**\\n     * @notice Get real cap ratio for a user\\n     *         The ratio depends on the boost type\\n     *\\n     * @param _user User address\\n     *\\n     * @return realCapRatio Real cap ratio\\n     */\\n    function _getCapRatio(address _user)\\n        internal\\n        view\\n        returns (uint256 realCapRatio)\\n    {\\n        if(_user == address(0)) revert VEF__ZeroAddress();\\n        realCapRatio = maxCapRatio;\\n    }\\n}\\n\",\"keccak256\":\"0xf081477a43e44dc3f25fb9e072408b1886b9ec70224178541f4aeb90360fba37\",\"license\":\"MIT\"},\"contracts/furion-staking/interfaces/IVeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\ninterface IVeERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n}\",\"keccak256\":\"0x42c6c4d011eecec076de1128cd44c6ef4034c8a5a9636209c546b335be3451de\",\"license\":\"MIT\"},\"contracts/libraries/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nlibrary Math {\\n    uint256 internal constant WAD = 10**18;\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x < y ? x : y;\\n    }\\n\\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    //rounds to zero if x*y < WAD / 2\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return ((x * y) + (WAD / 2)) / WAD;\\n    }\\n}\\n\",\"keccak256\":\"0x1a26908dfc7945c33f9f5081da7c73e9ee0e2f3252f2635beb883eae9a6bb1ad\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612600806100206000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80637b1ba2501161010f578063b93dd6ad116100a2578063d135cc4b11610071578063d135cc4b14610453578063eced55261461045b578063f2fde38b1461046a578063f80f5dd51461047d57600080fd5b8063b93dd6ad146103f9578063c4d66de81461040c578063c95ad5471461041f578063cbf9fe5f1461043257600080fd5b806395d89b41116100de57806395d89b41146103655780639b19251a1461036d578063a87430ba14610391578063b6b55f25146103e657600080fd5b80637b1ba2501461031c5780638456cb59146103255780638da5cb5b1461032d578063909ff8281461035257600080fd5b80635c975abb1161018757806374819f4a1161015657806374819f4a146102da57806376da9bbb146102e357806378c8cda7146102f65780637b196fbc1461030957600080fd5b80635c975abb1461027f57806360fc8d431461029657806370a08231146102a9578063715018a6146102d257600080fd5b8063313ce567116101c3578063313ce5671461024d5780633f4ba83a1461025c578063402914f5146102645780634e71d92d1461027757600080fd5b806306fdde03146101f557806318160ddd14610213578063282a1129146102255780632e1a7d4d1461023a575b600080fd5b6101fd610490565b60405161020a919061244d565b60405180910390f35b60cb545b60405190815260200161020a565b610238610233366004612480565b610522565b005b610238610248366004612480565b6105e3565b6040516012815260200161020a565b6102386107be565b6102176102723660046124b0565b610822565b610238610960565b60975460ff165b604051901515815260200161020a565b6102386102a43660046124cb565b610a3c565b6102176102b73660046124b0565b6001600160a01b0316600090815260c9602052604090205490565b610238610abc565b61021760fd5481565b6102386102f13660046124cb565b610b20565b6102386103043660046124b0565b610be8565b610238610317366004612480565b610c9a565b61021760fe5481565b610238610e57565b6033546001600160a01b03165b6040516001600160a01b03909116815260200161020a565b60fc5461033a906001600160a01b031681565b6101fd610eb9565b61028661037b3660046124b0565b60ff602081905260009182526040909120541681565b6103c661039f3660046124b0565b60fb6020526000908152604090208054600182015460028301546003909301549192909184565b60408051948552602085019390935291830152606082015260800161020a565b6102386103f4366004612480565b610ec8565b610238610407366004612480565b61107f565b61023861041a3660046124b0565b61113b565b61023861042d3660046124cb565b611295565b6102176104403660046124b0565b6101006020526000908152604090205481565b610238611347565b610217670de0b6b3a764000081565b6102386104783660046124b0565b6114ff565b61023861048b3660046124b0565b6115e1565b606060cc805461049f906124f5565b80601f01602080910402602001604051908101604052809291908181526020018280546104cb906124f5565b80156105185780601f106104ed57610100808354040283529160200191610518565b820191906000526020600020905b8154815290600101906020018083116104fb57829003601f168201915b5050505050905090565b6033546001600160a01b031633146105815760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b806000036105a2576040516335b2083960e01b815260040160405180910390fd5b60fe5460408051918252602082018390527fe5f68083dea62da883cd798293e1c21d050b1fb0d77ef46e71ac77e5bab35334910160405180910390a160fe55565b6002606554036106355760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610578565b600260655560975460ff16156106805760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610578565b3360008181526101006020526040902054156106af5760405163291c4c3360e11b815260040160405180910390fd5b816000036106d0576040516335b2083960e01b815260040160405180910390fd5b33600090815260fb602052604090208054831115610701576040516315ff6d9960e01b815260040160405180910390fd5b42600182015580548390829060009061071b908490612545565b909155506000905061072c3361168f565b90506000818360020154610740919061255c565b33600090815260c9602052604090205461075a9190612545565b905061076633826116c0565b60fc5461077d906001600160a01b03163387611820565b60405185815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a250506001606555505050565b6033546001600160a01b031633146108185760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b6108206118b0565b565b60006001600160a01b03821661084b57604051632682895960e01b815260040160405180910390fd5b6001600160a01b038216600090815260fb602090815260408083208151608081018352815481526001820154938101849052600282015492810192909252600301546060820152919061089e9042612545565b905060006108ab8561168f565b905060006108ca846000015160fe54856108c5919061255c565b61194c565b905060008285604001516108de919061255c565b6001600160a01b038816600090815260c960205260409020546109019190612545565b90506000838660000151610915919061255c565b905080821015610952578061092a848461257b565b11156109465761093a8282612545565b98975050505050505050565b50909695505050505050565b506000979650505050505050565b6002606554036109b25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610578565b600260655560975460ff16156109fd5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610578565b33600090815260fb60205260408120549003610a2c576040516335b2083960e01b815260040160405180910390fd5b610a3533611987565b6001606555565b33600090815260ff602081905260409091205416610a6d57604051634c6369f560e11b815260040160405180910390fd5b610a7782826116c0565b6040518181526001600160a01b0383169033907f328d8154330bcd4dcd7155cf078d035b2cfe5583bc1ee6eaae7938545cf769e4906020015b60405180910390a35050565b6033546001600160a01b03163314610b165760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b6108206000611a06565b33600090815260ff602081905260409091205416610b5157604051634c6369f560e11b815260040160405180910390fd5b6001600160a01b038216600090815260c9602090815260408083205461010090925290912054610b8290839061257b565b1115610ba15760405163079ecc5560e51b815260040160405180910390fd5b610bab8282611a65565b6040518181526001600160a01b0383169033907fa5a2b488a483d1bbe535981f44e44fa199ef9b3e42197722dbe4661c0f83f08790602001610ab0565b6033546001600160a01b03163314610c425760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b6001600160a01b038116600081815260ff6020908152604091829020805460ff1916905590519182527f893420e140ed2c6edd05e5777bc12da0c95fae58afdc7489b371efc5f4b238cb91015b60405180910390a150565b600260655403610cec5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610578565b600260655560975460ff1615610d375760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610578565b80600003610d58576040516335b2083960e01b815260040160405180910390fd5b600060fe54670de0b6b3a764000060fd54610d73919061255c565b610d7d9190612593565b90506000610d8c82600261255c565b610d96904261257b565b33600090815260fb6020526040812060020180549293508592909190610dbd90849061257b565b909155505033600081815260fb6020526040902060030182905560fc54610df1916001600160a01b03909116903086611a97565b6000610dfc3361168f565b9050610e1133610e0c868461255c565b611ad5565b604080518581526020810184905233917f04f776f8541a42e1afd64d9da6f0d06963de15f3239e9fefc564deb64627b288910160405180910390a2505060016065555050565b6033546001600160a01b03163314610eb15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b610820611bcf565b606060cd805461049f906124f5565b600260655403610f1a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610578565b600260655560975460ff1615610f655760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610578565b33328114610fa7576001600160a01b038116600090815260ff602081905260409091205416610fa757604051634c6369f560e11b815260040160405180910390fd5b81600003610fc8576040516335b2083960e01b815260040160405180910390fd5b33600090815260fb60205260409020541561101057610fe633611987565b33600090815260fb60205260408120805484929061100590849061257b565b909155506110299050565b33600090815260fb602052604090204260018201558290555b60fc54611041906001600160a01b0316333085611a97565b60405182815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a250506001606555565b6033546001600160a01b031633146110d95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b806000036110fa576040516335b2083960e01b815260040160405180910390fd5b60fd5460408051918252602082018390527f62dddf41445412836e2d6efb42e6554a3ae782ae5d6400cc73dc641198da053a910160405180910390a160fd55565b60006111476001611c4a565b9050801561115f576000805461ff0019166101001790555b6001600160a01b03821661118657604051632682895960e01b815260040160405180910390fd5b6111fa6040518060400160405280601481526020017f566f746520457363726f77656420467572696f6e0000000000000000000000008152506040518060400160405280600581526020017f7665465552000000000000000000000000000000000000000000000000000000815250611d65565b611202611de2565b61120a611e55565b611212611ec0565b670de0b6b3a764000060fe55606460fd5560fc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384161790558015611291576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b33600090815260ff6020819052604090912054166112c657604051634c6369f560e11b815260040160405180910390fd5b6001600160a01b038216600090815261010060205260409020548111156113005760405163079ecc5560e51b815260040160405180910390fd5b61130a8282611f37565b6040518181526001600160a01b0383169033907faf2e5d21bad72ab8d489ee3ec366750020aa62e19326aa4376174ba508d01de690602001610ab0565b6002606554036113995760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610578565b600260655560975460ff16156113e45760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610578565b3360008181526101006020526040902054156114135760405163291c4c3360e11b815260040160405180910390fd5b33600090815260fb602090815260408083208151608081018352815481526001820154938101939093526002810154918301829052600301546060830152909103611471576040516335b2083960e01b815260040160405180910390fd5b8060600151421015611496576040516307be463f60e01b815260040160405180910390fd5b60006114a13361168f565b90506114bc338284604001516114b7919061255c565b6116c0565b33600081815260fb6020526040808220600281018390556003019190915583015160fc546114f5926001600160a01b0390911691611820565b5050600160655550565b6033546001600160a01b031633146115595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b6001600160a01b0381166115d55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610578565b6115de81611a06565b50565b6033546001600160a01b0316331461163b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b6001600160a01b038116600081815260ff6020908152604091829020805460ff1916600117905590519182527fbf309892cce19064e6d63ba3339f893b199c8cb5041fc6731702cb18e805d2919101610c8f565b60006001600160a01b0382166116b857604051632682895960e01b815260040160405180910390fd5b505060fd5490565b6001600160a01b0382166117205760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610578565b6001600160a01b038216600090815260c96020526040902054818110156117945760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610578565b6001600160a01b038316600090815260c960205260408120838303905560cb80548492906117c3908490612545565b90915550506040518281526001600160a01b038416907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59060200160405180910390a250506001600160a01b031660005260c9602052565b505050565b6040516001600160a01b03831660248201526044810182905261181b90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611f9a565b60975460ff166119025760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610578565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000670de0b6b3a7640000611962600282612593565b61196c848661255c565b611976919061257b565b6119809190612593565b9392505050565b600061199282610822565b6001600160a01b038316600090815260fb60205260409020426001909101559050801561129157816001600160a01b03167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a826040516119f491815260200190565b60405180910390a26112918282611ad5565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166000908152610100602052604081208054839290611a8e90849061257b565b90915550505050565b6040516001600160a01b0380851660248301528316604482015260648101829052611acf9085906323b872dd60e01b9060840161184c565b50505050565b6001600160a01b038216611b2b5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610578565b8060cb6000828254611b3d919061257b565b90915550506001600160a01b038216600090815260c9602052604081208054839290611b6a90849061257b565b90915550506040518181526001600160a01b038316907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859060200160405180910390a26001600160a01b038216600090815260c9602052604090205461129190839082565b60975460ff1615611c155760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610578565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861192f3390565b60008054610100900460ff1615611cd8578160ff166001148015611c6d5750303b155b611cd05760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610578565b506000919050565b60005460ff808416911610611d465760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610578565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16611dd05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610578565b611dd861207f565b61129182826120ea565b600054610100900460ff16611e4d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610578565b61082061217c565b600054610100900460ff16610a355760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610578565b600054610100900460ff16611f2b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610578565b6097805460ff19169055565b6001600160a01b03821660009081526101006020526040902054811115611f71576040516315ff6d9960e01b815260040160405180910390fd5b6001600160a01b0382166000908152610100602052604081208054839290611a8e908490612545565b6000611fef826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166121f09092919063ffffffff16565b80519091501561181b578080602001905181019061200d91906125b5565b61181b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610578565b600054610100900460ff166108205760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610578565b600054610100900460ff166121555760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610578565b81516121689060cc906020850190612388565b50805161181b9060cd906020840190612388565b600054610100900460ff166121e75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610578565b61082033611a06565b60606121ff8484600085612207565b949350505050565b60608247101561227f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610578565b6001600160a01b0385163b6122d65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610578565b600080866001600160a01b031685876040516122f291906125d7565b60006040518083038185875af1925050503d806000811461232f576040519150601f19603f3d011682016040523d82523d6000602084013e612334565b606091505b509150915061234482828661234f565b979650505050505050565b6060831561235e575081611980565b82511561236e5782518084602001fd5b8160405162461bcd60e51b8152600401610578919061244d565b828054612394906124f5565b90600052602060002090601f0160209004810192826123b657600085556123fc565b82601f106123cf57805160ff19168380011785556123fc565b828001600101855582156123fc579182015b828111156123fc5782518255916020019190600101906123e1565b5061240892915061240c565b5090565b5b80821115612408576000815560010161240d565b60005b8381101561243c578181015183820152602001612424565b83811115611acf5750506000910152565b602081526000825180602084015261246c816040850160208701612421565b601f01601f19169190910160400192915050565b60006020828403121561249257600080fd5b5035919050565b80356001600160a01b0381168114611d6057600080fd5b6000602082840312156124c257600080fd5b61198082612499565b600080604083850312156124de57600080fd5b6124e783612499565b946020939093013593505050565b600181811c9082168061250957607f821691505b60208210810361252957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156125575761255761252f565b500390565b60008160001904831182151516156125765761257661252f565b500290565b6000821982111561258e5761258e61252f565b500190565b6000826125b057634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156125c757600080fd5b8151801515811461198057600080fd5b600082516125e9818460208701612421565b919091019291505056fea164736f6c634300080d000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c80637b1ba2501161010f578063b93dd6ad116100a2578063d135cc4b11610071578063d135cc4b14610453578063eced55261461045b578063f2fde38b1461046a578063f80f5dd51461047d57600080fd5b8063b93dd6ad146103f9578063c4d66de81461040c578063c95ad5471461041f578063cbf9fe5f1461043257600080fd5b806395d89b41116100de57806395d89b41146103655780639b19251a1461036d578063a87430ba14610391578063b6b55f25146103e657600080fd5b80637b1ba2501461031c5780638456cb59146103255780638da5cb5b1461032d578063909ff8281461035257600080fd5b80635c975abb1161018757806374819f4a1161015657806374819f4a146102da57806376da9bbb146102e357806378c8cda7146102f65780637b196fbc1461030957600080fd5b80635c975abb1461027f57806360fc8d431461029657806370a08231146102a9578063715018a6146102d257600080fd5b8063313ce567116101c3578063313ce5671461024d5780633f4ba83a1461025c578063402914f5146102645780634e71d92d1461027757600080fd5b806306fdde03146101f557806318160ddd14610213578063282a1129146102255780632e1a7d4d1461023a575b600080fd5b6101fd610490565b60405161020a919061244d565b60405180910390f35b60cb545b60405190815260200161020a565b610238610233366004612480565b610522565b005b610238610248366004612480565b6105e3565b6040516012815260200161020a565b6102386107be565b6102176102723660046124b0565b610822565b610238610960565b60975460ff165b604051901515815260200161020a565b6102386102a43660046124cb565b610a3c565b6102176102b73660046124b0565b6001600160a01b0316600090815260c9602052604090205490565b610238610abc565b61021760fd5481565b6102386102f13660046124cb565b610b20565b6102386103043660046124b0565b610be8565b610238610317366004612480565b610c9a565b61021760fe5481565b610238610e57565b6033546001600160a01b03165b6040516001600160a01b03909116815260200161020a565b60fc5461033a906001600160a01b031681565b6101fd610eb9565b61028661037b3660046124b0565b60ff602081905260009182526040909120541681565b6103c661039f3660046124b0565b60fb6020526000908152604090208054600182015460028301546003909301549192909184565b60408051948552602085019390935291830152606082015260800161020a565b6102386103f4366004612480565b610ec8565b610238610407366004612480565b61107f565b61023861041a3660046124b0565b61113b565b61023861042d3660046124cb565b611295565b6102176104403660046124b0565b6101006020526000908152604090205481565b610238611347565b610217670de0b6b3a764000081565b6102386104783660046124b0565b6114ff565b61023861048b3660046124b0565b6115e1565b606060cc805461049f906124f5565b80601f01602080910402602001604051908101604052809291908181526020018280546104cb906124f5565b80156105185780601f106104ed57610100808354040283529160200191610518565b820191906000526020600020905b8154815290600101906020018083116104fb57829003601f168201915b5050505050905090565b6033546001600160a01b031633146105815760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b806000036105a2576040516335b2083960e01b815260040160405180910390fd5b60fe5460408051918252602082018390527fe5f68083dea62da883cd798293e1c21d050b1fb0d77ef46e71ac77e5bab35334910160405180910390a160fe55565b6002606554036106355760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610578565b600260655560975460ff16156106805760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610578565b3360008181526101006020526040902054156106af5760405163291c4c3360e11b815260040160405180910390fd5b816000036106d0576040516335b2083960e01b815260040160405180910390fd5b33600090815260fb602052604090208054831115610701576040516315ff6d9960e01b815260040160405180910390fd5b42600182015580548390829060009061071b908490612545565b909155506000905061072c3361168f565b90506000818360020154610740919061255c565b33600090815260c9602052604090205461075a9190612545565b905061076633826116c0565b60fc5461077d906001600160a01b03163387611820565b60405185815233907f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243649060200160405180910390a250506001606555505050565b6033546001600160a01b031633146108185760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b6108206118b0565b565b60006001600160a01b03821661084b57604051632682895960e01b815260040160405180910390fd5b6001600160a01b038216600090815260fb602090815260408083208151608081018352815481526001820154938101849052600282015492810192909252600301546060820152919061089e9042612545565b905060006108ab8561168f565b905060006108ca846000015160fe54856108c5919061255c565b61194c565b905060008285604001516108de919061255c565b6001600160a01b038816600090815260c960205260409020546109019190612545565b90506000838660000151610915919061255c565b905080821015610952578061092a848461257b565b11156109465761093a8282612545565b98975050505050505050565b50909695505050505050565b506000979650505050505050565b6002606554036109b25760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610578565b600260655560975460ff16156109fd5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610578565b33600090815260fb60205260408120549003610a2c576040516335b2083960e01b815260040160405180910390fd5b610a3533611987565b6001606555565b33600090815260ff602081905260409091205416610a6d57604051634c6369f560e11b815260040160405180910390fd5b610a7782826116c0565b6040518181526001600160a01b0383169033907f328d8154330bcd4dcd7155cf078d035b2cfe5583bc1ee6eaae7938545cf769e4906020015b60405180910390a35050565b6033546001600160a01b03163314610b165760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b6108206000611a06565b33600090815260ff602081905260409091205416610b5157604051634c6369f560e11b815260040160405180910390fd5b6001600160a01b038216600090815260c9602090815260408083205461010090925290912054610b8290839061257b565b1115610ba15760405163079ecc5560e51b815260040160405180910390fd5b610bab8282611a65565b6040518181526001600160a01b0383169033907fa5a2b488a483d1bbe535981f44e44fa199ef9b3e42197722dbe4661c0f83f08790602001610ab0565b6033546001600160a01b03163314610c425760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b6001600160a01b038116600081815260ff6020908152604091829020805460ff1916905590519182527f893420e140ed2c6edd05e5777bc12da0c95fae58afdc7489b371efc5f4b238cb91015b60405180910390a150565b600260655403610cec5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610578565b600260655560975460ff1615610d375760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610578565b80600003610d58576040516335b2083960e01b815260040160405180910390fd5b600060fe54670de0b6b3a764000060fd54610d73919061255c565b610d7d9190612593565b90506000610d8c82600261255c565b610d96904261257b565b33600090815260fb6020526040812060020180549293508592909190610dbd90849061257b565b909155505033600081815260fb6020526040902060030182905560fc54610df1916001600160a01b03909116903086611a97565b6000610dfc3361168f565b9050610e1133610e0c868461255c565b611ad5565b604080518581526020810184905233917f04f776f8541a42e1afd64d9da6f0d06963de15f3239e9fefc564deb64627b288910160405180910390a2505060016065555050565b6033546001600160a01b03163314610eb15760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b610820611bcf565b606060cd805461049f906124f5565b600260655403610f1a5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610578565b600260655560975460ff1615610f655760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610578565b33328114610fa7576001600160a01b038116600090815260ff602081905260409091205416610fa757604051634c6369f560e11b815260040160405180910390fd5b81600003610fc8576040516335b2083960e01b815260040160405180910390fd5b33600090815260fb60205260409020541561101057610fe633611987565b33600090815260fb60205260408120805484929061100590849061257b565b909155506110299050565b33600090815260fb602052604090204260018201558290555b60fc54611041906001600160a01b0316333085611a97565b60405182815233907fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c9060200160405180910390a250506001606555565b6033546001600160a01b031633146110d95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b806000036110fa576040516335b2083960e01b815260040160405180910390fd5b60fd5460408051918252602082018390527f62dddf41445412836e2d6efb42e6554a3ae782ae5d6400cc73dc641198da053a910160405180910390a160fd55565b60006111476001611c4a565b9050801561115f576000805461ff0019166101001790555b6001600160a01b03821661118657604051632682895960e01b815260040160405180910390fd5b6111fa6040518060400160405280601481526020017f566f746520457363726f77656420467572696f6e0000000000000000000000008152506040518060400160405280600581526020017f7665465552000000000000000000000000000000000000000000000000000000815250611d65565b611202611de2565b61120a611e55565b611212611ec0565b670de0b6b3a764000060fe55606460fd5560fc805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384161790558015611291576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b33600090815260ff6020819052604090912054166112c657604051634c6369f560e11b815260040160405180910390fd5b6001600160a01b038216600090815261010060205260409020548111156113005760405163079ecc5560e51b815260040160405180910390fd5b61130a8282611f37565b6040518181526001600160a01b0383169033907faf2e5d21bad72ab8d489ee3ec366750020aa62e19326aa4376174ba508d01de690602001610ab0565b6002606554036113995760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610578565b600260655560975460ff16156113e45760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610578565b3360008181526101006020526040902054156114135760405163291c4c3360e11b815260040160405180910390fd5b33600090815260fb602090815260408083208151608081018352815481526001820154938101939093526002810154918301829052600301546060830152909103611471576040516335b2083960e01b815260040160405180910390fd5b8060600151421015611496576040516307be463f60e01b815260040160405180910390fd5b60006114a13361168f565b90506114bc338284604001516114b7919061255c565b6116c0565b33600081815260fb6020526040808220600281018390556003019190915583015160fc546114f5926001600160a01b0390911691611820565b5050600160655550565b6033546001600160a01b031633146115595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b6001600160a01b0381166115d55760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610578565b6115de81611a06565b50565b6033546001600160a01b0316331461163b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610578565b6001600160a01b038116600081815260ff6020908152604091829020805460ff1916600117905590519182527fbf309892cce19064e6d63ba3339f893b199c8cb5041fc6731702cb18e805d2919101610c8f565b60006001600160a01b0382166116b857604051632682895960e01b815260040160405180910390fd5b505060fd5490565b6001600160a01b0382166117205760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b6064820152608401610578565b6001600160a01b038216600090815260c96020526040902054818110156117945760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b6064820152608401610578565b6001600160a01b038316600090815260c960205260408120838303905560cb80548492906117c3908490612545565b90915550506040518281526001600160a01b038416907fcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca59060200160405180910390a250506001600160a01b031660005260c9602052565b505050565b6040516001600160a01b03831660248201526044810182905261181b90849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611f9a565b60975460ff166119025760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610578565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6000670de0b6b3a7640000611962600282612593565b61196c848661255c565b611976919061257b565b6119809190612593565b9392505050565b600061199282610822565b6001600160a01b038316600090815260fb60205260409020426001909101559050801561129157816001600160a01b03167fd8138f8a3f377c5259ca548e70e4c2de94f129f5a11036a15b69513cba2b426a826040516119f491815260200190565b60405180910390a26112918282611ad5565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b0382166000908152610100602052604081208054839290611a8e90849061257b565b90915550505050565b6040516001600160a01b0380851660248301528316604482015260648101829052611acf9085906323b872dd60e01b9060840161184c565b50505050565b6001600160a01b038216611b2b5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610578565b8060cb6000828254611b3d919061257b565b90915550506001600160a01b038216600090815260c9602052604081208054839290611b6a90849061257b565b90915550506040518181526001600160a01b038316907f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d41213968859060200160405180910390a26001600160a01b038216600090815260c9602052604090205461129190839082565b60975460ff1615611c155760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610578565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861192f3390565b60008054610100900460ff1615611cd8578160ff166001148015611c6d5750303b155b611cd05760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610578565b506000919050565b60005460ff808416911610611d465760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610578565b506000805460ff191660ff92909216919091179055600190565b919050565b600054610100900460ff16611dd05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610578565b611dd861207f565b61129182826120ea565b600054610100900460ff16611e4d5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610578565b61082061217c565b600054610100900460ff16610a355760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610578565b600054610100900460ff16611f2b5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610578565b6097805460ff19169055565b6001600160a01b03821660009081526101006020526040902054811115611f71576040516315ff6d9960e01b815260040160405180910390fd5b6001600160a01b0382166000908152610100602052604081208054839290611a8e908490612545565b6000611fef826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166121f09092919063ffffffff16565b80519091501561181b578080602001905181019061200d91906125b5565b61181b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610578565b600054610100900460ff166108205760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610578565b600054610100900460ff166121555760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610578565b81516121689060cc906020850190612388565b50805161181b9060cd906020840190612388565b600054610100900460ff166121e75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610578565b61082033611a06565b60606121ff8484600085612207565b949350505050565b60608247101561227f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610578565b6001600160a01b0385163b6122d65760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610578565b600080866001600160a01b031685876040516122f291906125d7565b60006040518083038185875af1925050503d806000811461232f576040519150601f19603f3d011682016040523d82523d6000602084013e612334565b606091505b509150915061234482828661234f565b979650505050505050565b6060831561235e575081611980565b82511561236e5782518084602001fd5b8160405162461bcd60e51b8152600401610578919061244d565b828054612394906124f5565b90600052602060002090601f0160209004810192826123b657600085556123fc565b82601f106123cf57805160ff19168380011785556123fc565b828001600101855582156123fc579182015b828111156123fc5782518255916020019190600101906123e1565b5061240892915061240c565b5090565b5b80821115612408576000815560010161240d565b60005b8381101561243c578181015183820152602001612424565b83811115611acf5750506000910152565b602081526000825180602084015261246c816040850160208701612421565b601f01601f19169190910160400192915050565b60006020828403121561249257600080fd5b5035919050565b80356001600160a01b0381168114611d6057600080fd5b6000602082840312156124c257600080fd5b61198082612499565b600080604083850312156124de57600080fd5b6124e783612499565b946020939093013593505050565b600181811c9082168061250957607f821691505b60208210810361252957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000828210156125575761255761252f565b500390565b60008160001904831182151516156125765761257661252f565b500290565b6000821982111561258e5761258e61252f565b500190565b6000826125b057634e487b7160e01b600052601260045260246000fd5b500490565b6000602082840312156125c757600080fd5b8151801515811461198057600080fd5b600082516125e9818460208701612421565b919091019291505056fea164736f6c634300080d000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addWhitelist(address)": {
        "details": "Only callable by the owner",
        "params": {
          "_account": "Address to add"
        }
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burnVeFUR(address,uint256)": {
        "details": "Only whitelisted contract      For future use, some contracts may need veFUR for entrance",
        "params": {
          "_amount": "Amount to burn",
          "_to": "Address to burn"
        }
      },
      "claimable(address)": {
        "params": {
          "_user": "User address"
        },
        "returns": {
          "_0": "claimableAmount Claimable amount of the user"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "deposit(uint256)": {
        "details": "Only EOA or whitelisted contract address",
        "params": {
          "_amount": "Amount to deposit"
        }
      },
      "depositMaxTime(uint256)": {
        "details": "Release the max amount one time"
      },
      "lockVeFUR(address,uint256)": {
        "details": "Only whitelisted contract      Income sharing contract will lock veFUR as entrance",
        "params": {
          "_amount": "Amount to lock",
          "_to": "User address"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "removeWhitelist(address)": {
        "details": "Only callable by the owner",
        "params": {
          "_account": "Address to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setGenerationRate(uint256)": {
        "params": {
          "_generationRate": "New generation rate"
        }
      },
      "setMaxCapRatio(uint256)": {
        "params": {
          "_maxCapRatio": "the new max ratio"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unlockVeFUR(address,uint256)": {
        "params": {
          "_amount": "Amount to unlock",
          "_to": "User address"
        }
      },
      "withdraw(uint256)": {
        "details": "User will lose all veFUR once he withdrawed",
        "params": {
          "_amount": "Amount to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addWhitelist(address)": {
        "notice": "Add a new whitelist address"
      },
      "burnVeFUR(address,uint256)": {
        "notice": "Burn veFUR"
      },
      "claim()": {
        "notice": "Claims accumulated veFUR for flex deposit"
      },
      "claimable(address)": {
        "notice": "Calculate the amount of veFUR that can be claimed by user"
      },
      "deposit(uint256)": {
        "notice": "Depisit Furion for veFUR"
      },
      "depositMaxTime(uint256)": {
        "notice": "Deposit for the max time"
      },
      "lockVeFUR(address,uint256)": {
        "notice": "Lock veFUR token"
      },
      "removeWhitelist(address)": {
        "notice": "Remove a new whitelist address"
      },
      "setGenerationRate(uint256)": {
        "notice": "Set generationRate"
      },
      "setMaxCapRatio(uint256)": {
        "notice": "Set maxCap ratio"
      },
      "unlockVeFUR(address,uint256)": {
        "notice": "Unlock veFUR token"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw Furion token"
      },
      "withdrawLocked()": {
        "notice": "Withdraw all the locked veFUR"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/furion-staking/VoteEscrowedFurion.sol:VoteEscrowedFurion",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 133,
        "contract": "contracts/furion-staking/VoteEscrowedFurion.sol:VoteEscrowedFurion",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 719,
        "contract": "contracts/furion-staking/VoteEscrowedFurion.sol:VoteEscrowedFurion",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/furion-staking/VoteEscrowedFurion.sol:VoteEscrowedFurion",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/furion-staking/VoteEscrowedFurion.sol:VoteEscrowedFurion",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 390,
        "contract": "contracts/furion-staking/VoteEscrowedFurion.sol:VoteEscrowedFurion",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 434,
        "contract": "contracts/furion-staking/VoteEscrowedFurion.sol:VoteEscrowedFurion",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 286,
        "contract": "contracts/furion-staking/VoteEscrowedFurion.sol:VoteEscrowedFurion",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 375,
        "contract": "contracts/furion-staking/VoteEscrowedFurion.sol:VoteEscrowedFurion",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6212,
        "contract": "contracts/furion-staking/VoteEscrowedFurion.sol:VoteEscrowedFurion",
        "label": "_balances",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6218,
        "contract": "contracts/furion-staking/VoteEscrowedFurion.sol:VoteEscrowedFurion",
        "label": "_allowances",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6220,
        "contract": "contracts/furion-staking/VoteEscrowedFurion.sol:VoteEscrowedFurion",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 6222,
        "contract": "contracts/furion-staking/VoteEscrowedFurion.sol:VoteEscrowedFurion",
        "label": "_name",
        "offset": 0,
        "slot": "204",
        "type": "t_string_storage"
      },
      {
        "astId": 6224,
        "contract": "contracts/furion-staking/VoteEscrowedFurion.sol:VoteEscrowedFurion",
        "label": "_symbol",
        "offset": 0,
        "slot": "205",
        "type": "t_string_storage"
      },
      {
        "astId": 6463,
        "contract": "contracts/furion-staking/VoteEscrowedFurion.sol:VoteEscrowedFurion",
        "label": "__gap",
        "offset": 0,
        "slot": "206",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 6508,
        "contract": "contracts/furion-staking/VoteEscrowedFurion.sol:VoteEscrowedFurion",
        "label": "users",
        "offset": 0,
        "slot": "251",
        "type": "t_mapping(t_address,t_struct(UserInfo)6503_storage)"
      },
      {
        "astId": 6511,
        "contract": "contracts/furion-staking/VoteEscrowedFurion.sol:VoteEscrowedFurion",
        "label": "furion",
        "offset": 0,
        "slot": "252",
        "type": "t_contract(IERC20)1959"
      },
      {
        "astId": 6513,
        "contract": "contracts/furion-staking/VoteEscrowedFurion.sol:VoteEscrowedFurion",
        "label": "maxCapRatio",
        "offset": 0,
        "slot": "253",
        "type": "t_uint256"
      },
      {
        "astId": 6515,
        "contract": "contracts/furion-staking/VoteEscrowedFurion.sol:VoteEscrowedFurion",
        "label": "generationRate",
        "offset": 0,
        "slot": "254",
        "type": "t_uint256"
      },
      {
        "astId": 6522,
        "contract": "contracts/furion-staking/VoteEscrowedFurion.sol:VoteEscrowedFurion",
        "label": "whitelist",
        "offset": 0,
        "slot": "255",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6526,
        "contract": "contracts/furion-staking/VoteEscrowedFurion.sol:VoteEscrowedFurion",
        "label": "locked",
        "offset": 0,
        "slot": "256",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1959": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UserInfo)6503_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VoteEscrowedFurion.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)6503_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(UserInfo)6503_storage": {
        "encoding": "inplace",
        "label": "struct VoteEscrowedFurion.UserInfo",
        "members": [
          {
            "astId": 6496,
            "contract": "contracts/furion-staking/VoteEscrowedFurion.sol:VoteEscrowedFurion",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6498,
            "contract": "contracts/furion-staking/VoteEscrowedFurion.sol:VoteEscrowedFurion",
            "label": "lastRelease",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6500,
            "contract": "contracts/furion-staking/VoteEscrowedFurion.sol:VoteEscrowedFurion",
            "label": "amountLocked",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6502,
            "contract": "contracts/furion-staking/VoteEscrowedFurion.sol:VoteEscrowedFurion",
            "label": "lockUntil",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
