{
  "language": "Solidity",
  "sources": {
    "contracts/furion-farming/FarmingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {OwnableWithoutContext} from \"../utils/OwnableWithoutContext.sol\";\nimport {Pausable} from \"@openzeppelin/contracts/security/Pausable.sol\";\nimport {IFurionToken} from \"../tokens/interfaces/IFurionToken.sol\";\nimport {Math} from \"../libraries/Math.sol\";\n\n/*\n//===================================//\n ______ _   _______ _____ _____ _   _ \n |  ___| | | | ___ \\_   _|  _  | \\ | |\n | |_  | | | | |_/ / | | | | | |  \\| |\n |  _| | | | |    /  | | | | | | . ` |\n | |   | |_| | |\\ \\ _| |_\\ \\_/ / |\\  |\n \\_|    \\___/\\_| \\_|\\___/ \\___/\\_| \\_/\n//===================================//\n* /\n\n/**\n * @title  Farming Pool\n * @notice This contract is for Furion tokens and Furion LPTokens mining on Furion\n * @dev    The pool id starts from 1 rather than 0\n *         The FUR reward is calculated by timestamp rather than block number\n *         Farming rate will be reset daily according to their TVL in previous date\n *         Only top five pools + another random one will be rewarded\n */\n\ncontract FarmingPool is OwnableWithoutContext, ReentrancyGuard, Pausable {\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IFurionToken;\n    using Math for uint256;\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Variables **************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    string public constant name = \"Furion LP Farming Pool\";\n\n    // The reward token is Furion\n    IFurionToken public furion;\n\n    // SCALE/Precision used for calculating rewards\n    uint256 public constant SCALE = 1e12;\n\n    // PoolId starts from 1\n    uint256 public _nextPoolId;\n\n    // Farming starts from a certain block timestamp\n    uint256 public startTimestamp;\n\n    struct PoolInfo {\n        address lpToken; // LPToken address to farm FUR\n        uint256 basicFurionPerSecond; // Basic Reward speed\n        uint256 lastRewardTimestamp; // Last reward timestamp\n        uint256 accFurionPerShare; // Accumulated Furion per share\n    }\n\n    PoolInfo[] public poolList;\n\n    // lptoken address => poolId\n    mapping(address => uint256) public poolMapping;\n\n    // poolId => is farming or not\n    mapping(uint256 => bool) public isFarming;\n\n    struct UserInfo {\n        uint256 rewardDebt; // Furion reward debt\n        uint256 stakingBalance; // the amount of a user's staking in the pool\n    }\n\n    // poolId => userAddress => userInfo\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n\n    // ---------------------------------------------------------------------------------------- //\n    // *************************************** Events ***************************************** //\n    // ---------------------------------------------------------------------------------------- //\n    event StartTimestampChanged(uint256 startTimestamp);\n    event Stake(address staker, uint256 poolId, uint256 amount);\n    event Withdraw(address staker, uint256 poolId, uint256 amount);\n    event Harvest(\n        address staker,\n        address rewardReceiver,\n        uint256 poolId,\n        uint256 pendingReward\n    );\n\n\n    event NewPoolAdded(\n        address lpToken,\n        uint256 basicFurionPerSecond\n    );\n    event FarmingPoolStarted(uint256 poolId, uint256 timestamp);\n    event FarmingPoolStopped(uint256 poolId, uint256 timestamp);\n    event FurionRewardChanged(\n        uint256 poolId,\n        uint256 basicFurionPerSecond\n    );\n    event PoolUpdated(\n        uint256 poolId,\n        uint256 accFurionPerShare\n    );\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Constructor ************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    constructor(address _furion) OwnableWithoutContext(msg.sender) {\n        furion = IFurionToken(_furion);\n\n        // Start from 1\n        _nextPoolId = 1;\n\n        // add one empty pool to make array index align with poolId\n        poolList.push(\n            PoolInfo({\n                lpToken: address(0),\n                basicFurionPerSecond: 0,\n                lastRewardTimestamp: 0,\n                accFurionPerShare: 0\n            })\n        );\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************** Modifiers *************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice The address can not be zero\n     */\n    modifier notZeroAddress(address _address) {\n        require(_address != address(0), \"FARMING_POOL: ZERO_ADDRESS\");\n        _;\n    }\n\n    /**\n     * @notice The pool is still in farming\n     */\n    modifier stillFarming(uint256 _poolId) {\n        require(isFarming[_poolId], \"FARMING_POOL: POOL_NOT_FARMING\");\n        _;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // *********************************** Main Functions ************************************* //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Add a new lp into the pool\n     * @dev Can only be called by the owner\n     *      The reward speed can be 0 and set later by setFurionReward function\n     * @param _lpToken LP token address\n     * @param _basicFurionPerSecond Basic reward speed(per second) for this new pool\n     * @param _withUpdate Whether update all pools' status\n     */\n    function add(\n        address _lpToken,\n        uint256 _basicFurionPerSecond,\n        bool _withUpdate\n    ) public notZeroAddress(_lpToken) onlyOwner whenNotPaused {\n        // Check if already exists, if the poolId is 0, that means not in the pool\n        require(!_alreadyInPool(_lpToken), \"FARMING_POOL: ALREADY_IN_POOL\");\n\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n\n        uint256 lastRewardTimestamp = block.timestamp > startTimestamp\n            ? block.timestamp\n            : startTimestamp;\n\n        // Push this new pool into the list\n        poolList.push(\n            PoolInfo({\n                lpToken: _lpToken,\n                basicFurionPerSecond: _basicFurionPerSecond,\n                lastRewardTimestamp: lastRewardTimestamp,\n                accFurionPerShare: 0\n            })\n        );\n\n        // Store the poolId and set the farming status to true\n        if (_basicFurionPerSecond > 0) isFarming[_nextPoolId] = true;\n\n        poolMapping[_lpToken] = _nextPoolId++;\n\n        emit NewPoolAdded(_lpToken, _basicFurionPerSecond);\n    }\n\n    /**\n     * @notice Update the FurionPerSecond for a specific pool (set to 0 to stop farming)\n     * @param _poolId Id of the farming pool\n     * @param _basicFurionPerSecond New basic reward amount per second\n     * @param _withUpdate Whether update all pools\n     */\n    function setFurionReward(\n        uint256 _poolId,\n        uint256 _basicFurionPerSecond,\n        bool _withUpdate\n    ) public onlyOwner whenNotPaused {\n        // Ensure there already exists this pool\n        require(poolList[_poolId].lastRewardTimestamp != 0, \"FARMING_POOL: POOL_NOT_EXIST\");\n\n        if (_withUpdate) massUpdatePools();\n        else updatePool(_poolId);\n\n        // Not farming now + reward > 0 => Restart\n        if (isFarming[_poolId] == false && _basicFurionPerSecond > 0) {\n            isFarming[_poolId] = true;\n            emit FarmingPoolStarted(_poolId, block.timestamp);\n        }\n\n        if (_basicFurionPerSecond == 0) {\n            isFarming[_poolId] = false;\n            poolList[_poolId].basicFurionPerSecond = 0;\n            emit FarmingPoolStopped(_poolId, block.timestamp);\n        } else {\n            poolList[_poolId].basicFurionPerSecond = _basicFurionPerSecond;\n            emit FurionRewardChanged(\n                _poolId,\n                _basicFurionPerSecond\n            );\n        }\n    }\n\n    /**\n     * @notice Update the FurionPerSecond for a bundle of pools (used for daily updating farming rate)\n     * @param _poolId Id collection of the farming pool\n     * @param _basicFurionPerSecond New basic reward amount per second\n     */\n    function setFurionRewards(\n        uint256[] calldata _poolId,\n        uint256[] calldata _basicFurionPerSecond\n    ) public onlyOwner whenNotPaused{\n        uint256 length = _poolId.length;\n        require(length <= 9, \"FARMING_POOL: MORE_THAN_NINE\");\n\n        for (uint256 i = 0; i < length; ) {\n            setFurionReward(_poolId[i], _basicFurionPerSecond[i], false);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Stake LP token into the farming pool\n     * @dev Can only stake to the pools that are still farming\n     * @param _poolId Id of the farming pool\n     * @param _amount Staking amount\n     */\n    function stake(uint256 _poolId, uint256 _amount)\n        public\n        nonReentrant\n        whenNotPaused\n        stillFarming(_poolId)\n    {\n        require(_amount > 0, \"FARMING_POOL: STAKE_ZERO\");\n\n        PoolInfo storage pool = poolList[_poolId];\n        UserInfo storage user = userInfo[_poolId][msg.sender];\n\n        // Must update first\n        updatePool(_poolId);\n\n        // First distribute the reward if exists\n        if (user.stakingBalance > 0) {\n            uint256 pending = user.stakingBalance *\n                pool.accFurionPerShare /\n                SCALE -\n                user.rewardDebt;\n\n            // Real reward amount\n            uint256 reward = _safeFurionTransfer(msg.sender, pending);\n            emit Harvest(msg.sender, msg.sender, _poolId, reward);\n        }\n\n        // Actual deposit amount\n        uint256 actualAmount = _safeLPTransfer(\n            false,\n            pool.lpToken,\n            msg.sender,\n            _amount\n        );\n\n        user.stakingBalance += actualAmount;\n\n        user.rewardDebt =\n            user.stakingBalance * pool.accFurionPerShare / SCALE;\n\n        emit Stake(msg.sender, _poolId, actualAmount);\n    }\n\n    /**\n     * @notice Withdraw lptoken from the pool\n     * @param _poolId Id of the farming pool\n     * @param _amount Amount of lp tokens to withdraw\n     */\n    function withdraw(uint256 _poolId, uint256 _amount)\n        public\n        nonReentrant\n        whenNotPaused\n    {\n        require(_amount > 0, \"FARMING_POOL: WITHDRAW_ZERO\");\n\n        PoolInfo storage pool = poolList[_poolId];\n        UserInfo storage user = userInfo[_poolId][msg.sender];\n\n        require(user.stakingBalance >= _amount, \"FARMING_POOL: NO_ENOUGH_STAKING_BALANCE\");\n\n        // Update if the pool is still farming\n        // Users can withdraw even after the pool stopped\n        if (isFarming[_poolId]) updatePool(_poolId);\n\n        uint256 pending = user.stakingBalance * pool.accFurionPerShare  /\n            SCALE - user.rewardDebt;\n\n        uint256 reward = _safeFurionTransfer(msg.sender, pending);\n        emit Harvest(msg.sender, msg.sender, _poolId, reward);\n\n        uint256 actualAmount = _safeLPTransfer(\n            true,\n            pool.lpToken,\n            msg.sender,\n            _amount\n        );\n\n        user.stakingBalance -= actualAmount;\n\n        user.rewardDebt = user.stakingBalance * pool.accFurionPerShare / SCALE;\n\n        emit Withdraw(msg.sender, _poolId, actualAmount);\n    }\n\n    /**\n     * @notice Harvest the Furion reward and can be sent to another address\n     * @param _poolId Id of the farming pool\n     * @param _to Receiver of Furion rewards\n     */\n    function harvest(uint256 _poolId, address _to)\n        public\n        nonReentrant\n        whenNotPaused\n    {\n        // Only update the pool when it is still in farming\n        if (isFarming[_poolId]) updatePool(_poolId);\n\n        PoolInfo memory pool = poolList[_poolId];\n        UserInfo storage user = userInfo[_poolId][msg.sender];\n\n        uint256 pendingReward = user.stakingBalance * pool.accFurionPerShare / SCALE - user.rewardDebt;\n\n        require(pendingReward > 0, \"FARMING_POOL: NO_PENDING_REWARD\");\n\n        // Update the reward debt\n        user.rewardDebt = user.stakingBalance * pool.accFurionPerShare /\n            SCALE;\n\n        // Transfer the reward\n        uint256 reward = _safeFurionTransfer(_to, pendingReward);\n\n        emit Harvest(msg.sender, _to, _poolId, reward);\n    }\n\n    /**\n     * @notice Update the pool's reward status\n     * @param _poolId Id of the farming pool\n     */\n    function updatePool(uint256 _poolId) public {\n        PoolInfo storage pool = poolList[_poolId];\n        if (block.timestamp <= pool.lastRewardTimestamp) {\n            return;\n        }\n\n        uint256 lpSupply = IERC20(pool.lpToken).balanceOf(address(this));\n\n        // No LP deposited, then just update the lastRewardTimestamp\n        if (lpSupply == 0) {\n            pool.lastRewardTimestamp = block.timestamp;\n            return;\n        }\n\n        uint256 timePassed = block.timestamp - pool.lastRewardTimestamp;\n\n        uint256 basicReward = timePassed * pool.basicFurionPerSecond;\n\n        pool.accFurionPerShare += (basicReward * SCALE) / lpSupply;\n\n        // Don't forget to set the farming pool as minter\n        furion.mintFurion(address(this), basicReward);\n\n        pool.lastRewardTimestamp = block.timestamp;\n\n        emit PoolUpdated(\n            _poolId,\n            pool.accFurionPerShare\n        );\n    }\n\n    /**\n     * @notice Update all farming pools (except for those stopped ones)\n     * @dev Can be called by anyone\n     *      Only update those active pools\n     */\n    function massUpdatePools() public {\n        uint256 length = poolList.length;\n        for (uint256 poolId; poolId < length; poolId++) {\n            if (isFarming[poolId] == false) continue;\n            else updatePool(poolId);\n        }\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // *********************************** View Functions ************************************* //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Check the amount of pending Furion reward\n     * @param _poolId PoolId of this farming pool\n     * @param _user User address\n     * @return pendingFurionAmount Amount of pending Furion\n     */\n    function pendingFurion(uint256 _poolId, address _user)\n        external\n        view\n        returns (uint256)\n    {\n        PoolInfo memory poolInfo = poolList[_poolId];\n\n        if (\n            poolInfo.lastRewardTimestamp == 0 ||\n            block.timestamp < poolInfo.lastRewardTimestamp ||\n            block.timestamp < startTimestamp\n        ) return 0;\n\n        UserInfo memory user = userInfo[_poolId][_user];\n\n        // Total lp token balance\n        uint256 lpBalance = IERC20(poolInfo.lpToken).balanceOf(address(this));\n\n        // Accumulated shares to be calculated\n        uint256 accFurionPerShare = poolInfo.accFurionPerShare;\n\n        if (lpBalance == 0) return 0;\n        else {\n            // If the pool is still farming, update the info\n            if (isFarming[_poolId]) {\n                // Deigs amount given to this pool\n                uint256 timePassed = block.timestamp -\n                    poolInfo.lastRewardTimestamp;\n                uint256 basicReward = poolInfo.basicFurionPerSecond * timePassed;\n                // Update accFurionPerShare\n                // LPToken may have different decimals\n                accFurionPerShare += (basicReward * SCALE) / lpBalance;\n            }\n\n            // If the pool has stopped, not update the info\n            uint256 pending = user.stakingBalance *\n                accFurionPerShare /\n                SCALE -\n                user.rewardDebt;\n\n            return pending;\n        }\n    }\n\n    /**\n     * @notice Get the total pool list\n     * @return pooList Total pool list\n     */\n    function getPoolList() external view returns (PoolInfo[] memory) {\n        return poolList;\n    }\n\n    /**\n     * @notice Get a user's balance\n     * @param _poolId Id of the pool\n     * @param _user User address\n     * @return balance User's balance (lpToken)\n     */\n    function getUserBalance(uint256 _poolId, address _user)\n        external\n        view\n        returns (uint256)\n    {\n        return userInfo[_poolId][_user].stakingBalance;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Set Functions ************************************ //\n    // ---------------------------------------------------------------------------------------- //\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    /**\n     * @notice Set the start block timestamp\n     * @param _startTimestamp New start block timestamp\n     */\n    function setStartTimestamp(uint256 _startTimestamp)\n        external\n        onlyOwner\n        whenNotPaused\n    {\n        // Can only be set before any pool is added\n        require(\n            _nextPoolId == 1,\n            \"ALREADY_HAVING_POOLS\"\n        );\n\n        startTimestamp = _startTimestamp;\n        emit StartTimestampChanged(_startTimestamp);\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ********************************** Internal Functions ********************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Check if a lptoken has been added into the pool before\n     * @dev This can also be written as a modifier\n     * @param _lpToken LP token address\n     * @return _isInPool Wether this lp is already in pool\n     */\n    function _alreadyInPool(address _lpToken)\n        internal\n        view\n        returns (bool _isInPool)\n    {\n        uint256 poolId = poolMapping[_lpToken];\n\n        _isInPool = (poolId != 0) ? true : false;\n    }\n\n    /**\n     * @notice Safe Furion transfer (check if the pool has enough Furion token, if not, transfer balance)\n     * @param _to User's address\n     * @param _amount Amount to transfer\n     */\n    function _safeFurionTransfer(address _to, uint256 _amount)\n        internal\n        returns (uint256)\n    {\n        uint256 poolFurionBalance = furion.balanceOf(address(this));\n        require(poolFurionBalance > 0, \"FARMING_POOL: NO_FUR_IN_POOL\");\n\n        if (_amount > poolFurionBalance) {\n            furion.safeTransfer(_to, poolFurionBalance);\n            return (poolFurionBalance);\n        } else {\n            furion.safeTransfer(_to, _amount);\n            return _amount;\n        }\n    }\n\n    /**\n     * @notice Finish the transfer of LP Token\n     * @dev The lp token may have loss during transfer\n     * @param _out Whether the lp token is out\n     * @param _lpToken LP token address\n     * @param _user User address\n     * @param _amount Amount of lp tokens\n     */\n    function _safeLPTransfer(\n        bool _out,\n        address _lpToken,\n        address _user,\n        uint256 _amount\n    ) internal returns (uint256) {\n        uint256 poolBalanceBefore = IERC20(_lpToken).balanceOf(address(this));\n\n        if (_out) IERC20(_lpToken).safeTransfer(_user, _amount);\n        else IERC20(_lpToken).safeTransferFrom(_user, address(this), _amount);\n\n        uint256 poolBalanceAfter = IERC20(_lpToken).balanceOf(address(this));\n\n        return\n            _out\n                ? poolBalanceBefore - poolBalanceAfter\n                : poolBalanceAfter - poolBalanceBefore;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/utils/OwnableWithoutContext.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\n/**\n * @dev The owner can be set during deployment, not default to be msg.sender\n */\nabstract contract OwnableWithoutContext {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor(address _initialOwner) {\n        _transferOwnership(_initialOwner);\n    }\n\n    /**\n     * @notice Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @notice Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @notice Leaves the contract without owner. It will not be possible to call\n     *         `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * @dev    Renouncing ownership will leave the contract without an owner,\n     *         thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\n     * @dev    Can only be called by the current owner.\n     * @param  newOwner Address of the new owner\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\n     * @dev    Internal function without access restriction.\n     * @param  newOwner Address of the new owner\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/tokens/interfaces/IFurionToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n                                     \ninterface IFurionToken is IERC20, IERC20Permit {\n    // ---------------------------------------------------------------------------------------- //\n    // *************************************** Functions ************************************** //\n    // ---------------------------------------------------------------------------------------- //\n    function CAP() external view returns (uint256);\n\n    /**\n     * @notice Mint Furion native tokens\n     * @param  _account Receiver's address\n     * @param  _amount Amount to be minted\n     */\n    function mintFurion(address _account, uint256 _amount) external;\n\n    /**\n     * @notice Burn Furion native tokens\n     * @param  _account Receiver's address\n     * @param  _amount Amount to be burned\n     */\n    function burnFurion(address _account, uint256 _amount) external;\n}\n"
    },
    "contracts/libraries/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nlibrary Math {\n    uint256 internal constant WAD = 10**18;\n\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x < y ? x : y;\n    }\n\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\n        if (y > 3) {\n            z = y;\n            uint256 x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n\n    //rounds to zero if x*y < WAD / 2\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\n        return ((x * y) + (WAD / 2)) / WAD;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "contracts/furion-swap/FurionSwapPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport {Math} from \"../libraries/Math.sol\";\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {ReentrancyGuard} from \"../utils/ReentrancyGuard.sol\";\nimport {IFurionSwapFactory} from \"./interfaces/IFurionSwapFactory.sol\";\n\n/*\n//===================================//\n ______ _   _______ _____ _____ _   _ \n |  ___| | | | ___ \\_   _|  _  | \\ | |\n | |_  | | | | |_/ / | | | | | |  \\| |\n |  _| | | | |    /  | | | | | | . ` |\n | |   | |_| | |\\ \\ _| |_\\ \\_/ / |\\  |\n \\_|    \\___/\\_| \\_|\\___/ \\___/\\_| \\_/\n//===================================//\n* /\n\n/**\n * @title  FurionSwap Pair\n * @notice This is the contract for the FurionSwap swapping pair.\n *         Every time a new pair of tokens is available on FurionSwap\n *         The contract will be initialized with two tokens and a deadline.\n *         The swaps are only availale before the deadline.\n */\n\ncontract FurionSwapPair is ERC20(\"Furion Swap Pool LP\", \"FSL\"), ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Variables **************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    // Minimum liquidity locked\n    uint256 public constant MINIMUM_LIQUIDITY = 10 ** 3;\n\n    // FurionSwapFactory contract address\n    address public factory;\n\n    // Token addresses in the pool, here token0 < token1\n    address public token0;\n    address public token1;\n\n    uint private reserve0;\n    uint private reserve1;\n\n    // Fee Rate, given to LP holders (0 ~ 1000)\n    uint256 public feeRate = 3;\n\n    // reserve0 * reserve1\n    uint256 public kLast;\n\n    // ---------------------------------------------------------------------------------------- //\n    // *************************************** Events ***************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    event ReserveUpdated(uint256 reserve0, uint256 reserve1);\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n\n    constructor() {\n        factory = msg.sender; // deployed by factory contract\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************ Init Functions ************************************ //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Initialize the contract status after the deployment by factory\n     * @param _tokenA TokenA address\n     * @param _tokenB TokenB address\n     */\n    function initialize(\n        address _tokenA,\n        address _tokenB\n    ) external {\n        require(\n            msg.sender == factory,\n            \"can only be initialized by the factory contract\"\n        );\n        (token0, token1) = _tokenA < _tokenB ? (_tokenA, _tokenB) : (_tokenB, _tokenA);\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************ View Functions ************************************ //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Get reserve0 and reserve1\n     * @dev The result will depend on token orders\n     * @return _reserve0 Reserve of token0\n     * @return _reserve1 Reserve of token1\n     */\n    function getReserves()\n        public\n        view\n        returns (uint _reserve0, uint _reserve1)\n    {\n        (_reserve0, _reserve1) = (reserve0, reserve1);\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************ Main Functions ************************************ //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Mint LP Token to liquidity providers\n     *         Called when adding liquidity.\n     * @param _to The user address\n     * @return liquidity The LP token amount\n     */\n    function mint(address _to)\n        external\n        nonReentrant\n        returns (uint256 liquidity)\n    {\n        (uint _reserve0, uint _reserve1) = getReserves(); // gas savings\n\n        uint256 balance0 = IERC20(token0).balanceOf(address(this)); // token0 balance after deposit\n        uint256 balance1 = IERC20(token1).balanceOf(address(this)); // token1 balance after deposit\n\n        uint256 amount0 = balance0 - _reserve0; // just deposit\n        uint256 amount1 = balance1 - _reserve1;\n\n        // Distribute part of the fee to income maker\n        bool feeOn = _mintFee(_reserve0, _reserve1);\n\n        uint256 _totalSupply = totalSupply(); // gas savings\n\n        if (_totalSupply == 0) {\n            // No liquidity = First add liquidity\n            liquidity = Math.sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY;\n            // Keep minimum liquidity to this contract\n            _mint(factory, MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\n        } else {\n            liquidity = min(\n                (amount0 * _totalSupply) / _reserve0,\n                (amount1 * _totalSupply) / _reserve1\n            );\n        }\n\n        require(liquidity > 0, \"insufficient liquidity minted\");\n        _mint(_to, liquidity);\n\n        _update(balance0, balance1);\n\n        if (feeOn) kLast = reserve0 * reserve1;\n\n        emit Mint(msg.sender, amount0, amount1);\n    }\n\n    /**\n     * @notice Burn LP tokens give back the original tokens\n     * @param _to User address\n     * @return amount0 Amount of token0 to be sent back\n     * @return amount1 Amount of token1 to be sent back\n     */\n    function burn(address _to)\n        external\n        nonReentrant\n        returns (uint256 amount0, uint256 amount1)\n    {\n        address _token0 = token0;\n        address _token1 = token1;\n\n        uint256 balance0 = IERC20(_token0).balanceOf(address(this));\n        uint256 balance1 = IERC20(_token1).balanceOf(address(this));\n\n        uint256 liquidity = balanceOf(address(this));\n\n        bool feeOn = _mintFee(reserve0, reserve1);\n\n        uint256 _totalSupply = totalSupply(); // gas savings\n\n        // How many tokens to be sent back\n        amount0 = (liquidity * balance0) / _totalSupply;\n        amount1 = (liquidity * balance1) / _totalSupply;\n\n        require(amount0 > 0 && amount1 > 0, \"Insufficient liquidity burned\");\n\n        // Currently all the liquidity in the pool was just sent by the user, so burn all\n        _burn(address(this), liquidity);\n\n        // Transfer tokens out and update the balance\n        IERC20(_token0).safeTransfer(_to, amount0);\n        IERC20(_token1).safeTransfer(_to, amount1);\n        balance0 = IERC20(_token0).balanceOf(address(this));\n        balance1 = IERC20(_token1).balanceOf(address(this));\n\n        _update(balance0, balance1);\n\n        if (feeOn) kLast = reserve0 * reserve1;\n\n        emit Burn(msg.sender, amount0, amount1, _to);\n    }\n\n    /**\n     * @notice Finish the swap process\n     * @param _amount0Out Amount of token0 to be given out (may be 0)\n     * @param _amount1Out Amount of token1 to be given out (may be 0)\n     * @param _to Address to receive the swap result\n     */\n    function swap(\n        uint256 _amount0Out,\n        uint256 _amount1Out,\n        address _to\n    ) external nonReentrant {\n        require(\n            _amount0Out > 0 || _amount1Out > 0,\n            \"Output amount need to be positive\"\n        );\n\n        (uint _reserve0, uint _reserve1) = getReserves(); // gas savings\n        require(\n            _amount0Out < _reserve0 && _amount1Out < _reserve1,\n            \"Not enough liquidity\"\n        );\n\n        uint256 balance0;\n        uint256 balance1;\n        {\n            // scope for _token{0,1}, avoids stack too deep errors\n            address _token0 = token0;\n            address _token1 = token1;\n            require(_to != _token0 && _to != _token1, \"INVALID_TO\");\n\n            if (_amount0Out > 0) IERC20(_token0).safeTransfer(_to, _amount0Out);\n            if (_amount1Out > 0) IERC20(_token1).safeTransfer(_to, _amount1Out);\n\n            balance0 = IERC20(_token0).balanceOf(address(this));\n            balance1 = IERC20(_token1).balanceOf(address(this));\n        }\n        uint256 amount0In = balance0 > _reserve0 - _amount0Out\n            ? balance0 - (_reserve0 - _amount0Out)\n            : 0;\n        uint256 amount1In = balance1 > _reserve1 - _amount1Out\n            ? balance1 - (_reserve1 - _amount1Out)\n            : 0;\n\n        require(amount0In > 0 || amount1In > 0, \"INSUFFICIENT_INPUT_AMOUNT\");\n\n        {\n            uint256 balance0Adjusted = balance0 * 1000 - amount0In * feeRate;\n            uint256 balance1Adjusted = balance1 * 1000 - amount1In * feeRate;\n\n            require(\n                balance0Adjusted * balance1Adjusted >=\n                    _reserve0 * _reserve1 * (1000**2),\n                \"The remaining x*y is less than K\"\n            );\n        }\n\n        _update(balance0, balance1);\n\n        emit Swap(\n            msg.sender,\n            amount0In,\n            amount1In,\n            _amount0Out,\n            _amount1Out,\n            _to\n        );\n    }\n\n    /**\n     * @notice Syncrinize the status of this pool\n     */\n    function sync() external nonReentrant {\n        _update(\n            IERC20(token0).balanceOf(address(this)),\n            IERC20(token1).balanceOf(address(this))\n        );\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ********************************** Internal Functions ********************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Update the reserves of the pool\n     * @param balance0 Balance of token0\n     * @param balance1 Balance of token1\n     */\n    function _update(uint256 balance0, uint256 balance1) private {\n        uint MAX_NUM = type(uint).max;\n        require(balance0 <= MAX_NUM && balance1 <= MAX_NUM, \"uint OVERFLOW\");\n\n        reserve0 = uint(balance0);\n        reserve1 = uint(balance1);\n\n        emit ReserveUpdated(reserve0, reserve1);\n    }\n\n    /**\n     * @notice Collect the income sharing from trading pair\n     * @param _reserve0 Reserve of token0\n     * @param _reserve1 Reserve of token1\n     */\n    function _mintFee(uint _reserve0, uint _reserve1)\n        private\n        returns (bool feeOn)\n    {\n        address incomeMaker = IFurionSwapFactory(factory).incomeMaker();\n\n        // If incomeMaker is not zero address, fee is on\n        feeOn = incomeMaker != address(0);\n\n        uint256 _k = kLast;\n\n        if (feeOn) {\n            if (_k != 0) {\n                uint256 rootK = Math.sqrt(_reserve0 * _reserve1);\n                uint256 rootKLast = Math.sqrt(_k);\n\n                if (rootK > rootKLast) {\n                    uint256 numerator = totalSupply() *\n                        (rootK - rootKLast) *\n                        10;\n\n                    // (1 / φ) - 1\n                    // Proportion got from factory is based on 100\n                    // Use 1000/proportion to make it divided (donominator and numerator both * 10)\n                    // p = 40 (2/5) => 1000/40 = 25\n                    uint256 incomeMakerProportion = IFurionSwapFactory(factory)\n                        .incomeMakerProportion();\n                    uint256 denominator = rootK *\n                        (1000 / incomeMakerProportion - 100) +\n                        rootKLast *\n                        100;\n\n                    uint256 liquidity = numerator / denominator;\n\n                    // Mint the liquidity to income maker contract\n                    if (liquidity > 0) _mint(incomeMaker, liquidity);\n                }\n            }\n        } else if (_k != 0) {\n            kLast = 0;\n        }\n    }\n\n    /**\n     * @notice Get the smaller one of two numbers\n     * @param x The first number\n     * @param y The second number\n     * @return z The smaller one\n     */\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n        z = x < y ? x : y;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// OpenZeppelin Contracts v4.4.0 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.10;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/furion-swap/interfaces/IFurionSwapFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface IFurionSwapFactory {\n\n    function getPair(address _token0, address _token1)\n        external\n        view\n        returns (address);\n\n    function isFurionPairs(address _token0, address _token1)\n        external\n        view\n        returns (bool);\n\n    function createPair(address _token0, address _token1) external returns (address _pair);\n\n    function allPairs(uint) external view returns (address _pair);\n    function allPairsLength() external view returns (uint);\n\n    function incomeMaker() external view returns (address);\n\n    function incomeMakerProportion() external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/income-sharing/IncomeMaker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../furion-swap/interfaces/IFurionSwapFactory.sol\";\nimport \"../furion-swap/interfaces/IFurionSwapPair.sol\";\nimport \"../furion-swap/interfaces/IFurionSwapV2Router.sol\";\n\n/*\n//===================================//\n ______ _   _______ _____ _____ _   _ \n |  ___| | | | ___ \\_   _|  _  | \\ | |\n | |_  | | | | |_/ / | | | | | |  \\| |\n |  _| | | | |    /  | | | | | | . ` |\n | |   | |_| | |\\ \\ _| |_\\ \\_/ / |\\  |\n \\_|    \\___/\\_| \\_|\\___/ \\___/\\_| \\_/\n//===================================//\n* /\n\n/**\n * @title Furion Income Maker Contract\n * @dev This contract will receive the transaction fee from swap pool\n *      All tx fees will be converted into FUR firstly, then transfer to income maker vault\n */\ncontract IncomeMaker is OwnableUpgradeable {\n    using SafeERC20 for IERC20;\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Constants **************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    uint public constant uint_MAX = type(uint).max;\n    uint public constant PRICE_SCALE = 1e6;\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Variables **************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    IFurionSwapV2Router public router;\n\n    IFurionSwapFactory public factory;\n\n    address public incomeSharingVault;\n\n    // all income would be converted to one uniform token, default by FUR\n    address public incomeToken;\n\n    // proportion allocated to income sharing vault, 0-100, 80 by default\n    uint public incomeProportion;\n\n    // ---------------------------------------------------------------------------------------- //\n    // *************************************** Events ***************************************** //\n    // ---------------------------------------------------------------------------------------- //\n    event IncomeTokenChanged(\n        address oldToken,\n        address newToken\n    );\n    event IncomeProportionChanged(\n        uint oldProportion,\n        uint newProportion\n    );\n\n    event IncomeToToken(\n        address otherTokenAddress,\n        address incomeTokenAddress,\n        uint amountIn,\n        uint amountOut\n    );\n\n    event EmergencyWithdraw(address token, uint amount);\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Constructor ************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Initialize function\n     * @param _incomeToken Address of income token, default by FUR\n     * @param _router Address of the FurionSwap router\n     * @param _factory Address of the FurionSwap factory\n     * @param _vault Address of the income sharing vault\n     */\n    function initialize(\n        address _incomeToken,\n        address _router,\n        address _factory,\n        address _vault\n    ) public initializer {\n        __Ownable_init();\n\n        incomeToken = _incomeToken;\n        router = IFurionSwapV2Router(_router);\n        factory = IFurionSwapFactory(_factory);\n\n        incomeSharingVault = _vault;\n\n        incomeProportion = 80; // default by 80\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************ Main Functions ************************************ //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Collect income from furion swap, turn token into incomeToken, and transfer to the incomeSharingVault\n     * @param _tokenA Address of tokenA for trading pair\n     * @param _tokenB Address of tokenB for trading pair\n     * @return amountIncome Amount of income collected\n     */\n    function collectIncomeFromSwap(address _tokenA, address _tokenB)\n    external returns (uint amountIncome){\n        // Get the pair\n        IFurionSwapPair pair = IFurionSwapPair(\n            factory.getPair(_tokenA, _tokenB));\n        require(address(pair) != address(0), \"INCOME_MAKER: PAIR_NOT_EXIST\");\n\n        (address token0, address token1) = _tokenA < _tokenB\n            ? (_tokenA, _tokenB)\n            : (_tokenB, _tokenA);\n\n        // Transfer lp token to the pool and get two tokens\n        IERC20(address(pair)).safeTransfer(\n            address(pair),\n            pair.balanceOf(address(this))\n        );\n\n        // Directly call the pair to burn lp tokens\n        (uint amount0, uint amount1) = pair.burn(address(this));\n\n        uint amountIncome0 = _convertIncome(token0, amount0);\n        uint amountIncome1 = _convertIncome(token1, amount1);\n\n        amountIncome = amountIncome0 + amountIncome1;\n\n        // Transfer all incomeTokens to income sharing vault\n        IERC20(incomeToken).safeTransfer(\n            incomeSharingVault,\n            IERC20(incomeToken).balanceOf(address(this)) * incomeProportion / 100\n        );\n    }\n\n    /**\n     * @notice Emergency withdraw by the owner\n     * @param _token Address of the token\n     * @param _amount Amount of the token\n     */\n    function emergencyWithdraw(address _token, uint _amount)\n        external\n        onlyOwner\n    {\n        IERC20(_token).safeTransfer(msg.sender, _amount);\n        emit EmergencyWithdraw(_token, _amount);\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************ Set Functions ************************************* //\n    // ---------------------------------------------------------------------------------------- //\n\n    function setIncomeToken(address _newIncomeToken) external onlyOwner {\n        require(_newIncomeToken != address(0), \"INCOME_MAKER: ZERO_ADDRESS\");\n        emit IncomeTokenChanged(incomeToken, _newIncomeToken);\n\n        incomeToken = _newIncomeToken;\n    }\n\n    function setIncomeProportion(uint8 _newIncomeProportion) external onlyOwner {\n        require(_newIncomeProportion <= 100, \"INCOME_MAKER: EXCEED_PROPORTION_RANGE\");\n        emit IncomeProportionChanged(incomeProportion, _newIncomeProportion);\n\n        incomeProportion = _newIncomeProportion;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // *********************************** Internal Functions ********************************* //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Convert the income to incomeToken and transfer to the incomeSharingVault\n     * @param _otherToken Address of the other token\n     */\n    function _convertIncome(address _otherToken, uint _amountToken) internal returns (uint amountIncome){\n        if(_otherToken != incomeToken){\n            // Get the pair\n            IFurionSwapPair pair = IFurionSwapPair(factory.getPair(_otherToken, incomeToken));\n            require(address(pair) != address(0), \"INCOME_MAKER: PAIR_NOT_EXIST\");\n\n            amountIncome = _swap(\n                _otherToken,\n                _amountToken,\n                address(this)\n            );\n\n            emit IncomeToToken(_otherToken, incomeToken, _amountToken, amountIncome);\n        }\n    }\n\n    /**\n     * @notice Swap other tokens to incomeToken\n     * @param _otherToken Address of other token\n     * @param _amount Amount of other token\n     * @param _to Address of the receiver\n     */\n    function _swap(\n        address _otherToken,\n        uint _amount,\n        address _to\n    ) internal returns (uint amountOut) {\n        // Get the pair\n        IFurionSwapPair pair = IFurionSwapPair(\n            factory.getPair(_otherToken, incomeToken)\n        );\n        require(address(pair) != address(0), \"INCOME_MAKER: PAIR_NOT_EXIST\");\n\n        (uint reserve0, uint reserve1) = pair.getReserves();\n\n        (uint reserveIn, uint reserveOut) = _otherToken < incomeToken\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n\n        uint feeRate = pair.feeRate();\n\n        // Calculate amountIn - fee\n        uint amountInWithFee = _amount * (1000 - feeRate);\n\n        // Calculate amountOut\n        amountOut =\n            (amountInWithFee * reserveOut) /\n            (reserveIn * 1000 + amountInWithFee);\n\n        // Transfer other token and swap\n        IERC20(_otherToken).safeTransfer(address(pair), _amount);\n\n        (uint amount0Out, uint amount1Out) = _otherToken < incomeToken\n            ? (uint(0), amountOut)\n            : (amountOut, uint(0));\n        pair.swap(amount0Out, amount1Out, _to);\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/furion-swap/interfaces/IFurionSwapPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IFurionSwapPair is IERC20 {\n    \n    function initialize(\n        address _token0,\n        address _token1\n    ) external;\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function feeRate() external view returns (uint256);\n\n    function deadline() external view returns (uint256);\n\n    function getReserves()\n        external\n        view\n        returns (uint112 _reserve0, uint112 _reserve1);\n\n    function swap(\n        uint256,\n        uint256,\n        address\n    ) external;\n\n    function burn(address) external returns (uint256, uint256);\n\n    function mint(address) external returns (uint256);\n\n    function sync() external;\n}\n"
    },
    "contracts/furion-swap/interfaces/IFurionSwapV2Router.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface IFurionSwapV2Router {\n    function factory() external view returns (address);\n    function WETH() external view returns (address);\n\n    function addLiquidity(\n        address _tokenA,\n        address _tokenB,\n        uint _amountADesired,\n        uint _amountBDesired,\n        uint _amountAMin,\n        uint _amountBMin,\n        address _to,\n        uint _deadline\n    ) external returns (uint _amountA, uint _amountB, uint _liquidity);\n\n    function addLiquidityETH(\n        address _token,\n        uint _amountTokenDesired,\n        uint _amountTokenMin,\n        uint _amountETHMin,\n        address _to,\n        uint _deadline\n    ) external payable returns (uint _amountToken, uint _amountETH, uint _liquidity);\n\n    function removeLiquidity(\n        address _tokenA,\n        address _tokenB,\n        uint _liquidity,\n        uint _amountAMin,\n        uint _amountBMin,\n        address _to,\n        uint _deadline\n    ) external returns (uint _amountA, uint _amountB);\n\n    function removeLiquidityETH(\n        address _token,\n        uint _liquidity,\n        uint _amountTokenMin,\n        uint _amountETHMin,\n        address _to,\n        uint _deadline\n    ) external returns (uint _amountToken, uint _amountETH);\n\n    function swapExactTokensForTokens(\n        uint _amountIn,\n        uint _amountOutMin,\n        address[] calldata _path,\n        address _to,\n        uint _deadline\n    ) external returns (uint[] memory _amounts);\n\n    function swapTokensForExactTokens(\n        uint _amountOut,\n        uint _amountInMax,\n        address[] calldata _path,\n        address _to,\n        uint _deadline\n    ) external returns (uint[] memory _amounts);\n\n    function swapExactETHForTokens(\n        uint _amountOutMin,\n        address[] calldata _path,\n        address _to,\n        uint _deadline\n    ) external payable returns (uint[] memory _amounts);\n\n    function swapTokensForExactETH(\n        uint _amountOut,\n        uint _amountInMax,\n        address[] calldata _path,\n        address _to,\n        uint _deadline\n    ) external returns (uint[] memory _amounts);\n\n    function swapExactTokensForETH(\n        uint _amountIn,\n        uint _amountOutMin,\n        address[] calldata _path,\n        address _to,\n        uint _deadline\n    ) external returns (uint[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint _amountOut,\n        address[] calldata _path,\n        address _to,\n        uint _deadline\n    ) external payable returns (uint[] memory amounts);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized < version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/furion-swap/FurionSwapV2Router.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../tokens/interfaces/IWETH.sol\";\nimport \"./interfaces/IFurionSwapV2Router.sol\";\nimport \"./interfaces/IFurionSwapFactory.sol\";\nimport \"./interfaces/IFurionSwapPair.sol\";\nimport {IERC20Decimals} from \"../utils/interfaces/IERC20Decimals.sol\";\n\n/*\n//===================================//\n ______ _   _______ _____ _____ _   _ \n |  ___| | | | ___ \\_   _|  _  | \\ | |\n | |_  | | | | |_/ / | | | | | |  \\| |\n |  _| | | | |    /  | | | | | | . ` |\n | |   | |_| | |\\ \\ _| |_\\ \\_/ / |\\  |\n \\_|    \\___/\\_| \\_|\\___/ \\___/\\_| \\_/\n//===================================//\n* /\n\n/**\n * @title  FurionSwapRouter\n * @notice Router for the pool, you can add/remove liquidity or swap A for B.\n *         Swapping fee rate is 3‰, 99% of them is given to LP, and 1% to income maker\n *         Very similar logic with Uniswap V2.\n *\n */\n\ncontract FurionSwapV2Router is IFurionSwapV2Router {\n\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IFurionSwapPair;\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Variables **************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    // Some other contracts\n    address public immutable override factory;\n    address public immutable override WETH;\n\n    // ---------------------------------------------------------------------------------------- //\n    // *************************************** Events ***************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    event LiquidityAdded(\n        address indexed pairAddress,\n        uint amountA,\n        uint amountB,\n        uint liquidity\n    );\n\n    event LiquidityRemoved(\n        address indexed pairAddress,\n        uint amountA,\n        uint amountB,\n        uint liquidity\n    );\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Constructor ************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    constructor(address _factory, address _weth) {\n        factory = _factory;\n        WETH = _weth;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************** Modifiers *************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Transactions are available only before the deadline\n     * @param _deadline Deadline of the pool\n     */\n    modifier beforeDeadline(uint _deadline) {\n        if(_deadline > 0){\n            if (msg.sender != IFurionSwapFactory(factory).incomeMaker()) {\n                require(block.timestamp < _deadline, \"expired transaction\");\n            }\n        }\n        _;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************ Main Functions ************************************ //\n    // ---------------------------------------------------------------------------------------- //\n\n    receive() external payable {\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\n    }\n\n    /**\n     * @notice Add liquidity function\n     * @param _tokenA Address of tokenA\n     * @param _tokenB Address of tokenB\n     * @param _amountADesired Amount of tokenA desired\n     * @param _amountBDesired Amount of tokenB desired\n     * @param _amountAMin Minimum amoutn of tokenA\n     * @param _amountBMin Minimum amount of tokenB\n     * @param _to Address that receive the lp token, normally the user himself\n     * @param _deadline Transaction will revert after this deadline\n     * @return amountA Amount of tokenA to be input\n     * @return amountB Amount of tokenB to be input\n     * @return liquidity LP token to be mint\n     */\n    function addLiquidity(\n        address _tokenA,\n        address _tokenB,\n        uint _amountADesired,\n        uint _amountBDesired,\n        uint _amountAMin,\n        uint _amountBMin,\n        address _to,\n        uint _deadline\n    ) external beforeDeadline(_deadline) returns (uint amountA, uint amountB, uint liquidity) {\n\n        (amountA, amountB) = _addLiquidity(\n                _tokenA,\n                _tokenB,\n                _amountADesired,\n                _amountBDesired,\n                _amountAMin,\n                _amountBMin\n            );\n\n        address pair = IFurionSwapFactory(factory).getPair(\n            _tokenA,\n            _tokenB\n        );\n\n        _transferFromHelper(_tokenA, msg.sender, pair, amountA);\n        _transferFromHelper(_tokenB, msg.sender, pair, amountB);\n\n        liquidity = IFurionSwapPair(pair).mint(_to);\n\n        emit LiquidityAdded(pair, amountA, amountB, liquidity);\n    }\n\n    /**\n     * @notice Add liquidity for pair where one token is ETH\n     * @param _token Address of the other token\n     * @param _amountTokenDesired Amount of token desired\n     * @param _amountTokenMin Minimum amount of token\n     * @param _amountETHMin Minimum amount of ETH\n     * @param _to Address that receive the lp token, normally the user himself\n     * @param _deadline Transaction will revert after this deadline\n     * @return amountToken Amount of token to be input\n     * @return amountETH Amount of ETH to be input\n     * @return liquidity LP token to be mint\n     */\n    function addLiquidityETH(\n        address _token,\n        uint _amountTokenDesired,\n        uint _amountTokenMin,\n        uint _amountETHMin,\n        address _to,\n        uint _deadline\n    ) external payable beforeDeadline(_deadline) returns (uint amountToken, uint amountETH, uint liquidity) {\n\n        (amountToken, amountETH) = _addLiquidity(\n            _token,\n            WETH,\n            _amountTokenDesired,\n            msg.value,\n            _amountTokenMin,\n            _amountETHMin\n        );\n\n        address pair = IFurionSwapFactory(factory).getPair(\n            _token,\n            WETH\n        );\n\n        _transferFromHelper(_token, msg.sender, pair, amountToken);\n        IWETH(WETH).deposit{value: amountETH}();\n        assert(IWETH(WETH).transfer(pair, amountETH));\n\n        liquidity = IFurionSwapPair(pair).mint(_to);\n\n        // refund dust eth, if any\n        if (msg.value > amountETH) _safeTransferETH(msg.sender, msg.value - amountETH);\n\n        emit LiquidityAdded(pair, amountToken, amountETH, liquidity);\n    }\n\n    /**\n     * @notice Remove liquidity from the pool\n     * @param _tokenA Address of token A\n     * @param _tokenB Address of token B\n     * @param _liquidity The lp token amount to be removed\n     * @param _amountAMin Minimum amount of tokenA given out\n     * @param _amountBMin Minimum amount of tokenB given out\n     * @param _to User address\n     * @param _deadline Deadline of this transaction\n     * @return amount0 Amount of token0 given out\n     * @return amount1 Amount of token1 given out, here amount0 & 1 is ordered\n     */\n    function removeLiquidity(\n        address _tokenA,\n        address _tokenB,\n        uint _liquidity,\n        uint _amountAMin,\n        uint _amountBMin,\n        address _to,\n        uint _deadline\n    )\n        public override\n        beforeDeadline(_deadline)\n        returns (uint amount0, uint amount1)\n    {\n        address pair = IFurionSwapFactory(factory).getPair(\n            _tokenA,\n            _tokenB\n        );\n\n        IFurionSwapPair(pair).safeTransferFrom(msg.sender, pair, _liquidity); // send liquidity to pair\n\n        // token0 < token1, corresponding amoount\n        (amount0, amount1) = IFurionSwapPair(pair).burn(_to);\n\n        (uint amount0Min, uint amount1Min) = _tokenA < _tokenB ? \n        (_amountAMin, _amountBMin) : (_amountBMin, _amountAMin);\n\n        require(amount0 >= amount0Min, \"Insufficient amount for token0\");\n        require(amount1 >= amount1Min, \"Insufficient amount for token1\");\n\n        emit LiquidityRemoved(pair, amount0, amount1, _liquidity);\n    }\n\n    /**\n     * @notice Remove liquidity from the pool, one token is ETH\n     * @param _token Address of the other token\n     * @param _liquidity The lp token amount to be removed\n     * @param _amountTokenMin Minimum amount of token given out\n     * @param _amountETHMin Minimum amount of ETH given out\n     * @param _to User address\n     * @param _deadline Deadline of this transaction\n     * @return amountToken Amount of token given out\n     * @return amountETH Amount of ETH given out\n     */\n    function removeLiquidityETH(\n        address _token,\n        uint _liquidity,\n        uint _amountTokenMin,\n        uint _amountETHMin,\n        address _to,\n        uint _deadline\n    ) external beforeDeadline(_deadline) returns (uint amountToken, uint amountETH) {\n        (amountToken, amountETH) = removeLiquidity(\n            _token,\n            WETH,\n            _liquidity,\n            _amountTokenMin,\n            _amountETHMin,\n            address(this),\n            _deadline\n        );\n\n        // firstly make tokens inside the contract then transfer out\n        _transferHelper(_token, _to, amountToken);\n\n        IWETH(WETH).withdraw(amountETH);\n        _safeTransferETH(_to, amountETH);\n    }\n\n    /**\n     * @notice Swap exact tokens for another token, input is fixed\n     * @param _amountIn Amount of input token\n     * @param _amountOutMin Minimum amount of token given out\n     * @param _path Address collection of trading path\n     * @param _to Receiver of the output token, generally user address\n     * @param _deadline Deadline of this transaction\n     * @return amounts Amount of tokens\n     */\n    function swapExactTokensForTokens(\n        uint _amountIn,\n        uint _amountOutMin,\n        address[] calldata _path,\n        address _to,\n        uint _deadline\n    ) public override beforeDeadline(_deadline) returns (uint[] memory amounts) {\n        amounts = getAmountsOut(_amountIn, _path);\n\n        require(amounts[amounts.length - 1] >= _amountOutMin, \"FurionSwapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\");\n\n        _transferFromHelper(\n            _path[0],\n            msg.sender,\n            IFurionSwapFactory(factory).getPair(_path[0], _path[1]),\n            amounts[0]\n        );\n        _swap(amounts, _path, _to);\n    }\n\n    /**\n     * @notice Swap token for exact token, output is fixed\n     * @param _amountOut Amount of output token\n     * @param _amountInMax Maxmium amount of token in\n     * @param _path Address collection of trading path\n     * @param _to Receiver of the output token, generally user address\n     * @param _deadline Deadline of this transaction\n     * @return amounts Amount of tokens\n     */\n    function swapTokensForExactTokens(\n        uint _amountOut,\n        uint _amountInMax,\n        address[] calldata _path,\n        address _to,\n        uint _deadline\n    ) public override beforeDeadline(_deadline) returns (uint[] memory amounts) {\n\n        amounts = getAmountsIn(_amountOut, _path);\n\n        require(amounts[0] <= _amountInMax, \"FurionSwapV2Router: EXCESSIVE_INPUT_AMOUNT\");\n\n        _transferFromHelper(\n            _path[0],\n            msg.sender,\n            IFurionSwapFactory(factory).getPair(_path[0], _path[1]),\n            amounts[0]\n        );\n        _swap(amounts, _path, _to);\n    }\n\n\n    /**\n     * @notice Swap exact ETH for another token, input is fixed\n     * @param _amountOutMin Minimum amount of output token\n     * @param _path Address collection of trading path\n     * @param _to Receiver of the output token, generally user address\n     * @param _deadline Deadline of this transaction\n     * @return amounts Amount of tokens\n     */\n    function swapExactETHForTokens(\n        uint _amountOutMin,\n        address[] calldata _path,\n        address _to,\n        uint _deadline\n    ) external override payable beforeDeadline(_deadline)\n        returns (uint[] memory amounts)\n    {\n        require(_path[0] == WETH, \"FurionSwapV2Router: INVALID_PATH\");\n        amounts = getAmountsOut(msg.value, _path);\n        require(amounts[amounts.length - 1] >= _amountOutMin, \"FurionSwapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\");\n        \n        IWETH(WETH).deposit{value: amounts[0]}();\n        assert(IWETH(WETH).transfer(\n            IFurionSwapFactory(factory).getPair(_path[0], _path[1]),\n            amounts[0]\n        ));\n        _swap(amounts, _path, _to);\n    }\n\n    /**\n     * @notice Swap token for exact ETH, output is fixed\n     * @param _amountOut Amount of output token\n     * @param _amountInMax Maxmium amount of token in\n     * @param _path Address collection of trading path\n     * @param _to Receiver of the output token, generally user address\n     * @param _deadline Deadline of this transaction\n     * @return amounts Amount of tokens\n     */\n    function swapTokensForExactETH(\n        uint _amountOut,\n        uint _amountInMax,\n        address[] calldata _path,\n        address _to,\n        uint _deadline\n    ) external override beforeDeadline(_deadline)\n        returns (uint[] memory amounts)\n    {\n        require(_path[_path.length - 1] == WETH, \"FurionSwapV2Router: INVALID_PATH\");\n        amounts = getAmountsIn(_amountOut, _path);\n        require(amounts[0] <= _amountInMax, \"FurionSwapV2Router: EXCESSIVE_INPUT_AMOUNT\");\n\n        _transferFromHelper(\n            _path[0],\n            msg.sender,\n            IFurionSwapFactory(factory).getPair(_path[0], _path[1]),\n            amounts[0]\n        );\n        _swap(amounts, _path, address(this));\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n        _safeTransferETH(_to, amounts[amounts.length - 1]);\n    }\n    \n    /**\n     * @notice Swap exact tokens for ETH, input is fixed\n     * @param _amountIn Amount of input token\n     * @param _amountOutMin Minimum amount of output token\n     * @param _path Address collection of trading path\n     * @param _to Receiver of the output token, generally user address\n     * @param _deadline Deadline of this transaction\n     * @return amounts Amount of tokens\n     */\n    function swapExactTokensForETH(\n        uint _amountIn,\n        uint _amountOutMin,\n        address[] calldata _path,\n        address _to,\n        uint _deadline\n    ) external override beforeDeadline(_deadline)\n        returns (uint[] memory amounts)\n    {\n        require(_path[_path.length - 1] == WETH, \"FurionSwapV2Router: INVALID_PATH\");\n        amounts = getAmountsOut(_amountIn, _path);\n        require(amounts[amounts.length - 1] >= _amountOutMin, \"FurionSwapV2Router: INSUFFICIENT_OUTPUT_AMOUNT\");\n\n        _transferFromHelper(\n            _path[0],\n            msg.sender,\n            IFurionSwapFactory(factory).getPair(_path[0], _path[1]),\n            amounts[0]\n        );\n\n        _swap(amounts, _path, address(this));\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\n        _safeTransferETH(_to, amounts[amounts.length - 1]);\n    }\n\n    /**\n     * @notice Swap token for exact ETH, output is fixed\n     * @param _amountOut Amount of output token\n     * @param _path Address collection of trading path\n     * @param _to Receiver of the output token, generally user address\n     * @param _deadline Deadline of this transaction\n     * @return amounts Amount of tokens\n     */\n    function swapETHForExactTokens(\n        uint _amountOut,\n        address[] calldata _path,\n        address _to,\n        uint _deadline\n    ) external override payable beforeDeadline(_deadline)\n        returns (uint[] memory amounts)\n    {\n        require(_path[0] == WETH, \"FurionSwapV2Router: INVALID_PATH\");\n        amounts = getAmountsIn(_amountOut, _path);\n        require(amounts[0] <= msg.value, \"FurionSwapV2Router: EXCESSIVE_INPUT_AMOUNT\");\n\n        IWETH(WETH).deposit{value: amounts[0]}();\n        assert(IWETH(WETH).transfer(\n            IFurionSwapFactory(factory).getPair(_path[0], _path[1]),\n            amounts[0]\n        ));\n        _swap(amounts, _path, _to);\n\n        // refund dust eth, if any\n        if (msg.value > amounts[0]) _safeTransferETH(msg.sender, msg.value - amounts[0]);\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // *********************************** Helper Functions *********************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Fetch the reserves for a trading pair\n     * @dev You need to sort the token order by yourself!\n     *      No matter your input order, the return value will always start with lower address\n     *      i.e. _tokenA < _tokenB ? (_tokenA, _tokenB) : (_tokenB, _tokenA)\n     * @param _tokenA Address of tokenA\n     * @param _tokenB Address of tokenB\n     * @return reserve0 Reserve of token0,\n     * @return reserve1 Reserve of token1\n     */\n    function getReserves(address _tokenA, address _tokenB)\n        public\n        view\n        returns (uint112 reserve0, uint112 reserve1)\n    {\n        address pairAddress = IFurionSwapFactory(factory).getPair(\n            _tokenA,\n            _tokenB\n        );\n\n        // (token0 reserve, token1 reserve)\n        (reserve0, reserve1) = IFurionSwapPair(pairAddress).getReserves();\n    }\n\n    /**\n     * @notice Used when swap exact tokens for tokens (in is fixed)\n     * @param _amountIn Amount of tokens put in\n     * @param _tokenIn Address of the input token\n     * @param _tokenOut Address of the output token\n     * @return amountOut Amount of token out\n     */\n    function getAmountOut(\n        uint _amountIn,\n        address _tokenIn,\n        address _tokenOut\n    ) public view returns (uint amountOut) {\n        (uint reserve0, uint reserve1) = getReserves(\n            _tokenIn,\n            _tokenOut\n        );\n\n        // Get the right order\n        (uint reserveIn, uint reserveOut) = _tokenIn < _tokenOut\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n\n        require(_amountIn > 0, \"insufficient input amount\");\n        require(reserveIn > 0 && reserveOut > 0, \"insufficient liquidity\");\n\n        // read fee rate from FurionSwapPair\n        uint feeRate = IFurionSwapPair(\n            IFurionSwapFactory(factory).getPair(_tokenIn, _tokenOut)\n        ).feeRate();\n\n        uint amountInWithFee = _amountIn * (1000 - feeRate);\n        uint numerator = amountInWithFee * reserveOut;\n        uint denominator = reserveIn * 1000 + amountInWithFee;\n\n        amountOut = numerator / denominator;\n    }\n\n    /**\n     * @notice Used when swap tokens for exact tokens (out is fixed)\n     * @param _amountOut Amount of tokens given out\n     * @param _tokenIn Address of the input token\n     * @param _tokenOut Address of the output token\n     * @return amountIn Amount of token in\n     */\n    function getAmountIn(\n        uint _amountOut,\n        address _tokenIn,\n        address _tokenOut\n    ) public view returns (uint amountIn) {\n        (uint reserve0, uint reserve1) = getReserves(\n            _tokenIn,\n            _tokenOut\n        );\n\n        // Get the right order\n        (uint reserveIn, uint reserveOut) = _tokenIn < _tokenOut\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n\n        require(_amountOut > 0, \"insufficient output amount\");\n        require(reserveIn > 0 && reserveOut > 0, \"insufficient liquidity\");\n\n        // read fee rate from FurionSwapPair\n        uint feeRate = IFurionSwapPair(\n            IFurionSwapFactory(factory).getPair(_tokenIn, _tokenOut)\n        ).feeRate();\n\n        uint numerator = reserveIn * (_amountOut) * 1000;\n        uint denominator = (reserveOut - _amountOut) * (1000 - feeRate);\n\n        amountIn = numerator / denominator + 1;\n    }\n\n    /**\n     * @notice Used when swap exact tokens for tokens (in is fixed), multiple swap\n     * @param _amountIn Amount of tokens put in\n     * @param _path Path of trading routes\n     * @return amounts Amount of tokens\n     */\n    function getAmountsOut(\n        uint _amountIn,\n        address[] memory _path\n    ) public view returns (uint[] memory amounts) {\n        require(_path.length >= 2, \"FurionSwap: INVALID_PATH\");\n        amounts = new uint[](_path.length);\n        amounts[0] = _amountIn;\n        for (uint i; i < _path.length - 1; i++) {\n            amounts[i+1] = getAmountOut(amounts[i], _path[i], _path[i+1]);\n        }\n    }\n\n    /**\n     * @notice Used when swap exact tokens for tokens (out is fixed), multiple swap\n     * @param _amountOut Amount of tokens get out\n     * @param _path Path of trading routes\n     * @return amounts Amount of tokens\n     */\n    function getAmountsIn(\n        uint _amountOut,\n        address[] memory _path\n    ) public view returns (uint[] memory amounts) {\n\n        require(_path.length >= 2, \"FurionSwap: INVALID_PATH\");\n        amounts = new uint[](_path.length);\n        amounts[amounts.length - 1] = _amountOut;\n\n        for (uint i = _path.length - 1; i > 0; i--) {\n            amounts[i-1] = getAmountIn(amounts[i], _path[i-1], _path[i]);\n        }\n    }\n\n    /**\n     * @notice Given some amount of an asset and pair reserves\n     *         returns an equivalent amount of the other asset\n     * @dev Used when add or remove liquidity\n     * @param _amountA Amount of tokenA\n     * @param _reserveA Reserve of tokenA\n     * @param _reserveB Reserve of tokenB\n     * @return amountB Amount of tokenB\n     */\n    function quote(\n        uint _amountA,\n        uint _reserveA,\n        uint _reserveB\n    ) public pure returns (uint amountB) {\n        require(_amountA > 0, \"insufficient amount\");\n        require(_reserveA > 0 && _reserveB > 0, \"insufficient liquidity\");\n\n        amountB = (_amountA * _reserveB) / _reserveA;\n    }\n\n\n    // ---------------------------------------------------------------------------------------- //\n    // *********************************** Internal Functions ********************************* //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Internal function to finish adding liquidity\n     * @param _tokenA Address of tokenA\n     * @param _tokenB Address of tokenB\n     * @param _amountADesired Amount of tokenA to be added\n     * @param _amountBDesired Amount of tokenB to be added\n     * @param _amountAMin Minimum amount of tokenA\n     * @param _amountBMin Minimum amount of tokenB\n     * @return amountA Real amount of tokenA\n     * @return amountB Real amount of tokenB\n     */\n    function _addLiquidity(\n        address _tokenA,\n        address _tokenB,\n        uint _amountADesired,\n        uint _amountBDesired,\n        uint _amountAMin,\n        uint _amountBMin\n    ) private view returns (uint amountA, uint amountB) {\n\n        (uint reserve0, uint reserve1) = getReserves(_tokenA, _tokenB);\n        (uint reserveA, uint reserveB) = _tokenA < _tokenB ? (reserve0, reserve1) : (reserve1, reserve0);\n\n        if (reserveA == 0 && reserveB == 0) {\n            (amountA, amountB) = (_amountADesired, _amountBDesired);\n        } else {\n            uint amountBOptimal = quote(\n                _amountADesired,\n                reserveA,\n                reserveB\n            );\n            if (amountBOptimal <= _amountBDesired) {\n                require(amountBOptimal >= _amountBMin, \"INSUFFICIENT_B_AMOUNT\");\n                (amountA, amountB) = (_amountADesired, amountBOptimal);\n            } else {\n                uint amountAOptimal = quote(\n                    _amountBDesired,\n                    reserveB,\n                    reserveA\n                );\n                require(amountAOptimal <= _amountADesired, \"UNAVAILABLE\");\n                require(amountAOptimal >= _amountAMin, \"INSUFFICIENT_A_AMOUNT\");\n                (amountA, amountB) = (amountAOptimal, _amountBDesired);\n            }\n        }\n    }\n\n    /**\n     * @notice Finish the erc20 transfer operation\n     * @param _token ERC20 token address\n     * @param _from Address to give out the token\n     * @param _to Pair address to receive the token\n     * @param _amount Transfer amount\n     */\n    function _transferFromHelper(\n        address _token,\n        address _from,\n        address _to,\n        uint _amount\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        // (bool success, bytes memory data) = _token.call(abi.encodeWithSelector(0x23b872dd, _from, _to, _amount));\n        // require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: TRANSFER_FROM_FAILED\");\n        IERC20(_token).safeTransferFrom(_from, _to, _amount);\n    }\n\n    /**\n     * @notice Finish the erc20 transfer operation\n     * @param _token ERC20 token address\n     * @param _to Address to receive the token\n     * @param _amount Transfer amount\n     */\n    function _transferHelper(\n        address _token,\n        address _to,\n        uint _amount\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        // (bool success, bytes memory data) = _token.call(abi.encodeWithSelector(0x23b872dd, _from, _to, _amount));\n        // require(success && (data.length == 0 || abi.decode(data, (bool))), \"TransferHelper: TRANSFER_FROM_FAILED\");\n        IERC20(_token).safeTransfer(_to, _amount);\n    }\n\n    /**\n     * @notice Finish the ETH transfer operation\n     * @param _to Address to receive the token\n     * @param _amount Transfer amount\n     */\n    function _safeTransferETH(address _to, uint _amount) internal {\n        (bool success,) = _to.call{value: _amount}(\"\");\n        require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\n    }\n\n    /**\n     * @notice Finish swap process, requires the initial amount to have already been sent to the first pair\n     * @param _amounts Amounts of token out for multiple swap\n     * @param _path Address of tokens for multiple swap\n     * @param _to Address of the final token receiver\n     */\n    function _swap(uint[] memory _amounts, address[] memory _path, address _to) private {\n        for (uint i; i < _path.length - 1; i++) {\n            // get token pair for each seperate swap\n            (address input, address output) = (_path[i], _path[i+1]);\n            address token0 = input < output ? input : output;\n\n            // get tokenOutAmount for each swap\n            uint amountOut = _amounts[i + 1];\n            (uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\n\n            address to = i < _path.length - 2 ? IFurionSwapFactory(factory).getPair(output, _path[i+2]) : _to;\n            \n            IFurionSwapPair(IFurionSwapFactory(factory).getPair(input, output)).swap(amount0Out, amount1Out, to);\n        }\n    }\n}\n"
    },
    "contracts/tokens/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface IWETH {\n    function deposit() external payable;\n    function transfer(address to, uint value) external returns (bool);\n    function withdraw(uint) external;\n}"
    },
    "contracts/utils/interfaces/IERC20Decimals.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.10;\n\ninterface IERC20Decimals {\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/utils/interfaces/IERC20PermitWithMultipleMinters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\";\n\ninterface IERC20PermitWithMultipleMinters is IERC20, IERC20Permit {\n    // ---------------------------------------------------------------------------------------- //\n    // *************************************** Functions ************************************** //\n    // ---------------------------------------------------------------------------------------- //\n    /**\n     * @notice Add a new minter into the minterList\n     * @param _newMinter Address of the new minter\n     */\n    function addMinter(address _newMinter) external;\n\n    /**\n     * @notice Remove a minter from the minterList\n     * @param _oldMinter Address of the minter to be removed\n     */\n    function removeMinter(address _oldMinter) external;\n\n    /**\n     * @notice Add a new burner into the burnerList\n     * @param _newBurner Address of the new burner\n     */\n    function addBurner(address _newBurner) external;\n\n    /**\n     * @notice Remove a minter from the minterList\n     * @param _oldBurner Address of the minter to be removed\n     */\n    function removeBurner(address _oldBurner) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/draft-EIP712.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private constant _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n    /**\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\n     * to reserve a slot.\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/mock/MockUSD.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @notice This is the MockUSD for test\n */\ncontract MockUSD is ERC20 {\n    uint256 public constant INITIAL_SUPPLY = 100000 * 1e6;\n\n    constructor() ERC20(\"MOCKUSD\", \"USDC\") {\n        // When first deployed, give the owner some coins\n        _mint(msg.sender, INITIAL_SUPPLY);\n    }\n\n    // Everyone can mint\n    function mint(address _account, uint256 _amount) public {\n        _mint(_account, _amount);\n    }\n\n    // 6 decimals to mock stablecoins\n    function decimals() public pure override returns (uint8) {\n        return 6;\n    }\n}\n"
    },
    "contracts/mock/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * @notice MockERC20 for test\n * @dev MockUSD has 6 decimals, this contract is 18 decimals\n */\ncontract MockERC20 is ERC20 {\n    constructor() ERC20(\"MockERC20\", \"ERC20\") {}\n\n    // Everyone can mint, have fun for test\n    function mint(address _account, uint256 _amount) public {\n        _mint(_account, _amount);\n    }\n}\n"
    },
    "contracts/utils/ERC20PermitWithMultipleMinters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\nimport \"./OwnableWithoutContext.sol\";\n\n/**\n * @title  ERC20 with Multiple Minters and Burners\n * @notice This is contract used for ERC20 tokens that has multiple minters and burners.\n * @dev    The minters and burners are some contracts in Furion that need to issue FUR.\n *         It has basic implementations for ERC20 and also the owner control.\n *         Even if the owner is renounced to zero address, the token can still be minted/burned.\n *         FUR is this kind ERC20 token.\n */\ncontract ERC20PermitWithMultipleMinters is ERC20Permit, OwnableWithoutContext {\n    // List of all minters\n    mapping(address => bool) public isMinter;\n\n    // List of all burners\n    mapping(address => bool) public isBurner;\n\n    event MinterAdded(address newMinter);\n    event MinterRemoved(address oldMinter);\n\n    event BurnerAdded(address newBurner);\n    event BurnerRemoved(address oldBurner);\n\n    event Mint(address indexed account, uint256 amount);\n    event Burn(address indexed account, uint256 amount);\n\n    constructor(string memory name, string memory symbol)\n        ERC20(name, symbol)\n        ERC20Permit(name)\n        OwnableWithoutContext(msg.sender)\n    {\n        // After the owner is transferred to multisig governance\n        // This initial minter should be removed\n        isMinter[_msgSender()] = true;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // *********************************** Modifiers ****************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     *@notice Check if the msg.sender is in the minter list\n     */\n    modifier validMinter(address _sender) {\n        require(isMinter[_sender], \"Invalid minter\");\n        _;\n    }\n\n    /**\n     * @notice Check if the msg.sender is in the burner list\n     */\n    modifier validBurner(address _sender) {\n        require(isBurner[_sender], \"Invalid burner\");\n        _;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // *********************************** Admin Functions ************************************ //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Add a new minter into the minterList\n     * @param _newMinter Address of the new minter\n     */\n    function addMinter(address _newMinter) external onlyOwner {\n        require(!isMinter[_newMinter], \"Already a minter\");\n\n        isMinter[_newMinter] = true;\n\n        emit MinterAdded(_newMinter);\n    }\n\n    /**\n     * @notice Remove a minter from the minterList\n     * @param _oldMinter Address of the minter to be removed\n     */\n    function removeMinter(address _oldMinter) external onlyOwner {\n        require(isMinter[_oldMinter], \"Not a minter\");\n\n        isMinter[_oldMinter] = false;\n\n        emit MinterRemoved(_oldMinter);\n    }\n\n    /**\n     * @notice Add a new burner into the burnerList\n     * @param _newBurner Address of the new burner\n     */\n    function addBurner(address _newBurner) external onlyOwner {\n        require(!isBurner[_newBurner], \"Already a burner\");\n\n        isBurner[_newBurner] = true;\n\n        emit BurnerAdded(_newBurner);\n    }\n\n    /**\n     * @notice Remove a minter from the minterList\n     * @param _oldBurner Address of the minter to be removed\n     */\n    function removeBurner(address _oldBurner) external onlyOwner {\n        require(isMinter[_oldBurner], \"Not a burner\");\n\n        isBurner[_oldBurner] = false;\n\n        emit BurnerRemoved(_oldBurner);\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // *********************************** Internal Functions ********************************* //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Mint tokens\n     * @param _account Receiver's address\n     * @param _amount Amount to be minted\n     */\n    function mint(address _account, uint256 _amount)\n        internal\n        validMinter(_msgSender())\n    {\n        _mint(_account, _amount); // ERC20 method with an event\n        emit Mint(_account, _amount);\n    }\n\n    /**\n     * @notice Burn tokens\n     * @param _account address\n     * @param _amount amount to be burned\n     */\n    function burn(address _account, uint256 _amount)\n        internal\n        validBurner(_msgSender())\n    {\n        _burn(_account, _amount);\n        emit Burn(_account, _amount);\n    }\n}\n"
    },
    "contracts/tokens/FurionToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"./interfaces/IFurionToken.sol\";\nimport \"../utils/ERC20PermitWithMultipleMinters.sol\";\n\n/*\n//===================================//\n ______ _   _______ _____ _____ _   _ \n |  ___| | | | ___ \\_   _|  _  | \\ | |\n | |_  | | | | |_/ / | | | | | |  \\| |\n |  _| | | | |    /  | | | | | | . ` |\n | |   | |_| | |\\ \\ _| |_\\ \\_/ / |\\  |\n \\_|    \\___/\\_| \\_|\\___/ \\___/\\_| \\_/\n//===================================//\n* /\n\n/**\n * @title  Furion Token\n * @notice FurionToken inherits from ERC20 Permit which contains the basic ERC20 implementation.\n *         FurionToken can use the permit function rather than approve + transferFrom.\n *\n *         FurionToken has an owner, a minterList and a burnerList.\n *         When lauched on mainnet, the owner may be removed or tranferred to a multisig.\n *         By default, the owner & the first minter will be the one that deploys the contract.\n *         The minterList should contain FarmingPool and PurchaseIncentiveVault.\n *         The burnerList should contain EmergencyPool.\n */\ncontract FurionToken is ERC20PermitWithMultipleMinters {\n    // Furion has a total supply of 1 billion\n    uint256 public constant CAP = 1e9 ether;\n\n    /// @notice Indicator that it is one of the Furion Tokens\n    bool public constant isFurionTokens = true;\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************ Constructor *************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    constructor() ERC20PermitWithMultipleMinters(\"FurionToken\", \"FUR\") {}\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Modifiers **************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    // Furion token has a hard cap of 1 billion\n    modifier notExceedCap(uint256 _amount) {\n        require(\n            totalSupply() + _amount <= CAP,\n            \"Exceeds the FUR cap (1 billion)\"\n        );\n        _;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // *********************************** Main Functions ************************************* //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Mint Furion tokens\n     * @param  _account Receiver's address\n     * @param  _amount  Amount to be minted\n     */\n    function mintFurion(address _account, uint256 _amount)\n        external\n        notExceedCap(_amount)\n    {\n        mint(_account, _amount);\n    }\n\n    /**\n     * @notice Burn Furion tokens\n     * @param  _account Receiver's address\n     * @param  _amount  Amount to be burned\n     */\n    function burnFurion(address _account, uint256 _amount) external {\n        burn(_account, _amount);\n    }\n}\n"
    },
    "contracts/furion-farming/FarmingPoolUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { \n    ReentrancyGuardUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport { OwnableUpgradeable } from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport { PausableUpgradeable } from \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport { Initializable } from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport { IFurionToken } from \"../tokens/interfaces/IFurionToken.sol\";\nimport { Math } from \"../libraries/Math.sol\";\n\n/*\n//===================================//\n ______ _   _______ _____ _____ _   _ \n |  ___| | | | ___ \\_   _|  _  | \\ | |\n | |_  | | | | |_/ / | | | | | |  \\| |\n |  _| | | | |    /  | | | | | | . ` |\n | |   | |_| | |\\ \\ _| |_\\ \\_/ / |\\  |\n \\_|    \\___/\\_| \\_|\\___/ \\___/\\_| \\_/\n//===================================//\n* /\n\n/**\n * @title  Farming Pool\n * @notice This contract is for LPToken mining on Furion\n * @dev    The pool id starts from 1 rather than 0\n *         The Furion reward is calculated by timestamp rather than block number\n *         This is one upgradeable version\n */\n\ncontract FarmingPoolUpgradeable is\n    Initializable,\n    OwnableUpgradeable,\n    ReentrancyGuardUpgradeable,\n    PausableUpgradeable\n{\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IFurionToken;\n    using Math for uint256;\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Variables **************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    string public constant name = \"Furion LP Farming Pool\";\n\n    // The reward token is Furion\n    IFurionToken public furion;\n\n    // SCALE/Precision used for calculating rewards\n    uint256 public constant SCALE = 1e12;\n\n    // PoolId starts from 1\n    uint256 public _nextPoolId;\n\n    // Farming starts from a certain block timestamp\n    uint256 public startTimestamp;\n\n    struct PoolInfo {\n        address lpToken; // LPToken address\n        uint256 basicFurionPerSecond; // Basic Reward speed\n        uint256 lastRewardTimestamp; // Last reward timestamp\n        uint256 accFurionPerShare; // Accumulated Furion per share\n    }\n    PoolInfo[] public poolList;\n\n    // lptoken address => poolId\n    mapping(address => uint256) public poolMapping;\n\n    // poolId => is farming or not\n    mapping(uint256 => bool) public isFarming;\n\n    struct UserInfo {\n        uint256 rewardDebt; // Furion reward debt\n        uint256 stakingBalance; // the amount of a user's staking in the pool\n    }\n\n    // poolId => userAddress => userInfo\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n\n    // ---------------------------------------------------------------------------------------- //\n    // *************************************** Events ***************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    event StartTimestampChanged(uint256 startTimestamp);\n    event Stake(address staker, uint256 poolId, uint256 amount);\n    event Withdraw(address staker, uint256 poolId, uint256 amount);\n    event Harvest(\n        address staker,\n        address rewardReceiver,\n        uint256 poolId,\n        uint256 pendingReward\n    );\n\n\n    event NewPoolAdded(\n        address lpToken,\n        uint256 basicFurionPerSecond\n    );\n    event FarmingPoolStarted(uint256 poolId, uint256 timestamp);\n    event FarmingPoolStopped(uint256 poolId, uint256 timestamp);\n    event FurionRewardChanged(\n        uint256 poolId,\n        uint256 basicFurionPerSecond\n    );\n    event PoolUpdated(\n        uint256 poolId,\n        uint256 accFurionPerShare\n    );\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Constructor ************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    function initialize(address _furion) public initializer {\n        require(_furion != address(0), \"FARMING_POOL: ZERO_ADDRESS\");\n\n        __Ownable_init();\n        __ReentrancyGuard_init_unchained();\n        __Pausable_init_unchained();\n\n        furion = IFurionToken(_furion);\n\n        // Start from 1\n        _nextPoolId = 1;\n\n        poolList.push(\n            PoolInfo({\n                lpToken: address(0),\n                basicFurionPerSecond: 0,\n                lastRewardTimestamp: 0,\n                accFurionPerShare: 0\n            })\n        );\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************** Modifiers *************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice The address can not be zero\n     */\n    modifier notZeroAddress(address _address) {\n        require(_address != address(0), \"FARMING_POOL: ZERO_ADDRESS\");\n        _;\n    }\n\n    /**\n     * @notice The pool is still in farming\n     */\n    modifier stillFarming(uint256 _poolId) {\n        require(isFarming[_poolId], \"FARMING_POOL: POOL_NOT_FARMING\");\n        _;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // *********************************** Main Functions ************************************* //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Add a new lp into the pool\n     * @dev Can only be called by the owner\n     *      The reward speed can be 0 and set later by setFurionReward function\n     * @param _lpToken LP token address\n     * @param _basicFurionPerSecond Basic reward speed(per second) for this new pool\n     * @param _withUpdate Whether update all pools' status\n     */\n    function add(\n        address _lpToken,\n        uint256 _basicFurionPerSecond,\n        bool _withUpdate\n    ) public notZeroAddress(_lpToken) onlyOwner whenNotPaused {\n        // Check if already exists, if the poolId is 0, that means not in the pool\n        require(!_alreadyInPool(_lpToken), \"FARMING_POOL: ALREADY_IN_POOL\");\n\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n\n        uint256 lastRewardTimestamp = block.timestamp > startTimestamp\n            ? block.timestamp\n            : startTimestamp;\n\n        // Push this new pool into the list\n        poolList.push(\n            PoolInfo({\n                lpToken: _lpToken,\n                basicFurionPerSecond: _basicFurionPerSecond,\n                lastRewardTimestamp: lastRewardTimestamp,\n                accFurionPerShare: 0\n            })\n        );\n\n        // Store the poolId and set the farming status to true\n        if (_basicFurionPerSecond > 0) isFarming[_nextPoolId] = true;\n\n        poolMapping[_lpToken] = _nextPoolId++;\n\n        emit NewPoolAdded(_lpToken, _basicFurionPerSecond);\n    }\n\n    /**\n     * @notice Update the FurionPerSecond for a specific pool (set to 0 to stop farming)\n     * @param _poolId Id of the farming pool\n     * @param _basicFurionPerSecond New basic reward amount per second\n     * @param _withUpdate Whether update all pools\n     */\n    function setFurionReward(\n        uint256 _poolId,\n        uint256 _basicFurionPerSecond,\n        bool _withUpdate\n    ) public onlyOwner whenNotPaused {\n        // Ensure there already exists this pool\n        require(poolList[_poolId].lastRewardTimestamp != 0, \"FARMING_POOL: POOL_NOT_EXIST\");\n\n        if (_withUpdate) massUpdatePools();\n        else updatePool(_poolId);\n\n        // Not farming now + reward > 0 => Restart\n        if (isFarming[_poolId] == false && _basicFurionPerSecond > 0) {\n            isFarming[_poolId] = true;\n            emit FarmingPoolStarted(_poolId, block.timestamp);\n        }\n\n        if (_basicFurionPerSecond == 0) {\n            isFarming[_poolId] = false;\n            emit FarmingPoolStopped(_poolId, block.timestamp);\n        } else {\n            poolList[_poolId].basicFurionPerSecond = _basicFurionPerSecond;\n            emit FurionRewardChanged(\n                _poolId,\n                _basicFurionPerSecond\n            );\n        }\n    }\n\n    /**\n     * @notice Update the FurionPerSecond for a bundle of pools (used for daily updating farming rate)\n     * @param _poolId Id collection of the farming pool\n     * @param _basicFurionPerSecond New basic reward amount per second\n     * @param _withUpdate Whether update all pools\n     */\n    function setFurionRewards(\n        uint256[] calldata _poolId,\n        uint256[] calldata _basicFurionPerSecond,\n        bool _withUpdate\n    ) public onlyOwner whenNotPaused{\n        uint256 length = _poolId.length;\n        require(length <= 9, \"FARMING_POOL: MORE_THAN_NINE\");\n\n        for (uint256 i = 0; i < length; ) {\n            setFurionReward(_poolId[i], _basicFurionPerSecond[i], _withUpdate);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Stake LP token into the farming pool\n     * @dev Can only stake to the pools that are still farming\n     * @param _poolId Id of the farming pool\n     * @param _amount Staking amount\n     */\n    function stake(uint256 _poolId, uint256 _amount)\n        public\n        nonReentrant\n        whenNotPaused\n        stillFarming(_poolId)\n    {\n        require(_amount > 0, \"FARMING_POOL: STAKE_ZERO\");\n\n        PoolInfo storage pool = poolList[_poolId];\n        UserInfo storage user = userInfo[_poolId][msg.sender];\n\n        // Must update first\n        updatePool(_poolId);\n\n        // First distribute the reward if exists\n        if (user.stakingBalance > 0) {\n            uint256 pending = user.stakingBalance *\n                pool.accFurionPerShare /\n                SCALE -\n                user.rewardDebt;\n\n            // Real reward amount\n            uint256 reward = _safeFurionTransfer(msg.sender, pending);\n            emit Harvest(msg.sender, msg.sender, _poolId, reward);\n        }\n\n        // Actual deposit amount\n        uint256 actualAmount = _safeLPTransfer(\n            false,\n            pool.lpToken,\n            msg.sender,\n            _amount\n        );\n\n        user.stakingBalance += actualAmount;\n\n        user.rewardDebt =\n            user.stakingBalance * pool.accFurionPerShare / SCALE;\n\n        emit Stake(msg.sender, _poolId, actualAmount);\n    }\n\n    /**\n     * @notice Withdraw lptoken from the pool\n     * @param _poolId Id of the farming pool\n     * @param _amount Amount of lp tokens to withdraw\n     */\n    function withdraw(uint256 _poolId, uint256 _amount)\n        public\n        nonReentrant\n        whenNotPaused\n    {\n        require(_amount > 0, \"FARMING_POOL: WITHDRAW_ZERO\");\n\n        PoolInfo storage pool = poolList[_poolId];\n        UserInfo storage user = userInfo[_poolId][msg.sender];\n\n        require(user.stakingBalance >= _amount, \"FARMING_POOL: NO_ENOUGH_STAKING_BALANCE\");\n\n        // Update if the pool is still farming\n        // Users can withdraw even after the pool stopped\n        if (isFarming[_poolId]) updatePool(_poolId);\n\n        uint256 pending = user.stakingBalance * pool.accFurionPerShare  /\n            SCALE - user.rewardDebt;\n\n        uint256 reward = _safeFurionTransfer(msg.sender, pending);\n        emit Harvest(msg.sender, msg.sender, _poolId, reward);\n\n        uint256 actualAmount = _safeLPTransfer(\n            true,\n            pool.lpToken,\n            msg.sender,\n            _amount\n        );\n\n        user.stakingBalance -= actualAmount;\n\n        user.rewardDebt = user.stakingBalance * pool.accFurionPerShare / SCALE;\n\n        emit Withdraw(msg.sender, _poolId, actualAmount);\n    }\n\n    /**\n     * @notice Harvest the Furion reward and can be sent to another address\n     * @param _poolId Id of the farming pool\n     * @param _to Receiver of Furion rewards\n     */\n    function harvest(uint256 _poolId, address _to)\n        public\n        nonReentrant\n        whenNotPaused\n    {\n        // Only update the pool when it is still in farming\n        if (isFarming[_poolId]) updatePool(_poolId);\n\n        PoolInfo memory pool = poolList[_poolId];\n        UserInfo storage user = userInfo[_poolId][msg.sender];\n\n        uint256 pendingReward = user.stakingBalance * pool.accFurionPerShare / SCALE - user.rewardDebt;\n\n        require(pendingReward > 0, \"FARMING_POOL: NO_PENDING_REWARD\");\n\n        // Update the reward debt\n        user.rewardDebt = user.stakingBalance * pool.accFurionPerShare /\n            SCALE;\n\n        // Transfer the reward\n        uint256 reward = _safeFurionTransfer(_to, pendingReward);\n\n        emit Harvest(msg.sender, _to, _poolId, reward);\n    }\n\n    /**\n     * @notice Update the pool's reward status\n     * @param _poolId Id of the farming pool\n     */\n    function updatePool(uint256 _poolId) public {\n        PoolInfo storage pool = poolList[_poolId];\n        if (block.timestamp <= pool.lastRewardTimestamp) {\n            return;\n        }\n\n        uint256 lpSupply = IERC20(pool.lpToken).balanceOf(address(this));\n\n        // No LP deposited, then just update the lastRewardTimestamp\n        if (lpSupply == 0) {\n            pool.lastRewardTimestamp = block.timestamp;\n            return;\n        }\n\n        uint256 timePassed = block.timestamp - pool.lastRewardTimestamp;\n\n        uint256 basicReward = timePassed * pool.basicFurionPerSecond;\n\n        pool.accFurionPerShare += (basicReward * SCALE) / lpSupply;\n\n        // Don't forget to set the farming pool as minter\n        furion.mintFurion(address(this), basicReward);\n\n        pool.lastRewardTimestamp = block.timestamp;\n\n        emit PoolUpdated(\n            _poolId,\n            pool.accFurionPerShare\n        );\n    }\n\n    /**\n     * @notice Update all farming pools (except for those stopped ones)\n     * @dev Can be called by anyone\n     *      Only update those active pools\n     */\n    function massUpdatePools() public {\n        uint256 length = poolList.length;\n        for (uint256 poolId; poolId < length; poolId++) {\n            if (isFarming[poolId] == false) continue;\n            else updatePool(poolId);\n        }\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // *********************************** View Functions ************************************* //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Check the amount of pending Furion reward\n     * @param _poolId PoolId of this farming pool\n     * @param _user User address\n     * @return pendingFurionAmount Amount of pending Furion\n     */\n    function pendingFurion(uint256 _poolId, address _user)\n        external\n        view\n        returns (uint256)\n    {\n        PoolInfo memory poolInfo = poolList[_poolId];\n\n        if (\n            poolInfo.lastRewardTimestamp == 0 ||\n            block.timestamp < poolInfo.lastRewardTimestamp ||\n            block.timestamp < startTimestamp\n        ) return 0;\n\n        UserInfo memory user = userInfo[_poolId][_user];\n\n        // Total lp token balance\n        uint256 lpBalance = IERC20(poolInfo.lpToken).balanceOf(address(this));\n\n        // Accumulated shares to be calculated\n        uint256 accFurionPerShare = poolInfo.accFurionPerShare;\n\n        if (lpBalance == 0) return 0;\n        else {\n            // If the pool is still farming, update the info\n            if (isFarming[_poolId]) {\n                // Deigs amount given to this pool\n                uint256 timePassed = block.timestamp -\n                    poolInfo.lastRewardTimestamp;\n                uint256 basicReward = poolInfo.basicFurionPerSecond * timePassed;\n                // Update accFurionPerShare\n                // LPToken may have different decimals\n                accFurionPerShare += (basicReward * SCALE) / lpBalance;\n            }\n\n            // If the pool has stopped, not update the info\n            uint256 pending = user.stakingBalance *\n                accFurionPerShare /\n                SCALE -\n                user.rewardDebt;\n\n            return pending;\n        }\n    }\n\n    /**\n     * @notice Get the total pool list\n     * @return pooList Total pool list\n     */\n    function getPoolList() external view returns (PoolInfo[] memory) {\n        return poolList;\n    }\n\n    /**\n     * @notice Get a user's balance\n     * @param _poolId Id of the pool\n     * @param _user User address\n     * @return balance User's balance (lpToken)\n     */\n    function getUserBalance(uint256 _poolId, address _user)\n        external\n        view\n        returns (uint256)\n    {\n        return userInfo[_poolId][_user].stakingBalance;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Set Functions ************************************ //\n    // ---------------------------------------------------------------------------------------- //\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    /**\n     * @notice Set the start block timestamp\n     * @param _startTimestamp New start block timestamp\n     */\n    function setStartTimestamp(uint256 _startTimestamp)\n        external\n        onlyOwner\n        whenNotPaused\n    {\n        // Can only be set before any pool is added\n        require(\n            _nextPoolId == 1,\n            \"ALREADY_HAVING_POOLS\"\n        );\n\n        startTimestamp = _startTimestamp;\n        emit StartTimestampChanged(_startTimestamp);\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ********************************** Internal Functions ********************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Check if a lptoken has been added into the pool before\n     * @dev This can also be written as a modifier\n     * @param _lpToken LP token address\n     * @return _isInPool Wether this lp is already in pool\n     */\n    function _alreadyInPool(address _lpToken)\n        internal\n        view\n        returns (bool _isInPool)\n    {\n        uint256 poolId = poolMapping[_lpToken];\n\n        _isInPool = (poolId != 0) ? true : false;\n    }\n\n    /**\n     * @notice Safe Furion transfer (check if the pool has enough Furion token, if not, transfer balance)\n     * @param _to User's address\n     * @param _amount Amount to transfer\n     */\n    function _safeFurionTransfer(address _to, uint256 _amount)\n        internal\n        returns (uint256)\n    {\n        uint256 poolFurionBalance = furion.balanceOf(address(this));\n        require(poolFurionBalance > 0, \"FARMING_POOL: NO_FUR_IN_POOL\");\n\n        if (_amount > poolFurionBalance) {\n            furion.safeTransfer(_to, poolFurionBalance);\n            return (poolFurionBalance);\n        } else {\n            furion.safeTransfer(_to, _amount);\n            return _amount;\n        }\n    }\n\n    /**\n     * @notice Finish the transfer of LP Token\n     * @dev The lp token may have loss during transfer\n     * @param _out Whether the lp token is out\n     * @param _lpToken LP token address\n     * @param _user User address\n     * @param _amount Amount of lp tokens\n     */\n    function _safeLPTransfer(\n        bool _out,\n        address _lpToken,\n        address _user,\n        uint256 _amount\n    ) internal returns (uint256) {\n        uint256 poolBalanceBefore = IERC20(_lpToken).balanceOf(address(this));\n\n        if (_out) IERC20(_lpToken).safeTransfer(_user, _amount);\n        else IERC20(_lpToken).safeTransferFrom(_user, address(this), _amount);\n\n        uint256 poolBalanceAfter = IERC20(_lpToken).balanceOf(address(this));\n\n        return\n            _out\n                ? poolBalanceBefore - poolBalanceAfter\n                : poolBalanceAfter - poolBalanceBefore;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal onlyInitializing {\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal onlyInitializing {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/proxy/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init(address _initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(_initialOwner);\n    }\n\n    function __Ownable_init_unchained(address _initialOwner)\n        internal\n        onlyInitializing\n    {\n        _transferOwnership(_initialOwner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "contracts/furion-staking/VeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./interfaces/IVeERC20.sol\";\n\n/**\n * @title  VeERC20Upgradeable\n * @notice Modified version of ERC20Upgradeable where transfers and allowances are disabled\n * @dev    only minting and burning are allowed. The hook _afterTokenOperation is called after Minting and Burning\n *         This is one upgradeable version\n */\n\ncontract VeERC20Upgradeable is Initializable, ContextUpgradeable, IVeERC20 {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Emitted when `value` tokens are burned and minted\n     */\n    event Burn(address indexed account, uint256 value);\n    event Mint(address indexed beneficiary, uint256 value);\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_)\n        internal\n        onlyInitializing\n    {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_)\n        internal\n        onlyInitializing\n    {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Mint(account, amount);\n\n        _afterTokenOperation(account, _balances[account]);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Burn(account, amount);\n\n        _afterTokenOperation(account, _balances[account]);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any minting and burning.\n     * @param account the account being affected\n     * @param newBalance newBalance after operation\n     */\n    function _afterTokenOperation(address account, uint256 newBalance)\n        internal\n        virtual\n    {}\n\n    uint256[45] private __gap;\n}\n"
    },
    "contracts/furion-staking/interfaces/IVeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface IVeERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n}"
    },
    "contracts/furion-staking/VoteEscrowedFurion.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { VeERC20Upgradeable } from \"./VeERC20Upgradeable.sol\";\nimport { Math } from \"../libraries/Math.sol\";\n\nimport { IFarmingPool } from \"../furion-farming/interfaces/IFarmingPool.sol\";\n\n/*\n//===================================//\n ______ _   _______ _____ _____ _   _ \n |  ___| | | | ___ \\_   _|  _  | \\ | |\n | |_  | | | | |_/ / | | | | | |  \\| |\n |  _| | | | |    /  | | | | | | . ` |\n | |   | |_| | |\\ \\ _| |_\\ \\_/ / |\\  |\n \\_|    \\___/\\_| \\_|\\___/ \\___/\\_| \\_/\n//===================================//\n* /\n\n/**\n * @title Vote Escrowed Furion\n * @notice The staking contract for FUR -> veFUR\n *         veFUR:\n *            - Governance\n *            - Income sharing\n *            - etc.\n *         If you stake Furion, you generate veFUR at the current `generationRate` until you reach `maxCap`\n *         If you unstake any amount of Furion, you will lose all of your veFUR tokens\n *\n *         There is also an option that you lock your FUR for the max time\n *         and get the maximum veFUR balance immediately.\n *         !! Attention !!\n *         If you stake FUR for the max time for more than once, the lockUntil timestamp will\n *         be updated to the latest one.\n */\n\ncontract VoteEscrowedFurion is\n    Initializable,\n    OwnableUpgradeable,\n    ReentrancyGuardUpgradeable,\n    PausableUpgradeable,\n    VeERC20Upgradeable \n{\n    using SafeERC20 for IERC20;\n\n    struct UserInfo {\n        // Furion staked by user\n        uint256 amount;\n        // time of last veFUR claim or first deposit if user has not claimed yet\n        uint256 lastRelease;\n        // Amount locked for max time\n        uint256 amountLocked;\n        // Lock until timestamp\n        uint256 lockUntil;\n    }\n\n    // User info\n    mapping(address => UserInfo) public users;\n\n    // Furion token\n    IERC20 public furion;\n\n    // Max veFUR for one single staked FUR\n    // Max veFUR amount = maxCap * FUR staked\n    uint256 public maxCapRatio;\n\n    // Rate of veFUR generated per second, per Furion staked\n    uint256 public generationRate;\n\n    // Calculation scale\n    uint256 public constant SCALE = 1e18;\n\n    // contract address => whether able to receive staked veFUR\n    // Contract addresses are by default unable to stake Furion, they must be whitelisted\n    mapping(address => bool) public whitelist;\n\n    // account => lock amount, lock amount for specific account\n    mapping(address => uint256) public locked;\n\n    // ---------------------------------------------------------------------------------------- //\n    // *************************************** Events ***************************************** //\n    // ---------------------------------------------------------------------------------------- //\n    event GenerationRateChanged(uint256 oldRate, uint256 newRate);\n    event MaxCapRatioChanged(uint256 oldMaxCapRatio, uint256 newMaxCapRatio);\n    event WhiteListAdded(address newWhiteList);\n    event WhiteListRemoVEF(address oldWhiteList);\n\n    event Deposit(address indexed user, uint256 amount);\n    event DepositMaxTime(\n        address indexed user,\n        uint256 amount,\n        uint256 lockUntil\n    );\n    event Withdraw(address indexed user, uint256 amount);\n\n    event Claimed(address indexed user, uint256 amount);\n\n    event BurnVeFUR(\n        address indexed caller,\n        address indexed user,\n        uint256 amount\n    );\n\n    event LockVeFUR(\n        address indexed caller,\n        address indexed user,\n        uint256 amount\n    );\n\n    event UnlockVeFUR(\n        address indexed caller,\n        address indexed user,\n        uint256 amount\n    );\n\n    // ---------------------------------------------------------------------------------------- //\n    // *************************************** Errors ***************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    error VEF__NotWhiteListed();\n    error VEF__StillLocked();\n    error VEF__ZeroAddress();\n    error VEF__ZeroAmount();\n    error VEF__NotEnoughBalance();\n\n    error VEF__TimeNotPassed();\n    error VEF__OverLocked();\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Constructor ************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    function initialize(address _furion)\n        public\n        initializer\n    {\n        if (_furion == address(0)) revert VEF__ZeroAddress();\n\n        // Initialize veFUR\n        __ERC20_init(\"Vote Escrowed Furion\", \"veFUR\");\n        __Ownable_init();\n        __ReentrancyGuard_init_unchained();\n        __Pausable_init_unchained();\n\n        // Set generationRate (veFUR per sec per Furion staked)\n        generationRate = 10**18;\n\n        // Set maxCap ratio\n        maxCapRatio = 100;\n\n        // Set Furion token\n        furion = IERC20(_furion);\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************** Modifiers *************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Not callable by smart contract\n     * @dev Checked first by msg.sender == tx.origin\n     *      Then if the contract is whitelisted, it will still pass the check\n     */\n    modifier notContract(address _addr) {\n        if (_addr != tx.origin) {\n            if (!whitelist[_addr]) revert VEF__NotWhiteListed();\n        }\n        _;\n    }\n\n    /**\n     * @notice No locked veFUR\n     * @dev Check the locked balance of a user\n     */\n    modifier noLocked(address _user) {\n        if (locked[_user] > 0) revert VEF__StillLocked();\n        _;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************ Main Functions ************************************ //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Depisit Furion for veFUR\n     * @dev Only EOA or whitelisted contract address\n     * @param _amount Amount to deposit\n     */\n    function deposit(uint256 _amount)\n        external\n        nonReentrant\n        whenNotPaused\n        notContract(msg.sender)\n    {\n        if (_amount == 0) revert VEF__ZeroAmount();\n\n        if (users[msg.sender].amount > 0) {\n            // If the user has amount deposited, claim veFUR\n            _claim(msg.sender);\n\n            // Update the amount\n            users[msg.sender].amount += _amount;\n        } else {\n            // add new user to mapping\n            users[msg.sender].lastRelease = block.timestamp;\n            users[msg.sender].amount = _amount;\n        }\n\n        // Request Furion from user\n        furion.safeTransferFrom(msg.sender, address(this), _amount);\n\n        emit Deposit(msg.sender, _amount);\n    }\n\n    /**\n     * @notice Deposit for the max time\n     * @dev Release the max amount one time\n     */\n    function depositMaxTime(uint256 _amount)\n        external\n        nonReentrant\n        whenNotPaused\n    {\n        if (_amount == 0) revert VEF__ZeroAmount();\n\n        uint256 currentMaxTime = (maxCapRatio * SCALE) / generationRate;\n        uint256 lockUntil = block.timestamp + currentMaxTime * 2;\n\n        users[msg.sender].amountLocked += _amount;\n        users[msg.sender].lockUntil = lockUntil;\n\n        // Request Furion from user\n        furion.safeTransferFrom(msg.sender, address(this), _amount);\n\n        uint256 realCapRatio = _getCapRatio(msg.sender);\n\n        _mint(msg.sender, realCapRatio * _amount);\n\n        emit DepositMaxTime(msg.sender, _amount, lockUntil);\n    }\n\n    /**\n     * @notice Claims accumulated veFUR for flex deposit\n     */\n    function claim() public nonReentrant whenNotPaused {\n        if (users[msg.sender].amount == 0) revert VEF__ZeroAmount();\n\n        _claim(msg.sender);\n    }\n\n    /**\n     * @notice Withdraw Furion token\n     * @dev User will lose all veFUR once he withdrawed\n     * @param _amount Amount to withdraw\n     */\n    function withdraw(uint256 _amount)\n        external\n        nonReentrant\n        whenNotPaused\n        noLocked(msg.sender)\n    {\n        if (_amount == 0) revert VEF__ZeroAmount();\n\n        UserInfo storage user = users[msg.sender];\n        if (user.amount < _amount) revert VEF__NotEnoughBalance();\n\n        // reset last Release timestamp\n        user.lastRelease = block.timestamp;\n\n        // update his balance before burning or sending back Furion\n        user.amount -= _amount;\n\n        // get user veFUR balance that must be burned\n        // those locked amount will not be calculated\n\n        uint256 realCapRatio = _getCapRatio(msg.sender);\n\n        uint256 userVeFURBalance = balanceOf(msg.sender) -\n            user.amountLocked *\n            realCapRatio;\n\n        _burn(msg.sender, userVeFURBalance);\n\n        // send back the staked Furion\n        furion.safeTransfer(msg.sender, _amount);\n\n        emit Withdraw(msg.sender, _amount);\n    }\n\n    /**\n     * @notice Withdraw all the locked veFUR\n     */\n    function withdrawLocked()\n        external\n        nonReentrant\n        whenNotPaused\n        noLocked(msg.sender)\n    {\n        UserInfo memory user = users[msg.sender];\n\n        if (user.amountLocked == 0) revert VEF__ZeroAmount();\n        if (block.timestamp < user.lockUntil) revert VEF__TimeNotPassed();\n\n        uint256 realCapRatio = _getCapRatio(msg.sender);\n\n        _burn(msg.sender, user.amountLocked * realCapRatio);\n\n        // update his balance before burning or sending back Furion\n        users[msg.sender].amountLocked = 0;\n        users[msg.sender].lockUntil = 0;\n\n        // send back the staked Furion\n        furion.safeTransfer(msg.sender, user.amountLocked);\n    }\n\n    /**\n     * @notice Lock veFUR token\n     * @dev Only whitelisted contract\n     *      Income sharing contract will lock veFUR as entrance\n     * @param _to User address\n     * @param _amount Amount to lock\n     */\n    function lockVeFUR(address _to, uint256 _amount) external {\n        // Only whitelisted contract can lock veFUR\n        if (!whitelist[msg.sender]) revert VEF__NotWhiteListed();\n\n        if (locked[_to] + _amount > balanceOf(_to)) revert VEF__OverLocked();\n\n        _lock(_to, _amount);\n        emit LockVeFUR(msg.sender, _to, _amount);\n    }\n\n    /**\n     * @notice Unlock veFUR token\n     * @param _to User address\n     * @param _amount Amount to unlock\n     */\n    function unlockVeFUR(address _to, uint256 _amount) external {\n        // Only whitelisted contract can unlock veFUR\n        if (!whitelist[msg.sender]) revert VEF__NotWhiteListed();\n\n        if (locked[_to] < _amount) revert VEF__OverLocked();\n\n        _unlock(_to, _amount);\n        emit UnlockVeFUR(msg.sender, _to, _amount);\n    }\n\n    /**\n     * @notice Burn veFUR\n     * @dev Only whitelisted contract\n     *      For future use, some contracts may need veFUR for entrance\n     * @param _to Address to burn\n     * @param _amount Amount to burn\n     */\n    function burnVeFUR(address _to, uint256 _amount) public {\n        // Only whitelisted contract can burn veFUR\n        if (!whitelist[msg.sender]) revert VEF__NotWhiteListed();\n\n        _burn(_to, _amount);\n        emit BurnVeFUR(msg.sender, _to, _amount);\n    }\n\n     // ---------------------------------------------------------------------------------------- //\n    // ************************************ View Functions ************************************ //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Calculate the amount of veFUR that can be claimed by user\n     * @param _user User address\n     * @return claimableAmount Claimable amount of the user\n     */\n    function claimable(address _user) public view returns (uint256) {\n        if (_user == address(0)) revert VEF__ZeroAddress();\n\n        UserInfo memory user = users[_user];\n\n        // Seconds passed since last claim\n        uint256 timePassed = block.timestamp - user.lastRelease;\n\n        uint256 realCapRatio = _getCapRatio(_user);\n\n        uint256 pending;\n\n        pending = Math.wmul(user.amount, timePassed * generationRate);\n\n        // get user's veFUR balance\n        uint256 userVeFURBalance = balanceOf(_user) -\n            user.amountLocked * realCapRatio;\n\n        // user veFUR balance cannot go above user.amount * maxCap\n        uint256 veFURCap = user.amount * realCapRatio;\n\n        // first, check that user hasn't reached the max limit yet\n        if (userVeFURBalance < veFURCap) {\n            // then, check if pending amount will make user balance overpass maximum amount\n            if (userVeFURBalance + pending > veFURCap) {\n                return veFURCap - userVeFURBalance;\n            } else {\n                return pending;\n            }\n        }\n        return 0;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************ Set Functions ************************************* //\n    // ---------------------------------------------------------------------------------------- //\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    /**\n     * @notice Add a new whitelist address\n     * @dev Only callable by the owner\n     * @param _account Address to add\n     */\n    function addWhitelist(address _account) external onlyOwner {\n        whitelist[_account] = true;\n        emit WhiteListAdded(_account);\n    }\n\n    /**\n     * @notice Remove a new whitelist address\n     * @dev Only callable by the owner\n     * @param _account Address to remove\n     */\n    function removeWhitelist(address _account) external onlyOwner {\n        whitelist[_account] = false;\n        emit WhiteListRemoVEF(_account);\n    }\n\n    /**\n     * @notice Set maxCap ratio\n     * @param _maxCapRatio the new max ratio\n     */\n    function setMaxCapRatio(uint256 _maxCapRatio) external onlyOwner {\n        if (_maxCapRatio == 0) revert VEF__ZeroAmount();\n        emit MaxCapRatioChanged(maxCapRatio, _maxCapRatio);\n        maxCapRatio = _maxCapRatio;\n    }\n\n    /**\n     * @notice Set generationRate\n     * @param _generationRate New generation rate\n     */\n    function setGenerationRate(uint256 _generationRate) external onlyOwner {\n        if (_generationRate == 0) revert VEF__ZeroAmount();\n        emit GenerationRateChanged(generationRate, _generationRate);\n        generationRate = _generationRate;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // *********************************** Internal Functions ********************************* //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Finish claiming veFUR\n     * @param _user User address\n     */\n    function _claim(address _user) internal {\n        uint256 amount = claimable(_user);\n\n        // update last release time\n        users[_user].lastRelease = block.timestamp;\n\n        if (amount > 0) {\n            emit Claimed(_user, amount);\n            _mint(_user, amount);\n        }\n    }\n\n    /**\n     * @notice Lock veFUR token\n     * @param _to User address\n     * @param _amount Amount to lock\n     */\n    function _lock(address _to, uint256 _amount) internal {\n        locked[_to] += _amount;\n    }\n\n    /**\n     * @notice Unlock veFUR token\n     * @param _to User address\n     * @param _amount Amount to unlock\n     */\n    function _unlock(address _to, uint256 _amount) internal {\n        if (locked[_to] < _amount) revert VEF__NotEnoughBalance();\n        locked[_to] -= _amount;\n    }\n\n    /**\n     * @notice Get real cap ratio for a user\n     *         The ratio depends on the boost type\n     *\n     * @param _user User address\n     *\n     * @return realCapRatio Real cap ratio\n     */\n    function _getCapRatio(address _user)\n        internal\n        view\n        returns (uint256 realCapRatio)\n    {\n        if(_user == address(0)) revert VEF__ZeroAddress();\n        realCapRatio = maxCapRatio;\n    }\n}\n"
    },
    "contracts/furion-farming/interfaces/IFarmingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\ninterface IFarmingPool {\n\n    function pendingFurion(uint256 _poolId, address _user)\n        external\n        returns (uint256);\n\n    function setStartBlock(uint256 _startBlock) external;\n\n    function add(\n        address _lpToken,\n        uint256 _poolId,\n        bool _withUpdate\n    ) external;\n\n    function setFurionReward(\n        uint256 _poolId,\n        uint256 _basicFurionPerBlock,\n        bool _withUpdate\n    ) external;\n\n    function setFurionReward(\n        uint256[] calldata _poolId,\n        uint256[] calldata _basicFurionPerBlock,\n        bool _withUpdate\n    ) external;\n\n    function stake(uint256 _poolId, uint256 _amount) external;\n\n    function withdraw(uint256 _poolId, uint256 _amount) external;\n\n    function updatePool(uint256 _poolId) external;\n\n    function massUpdatePools() external;\n\n    function harvest(uint256 _poolId, address _to) external;\n}\n"
    },
    "contracts/income-sharing/IncomeSharingVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport { IERC20 } from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { OwnableUpgradeable } from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport { PausableUpgradeable } from \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport {\n    ReentrancyGuardUpgradeable\n} from \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport { IVeFUR } from \"../furion-staking/interfaces/IVeFUR.sol\";\n\nimport \"hardhat/console.sol\";\n\n/*\n//===================================//\n ______ _   _______ _____ _____ _   _ \n |  ___| | | | ___ \\_   _|  _  | \\ | |\n | |_  | | | | |_/ / | | | | | |  \\| |\n |  _| | | | |    /  | | | | | | . ` |\n | |   | |_| | |\\ \\ _| |_\\ \\_/ / |\\  |\n \\_|    \\___/\\_| \\_|\\___/ \\___/\\_| \\_/\n//===================================//\n* /\n\n/**\n * @title Furion's Income Sharing Contract with veFUR\n * @notice This contract will receive part of the income from Furion products\n *         And the income will be shared by FUR holders (in the form of veFUR staking)\n *         All income come out as one same token(income token, FUR by default)\n *\n *         It is designed to be an ever-lasting reward\n *\n *         To enter the income sharing vault, you need to lock some veFUR\n *             - When your veFUR is locked, it can not be withdrawed\n *\n *         The reward is FIStributed per second like a farming pool\n *         The income will come from (to be updated)\n *             - IncomeMaker: Collect swap fee in furion swap pool\n */\n\ncontract IncomeSharingVault is\n    OwnableUpgradeable,\n    PausableUpgradeable,\n    ReentrancyGuardUpgradeable\n{\n    using SafeERC20 for IERC20;\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Variables **************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    uint256 public constant SCALE = 1e30;\n\n    // How long one single round would last\n    uint256 public roundTime;\n\n    IVeFUR public veFUR;\n\n    struct PoolInfo {\n        bool available;\n        address rewardToken;\n        uint256 totalAmount;\n        uint256 rewardPerSecond;\n        uint256 accRewardPerShare;\n        uint256 lastRewardTimestamp;\n    }\n\n    // PoolId => PoolInfo, different pool with different reward token\n    mapping(uint256 => PoolInfo) public pools;\n\n    struct UserInfo {\n        uint256 totalAmount;\n        uint256 rewardDebt;\n    }\n\n    // poolId => user address => user info\n    mapping(uint256 => mapping(address => UserInfo)) public users;\n\n    // next pool id, starting from 1\n    uint256 public nextPool;\n\n    // ---------------------------------------------------------------------------------------- //\n    // *************************************** Events ***************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    event RoundTimeChanged(uint256 oldRoundTime, uint256 newRoundTime);\n    event NewRewardPoolStart(uint256 poolId, address rewardToken);\n    event RewardSpeedSet(uint256 poolId, uint256 rewardPerSecond);\n    event PoolUpdated(uint256 poolId, uint256 accRewardPerSecond);\n    event Harvest(address user, uint256 poolId, uint256 amount);\n    event Deposit(address user, uint256 poolId, uint256 amount);\n    event Withdraw(address user, uint256 poolId, uint256 amount);\n\n    // ---------------------------------------------------------------------------------------- //\n    // *************************************** Errors ***************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    // Errors start with FIS(Furion Income Sharing)\n    error FIS__PoolNotAvailable();\n    error FIS__ZeroAmount();\n    error FIS__NotEnoughVeFUR();\n    error FIS__WrongSpeed();\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Constructor ************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    function initialize(address _veFUR) public initializer {\n        __Ownable_init();\n        __Pausable_init();\n        __ReentrancyGuard_init();\n\n        veFUR = IVeFUR(_veFUR);\n\n        nextPool = 1;\n\n        // 7 days every round by default\n        // roundTime = 3600 * 24 * 7;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************ View Functions ************************************ //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Pending reward\n     * @param _poolId Pool Id\n     * @param _user   User address\n     * @return pendingReward Amount of pending reward\n     */\n    function pendingReward(uint256 _poolId, address _user)\n        external\n        view\n        returns (uint256)\n    {\n        PoolInfo memory pool = pools[_poolId];\n\n        if (\n            pool.lastRewardTimestamp == 0 ||\n            block.timestamp < pool.lastRewardTimestamp\n        ) return 0;\n\n        uint256 accRewardPerShare = pool.accRewardPerShare;\n\n        if (pool.totalAmount == 0) return 0;\n        else {\n            UserInfo memory user = users[_poolId][_user];\n\n            uint256 timePassed = block.timestamp - pool.lastRewardTimestamp;\n            uint256 reward = timePassed * pool.rewardPerSecond;\n\n            // Remainging reward inside the pool\n            uint256 remainingReward = IERC20(pool.rewardToken).balanceOf(\n                address(this)\n            );\n\n            uint256 finalReward = reward > remainingReward\n                ? remainingReward\n                : reward;\n\n            accRewardPerShare += (finalReward * SCALE) / pool.totalAmount;\n\n            uint256 pending = (user.totalAmount * accRewardPerShare) /\n                SCALE -\n                user.rewardDebt;\n\n            return pending;\n        }\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************ Set Functions ************************************* //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Set round time\n     * @dev Round time is only used for checking reward speed\n     * @param _roundTime Round time in seconds\n     */\n    function setRoundTime(uint256 _roundTime) external onlyOwner {\n        emit RoundTimeChanged(roundTime, _roundTime);\n        roundTime = _roundTime;\n    }\n\n    /**\n     * @notice Start a new income sharing pool\n     * @dev Every pool would have its own reward token\n     * @param _rewardToken Reward token address\n     */\n    function startPool(address _rewardToken) external onlyOwner {\n        PoolInfo storage pool = pools[nextPool++];\n\n        pool.available = true;\n        pool.rewardToken = _rewardToken;\n\n        emit NewRewardPoolStart(nextPool - 1, _rewardToken);\n    }\n\n    /**\n     * @notice Set reward speed for a pool\n     * @param _poolId Pool id\n     * @param _rewardPerSecond Reward speed\n     */\n    function setRewardSpeed(uint256 _poolId, uint256 _rewardPerSecond)\n        external\n    {\n        updatePool(_poolId);\n\n        PoolInfo memory pool = pools[_poolId];\n\n        // Ensure there is enough reward for this round\n        if (\n            roundTime * _rewardPerSecond >\n            IERC20(pool.rewardToken).balanceOf(address(this))\n        ) revert FIS__WrongSpeed();\n\n        pools[_poolId].rewardPerSecond = _rewardPerSecond;\n\n        emit RewardSpeedSet(_poolId, _rewardPerSecond);\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************ Main Functions ************************************ //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Deposit\n     * @param _poolId Pool Id\n     * @param _amount Amount of tokens to deposit\n     */\n    function deposit(uint256 _poolId, uint256 _amount) external nonReentrant {\n        if (!pools[_poolId].available) revert FIS__PoolNotAvailable();\n        if (_amount == 0) revert FIS__ZeroAmount();\n        if (veFUR.balanceOf(msg.sender) < _amount) revert FIS__NotEnoughVeFUR();\n\n        updatePool(_poolId);\n\n        // Lock some veFUR to participate\n        veFUR.lockVeFUR(msg.sender, _amount);\n\n        PoolInfo storage pool = pools[_poolId];\n        UserInfo storage user = users[_poolId][msg.sender];\n\n        if (user.totalAmount > 0) {\n            uint256 pending = (pool.accRewardPerShare * user.totalAmount) /\n                SCALE -\n                user.rewardDebt;\n\n            uint256 reward = _safeRewardTransfer(\n                pool.rewardToken,\n                msg.sender,\n                pending\n            );\n            emit Harvest(msg.sender, _poolId, reward);\n        }\n\n        // Update pool amount\n        pool.totalAmount += _amount;\n\n        // Update user amount\n        user.totalAmount += _amount;\n\n        user.rewardDebt = (pool.accRewardPerShare * user.totalAmount) / SCALE;\n\n        emit Deposit(msg.sender, _poolId, _amount);\n    }\n\n    /**\n     * @notice Withdraw all veFUR\n     * @param _poolId Pool Id\n     */\n    function withdrawAll(uint256 _poolId) external {\n        withdraw(_poolId, users[_poolId][msg.sender].totalAmount);\n    }\n\n    /**\n     * @notice Withdraw the reward from the pool\n     * @param _poolId Pool Id\n     * @param _amount Amount to withdraw\n     */\n    function withdraw(uint256 _poolId, uint256 _amount) public nonReentrant {\n        if (_amount == 0) revert FIS__ZeroAmount();\n\n        PoolInfo storage pool = pools[_poolId];\n        UserInfo storage user = users[_poolId][msg.sender];\n\n        if (user.totalAmount < _amount) revert FIS__NotEnoughVeFUR();\n\n        updatePool(_poolId);\n\n        uint256 pending = (pool.accRewardPerShare * user.totalAmount) /\n            SCALE -\n            user.rewardDebt;\n\n        uint256 reward = _safeRewardTransfer(\n            pool.rewardToken,\n            msg.sender,\n            pending\n        );\n        emit Harvest(msg.sender, _poolId, reward);\n\n        // Update user info\n        pool.totalAmount -= _amount;\n\n        user.totalAmount -= _amount;\n        user.rewardDebt = (user.totalAmount * pool.accRewardPerShare) / SCALE;\n\n        // Unlock veFUR\n        veFUR.unlockVeFUR(msg.sender, _amount);\n\n        emit Withdraw(msg.sender, _poolId, _amount);\n    }\n\n    /**\n     * @notice Harvest income reward\n     * @param _poolId Pool Id\n     * @param _to Reward receiver address\n     */\n    function harvest(uint256 _poolId, address _to)\n        public\n        nonReentrant\n        whenNotPaused\n    {\n        updatePool(_poolId);\n\n        PoolInfo memory pool = pools[_poolId];\n        UserInfo storage user = users[_poolId][msg.sender];\n\n        // pending reward\n        uint256 pending = (user.totalAmount * pool.accRewardPerShare) /\n            SCALE -\n            user.rewardDebt;\n\n        user.rewardDebt = (user.totalAmount * pool.accRewardPerShare) / SCALE;\n\n        uint256 reward = _safeRewardTransfer(pool.rewardToken, _to, pending);\n\n        emit Harvest(msg.sender, _poolId, reward);\n    }\n\n    /**\n     * @notice Update pool\n     * @param _poolId Pool id\n     */\n    function updatePool(uint256 _poolId) public {\n        PoolInfo storage pool = pools[_poolId];\n\n        if (block.timestamp <= pool.lastRewardTimestamp) return;\n\n        uint256 totalAmount = pool.totalAmount;\n        uint256 rewardPerSecond = pool.rewardPerSecond;\n\n        if (totalAmount == 0 || rewardPerSecond == 0) {\n            pool.lastRewardTimestamp = block.timestamp;\n            return;\n        }\n\n        // Time passed in seconds and total rewards\n        uint256 timePassed = block.timestamp - pool.lastRewardTimestamp;\n        uint256 reward = timePassed * rewardPerSecond;\n\n        // Remainging reward inside the pool\n        uint256 remainingReward = IERC20(pool.rewardToken).balanceOf(\n            address(this)\n        );\n\n        // Can not exceed the max balance of the pool\n        uint256 finalReward = reward > remainingReward\n            ? remainingReward\n            : reward;\n\n        pool.accRewardPerShare += (finalReward * SCALE) / totalAmount;\n\n        pool.lastRewardTimestamp = block.timestamp;\n\n        emit PoolUpdated(_poolId, pool.accRewardPerShare);\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // *********************************** Internal Functions ********************************* //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Finish the reward token transfer\n     * @dev Safe means not transfer exceeds the balance of contract\n     *      Manually change the reward speed\n     * @param _to Address to transfer\n     * @param _amount Amount to transfer\n     * @return realAmount Real amount transferred\n     */\n    function _safeRewardTransfer(\n        address _token,\n        address _to,\n        uint256 _amount\n    ) internal returns (uint256) {\n        uint256 balance = IERC20(_token).balanceOf(address(this));\n\n        if (_amount > balance) {\n            IERC20(_token).safeTransfer(_to, balance);\n            return balance;\n        } else {\n            IERC20(_token).safeTransfer(_to, _amount);\n            return _amount;\n        }\n    }\n}\n"
    },
    "contracts/furion-staking/interfaces/IVeFUR.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"./IVeERC20.sol\";\n\n/**\n * @dev Interface of the VeFUR\n */\ninterface IVeFUR is IVeERC20 {\n    function isUser(address _addr) external view returns (bool);\n\n    function deposit(uint256 _amount) external;\n\n    function claim() external;\n\n    function withdraw(uint256 _amount) external;\n\n    function getStakedFur(address _addr) external view returns (uint256);\n\n    function getVotes(address _account) external view returns (uint256);\n\n    function lockVeFUR(address _to, uint256 _amount) external;\n\n    function unlockVeFUR(address _to, uint256 _amount) external;\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "contracts/Greeter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"hardhat/console.sol\";\n\nerror GreeterError();\n\ncontract Greeter {\n    string public greeting;\n\n    constructor(string memory _greeting) {\n        console.log(\"Deploying a Greeter with greeting:\", _greeting);\n        greeting = _greeting;\n    }\n\n    function greet() public view returns (string memory) {\n        return greeting;\n    }\n\n    function setGreeting(string memory _greeting) public {\n        console.log(\"Changing greeting from '%s' to '%s'\", greeting, _greeting);\n        greeting = _greeting;\n    }\n\n    function throwError() external pure {\n        revert GreeterError();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "contracts/proxy/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// OpenZeppelin Contracts v4.4.0 (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        assert(\n            _ADMIN_SLOT ==\n                bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1)\n        );\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation()\n        external\n        ifAdmin\n        returns (address implementation_)\n    {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data)\n        external\n        payable\n        ifAdmin\n    {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(\n            msg.sender != _getAdmin(),\n            \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\"\n        );\n        super._beforeFallback();\n    }\n}\n"
    },
    "contracts/proxy/ProxyAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// OpenZeppelin Contracts v4.4.0 (proxy/transparent/ProxyAdmin.sol)\n\npragma solidity ^0.8.10;\n\nimport \"./TransparentUpgradeableProxy.sol\";\nimport \"../utils/Ownable.sol\";\n\n/**\n * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n */\ncontract ProxyAdmin is Ownable {\n    constructor() Ownable(msg.sender) {}\n\n    /**\n     * @dev Returns the current implementation of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyImplementation(TransparentUpgradeableProxy proxy)\n        public\n        view\n        virtual\n        returns (address)\n    {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"implementation()\")) == 0x5c60da1b\n        (bool success, bytes memory returndata) = address(proxy).staticcall(\n            hex\"5c60da1b\"\n        );\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Returns the current admin of `proxy`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function getProxyAdmin(TransparentUpgradeableProxy proxy)\n        public\n        view\n        virtual\n        returns (address)\n    {\n        // We need to manually run the static call since the getter cannot be flagged as view\n        // bytes4(keccak256(\"admin()\")) == 0xf851a440\n        (bool success, bytes memory returndata) = address(proxy).staticcall(\n            hex\"f851a440\"\n        );\n        require(success);\n        return abi.decode(returndata, (address));\n    }\n\n    /**\n     * @dev Changes the admin of `proxy` to `newAdmin`.\n     *\n     * Requirements:\n     *\n     * - This contract must be the current admin of `proxy`.\n     */\n    function changeProxyAdmin(\n        TransparentUpgradeableProxy proxy,\n        address newAdmin\n    ) public virtual onlyOwner {\n        proxy.changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgrade(TransparentUpgradeableProxy proxy, address implementation)\n        public\n        virtual\n        onlyOwner\n    {\n        proxy.upgradeTo(implementation);\n    }\n\n    /**\n     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n     *\n     * Requirements:\n     *\n     * - This contract must be the admin of `proxy`.\n     */\n    function upgradeAndCall(\n        TransparentUpgradeableProxy proxy,\n        address implementation,\n        bytes memory data\n    ) public payable virtual onlyOwner {\n        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n    }\n}\n"
    },
    "contracts/utils/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"./Context.sol\";\n\n/**\n * @dev The owner can be set during deployment, not default to be msg.sender\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor(address _initialOwner) {\n        _transferOwnership(_initialOwner);\n    }\n\n    /**\n     * @notice Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @notice Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @notice Leaves the contract without owner. It will not be possible to call\n     *         `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * @dev    Renouncing ownership will leave the contract without an owner,\n     *         thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\n     * @dev    Can only be called by the current owner.\n     * @param  newOwner Address of the new owner\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @notice Transfers ownership of the contract to a new account (`newOwner`).\n     * @dev    Internal function without access restriction.\n     * @param  newOwner Address of the new owner\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity ^0.8.10;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/proxy/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(\n            _initializing ? _isConstructor() : !_initialized,\n            \"Initializable: contract is already initialized\"\n        );\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "contracts/furion-swap/FurionSwapFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"./interfaces/IFurionSwapFactory.sol\";\nimport \"./FurionSwapPair.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n// import {OwnableUpgradeable} from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\n/*\n//===================================//\n ______ _   _______ _____ _____ _   _ \n |  ___| | | | ___ \\_   _|  _  | \\ | |\n | |_  | | | | |_/ / | | | | | |  \\| |\n |  _| | | | |    /  | | | | | | . ` |\n | |   | |_| | |\\ \\ _| |_\\ \\_/ / |\\  |\n \\_|    \\___/\\_| \\_|\\___/ \\___/\\_| \\_/\n//===================================//\n* /\n\n/**\n * @title Furion Swap Factory\n * @dev Factory contract to deploy new trading pair\n *      All token pairs are supported but with an indicator to show if one of them is Furion Tokens\n *      Furion Tokens refer to F-* token, FFT, and FUR\n */\n\n\ncontract FurionSwapFactory is IFurionSwapFactory {\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Variables **************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    address private _owner;\n\n    // token0 Address => token1 Address => Pool Address\n    mapping(address => mapping(address => address)) public override getPair;\n    mapping(address => mapping(address => bool)) public override isFurionPairs;\n\n\n    // Store all the pairs' addresses\n    address[] public allPairs;\n\n    // Address of income maker, part of the transaction fee will be distributed to this address\n    address public incomeMaker;\n\n    // Swap fee proportion to income maker\n    uint256 public incomeMakerProportion;\n\n    // ---------------------------------------------------------------------------------------- //\n    // *************************************** Events ***************************************** //\n    // ---------------------------------------------------------------------------------------- //\n    event PairCreated(\n        address indexed token0,\n        address indexed token1,\n        address pair,\n        uint allPairsLength\n    );\n    event IncomeMakerProportionChanged(\n        uint256 oldProportion,\n        uint256 newProportion\n    );\n    event IncomeMakerAddressChanged(\n        address oldIncomeMaker,\n        address newIncomeMaker\n    );\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Constructor ************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    constructor(address _incomeMaker) {\n        _owner = msg.sender;\n        incomeMaker = _incomeMaker;\n        // 1% of swap fee is distributed to income maker contract\n        // Can be set later\n        incomeMakerProportion = 1;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************** Modifiers *************************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************ View Functions ************************************ //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function allPairsLength() external view returns (uint) {\n        return allPairs.length;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Set Functions ************************************ //\n    // ---------------------------------------------------------------------------------------- //\n\n    /**\n     * @notice Set income maker proportion\n     * @dev    Only callable by the owner\n     * @param _proportion New proportion to income maker contract\n     */\n    function setIncomeMakerProportion(uint256 _proportion) external onlyOwner {\n        emit IncomeMakerProportionChanged(incomeMakerProportion, _proportion);\n        incomeMakerProportion = _proportion;\n    }\n\n    /**\n     * @notice Set income maker address\n     * @dev Only callable by the owner\n     * @param _incomeMaker New income maker address\n     */\n    function setIncomeMakerAddress(address _incomeMaker) external onlyOwner {\n        emit IncomeMakerAddressChanged(incomeMaker, _incomeMaker);\n        incomeMaker = _incomeMaker;\n    }\n\n    // ---------------------------------------------------------------------------------------- //\n    // ************************************* Main Functions *********************************** //\n    // ---------------------------------------------------------------------------------------- //\n\n    function createPair(\n        address _tokenA,\n        address _tokenB\n    ) external override returns (address _pair) {\n\n        require(_tokenA != _tokenB, \"FurionSwap: IDENTICAL_ADDRESSES\");\n\n        (address token0, address token1) = _tokenA < _tokenB ? (_tokenA, _tokenB) : (_tokenB, _tokenA);\n\n        require(token0 != address(0), \"FurionSwap: ZERO_ADDRESS\");\n        require(getPair[token0][token1] == address(0), \"FurionSwap: PAIR_EXISTS\"); // single check is sufficient\n\n        bytes memory bytecode = type(FurionSwapPair).creationCode;\n        bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n        assembly {\n            _pair := create2(0, add(bytecode, 32), mload(bytecode), salt)\n        }\n        FurionSwapPair(_pair).initialize(token0, token1);\n\n        // populate mapping in the reverse direction\n        getPair[token0][token1] = _pair;\n        getPair[token1][token0] = _pair;\n\n        allPairs.push(_pair);\n\n        emit PairCreated(token0, token1, _pair, allPairs.length);\n    }\n}\n"
    },
    "contracts/tokens/WETH9.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"./interfaces/IWETH.sol\";\n\ncontract WETH9 is IWETH {\n\n    string public name = \"Wrapped Ether\";\n    string public symbol = \"WETH\";\n    uint8 public decimals = 18;\n\n    event Approval(address indexed _src, address indexed _to, uint256 _amount);\n    event Transfer(address indexed _src, address indexed _to, uint256 _amount);\n    event Deposit(address indexed _to, uint256 _amount);\n    event Withdrawal(address indexed _src, uint256 _amount);\n\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    receive() external payable {\n        deposit();\n    }\n\n    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    function withdraw(uint256 _amount) public {\n        require(balanceOf[msg.sender] >= _amount, \"INSUFFICIENT_BALANCE\");\n        balanceOf[msg.sender] -= _amount;\n\n        (bool success, ) = msg.sender.call{value: _amount}(\"\");\n        require(success, \"TransferHelper: ETH_TRANSFER_FAILED\");\n\n        emit Withdrawal(msg.sender, _amount);\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    function approve(address _to, uint256 _amount) public returns (bool) {\n        allowance[msg.sender][_to] = _amount;\n        emit Approval(msg.sender, _to, _amount);\n        return true;\n    }\n\n    function transfer(address _to, uint256 _amount) public returns (bool) {\n        return transferFrom(msg.sender, _to, _amount);\n    }\n\n    function transferFrom(\n        address _src,\n        address _to,\n        uint256 _amount\n    ) public returns (bool) {\n        require(balanceOf[_src] >= _amount, \"INSUFFICIENT_BALANCE\");\n\n        if (_src != msg.sender && allowance[_src][msg.sender] >= 0) {\n            require(allowance[_src][msg.sender] >= _amount, \"EXCEED_ALLOWANCE\");\n            allowance[_src][msg.sender] -= _amount;\n        }\n\n        balanceOf[_src] -= _amount;\n        balanceOf[_to] += _amount;\n\n        emit Transfer(_src, _to, _amount);\n        return true;\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    }
  }
}
